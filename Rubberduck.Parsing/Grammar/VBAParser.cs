//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Splinter\Documents\Visual Studio 2015\Projects\TestProj\TestProj\VBA.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Rubberduck.Parsing.Grammar
{
    using Antlr4.Runtime;
    using Antlr4.Runtime.Atn;
    using Antlr4.Runtime.Misc;
    using Antlr4.Runtime.Tree;
    using System.Collections.Generic;
    using DFA = Antlr4.Runtime.Dfa.DFA;

    [System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
    [System.CLSCompliant(false)]
    public partial class VBAParser : Parser
    {
        public const int
            T__8 = 1, T__7 = 2, T__6 = 3, T__5 = 4, T__4 = 5, T__3 = 6, T__2 = 7, T__1 = 8, T__0 = 9,
            ACCESS = 10, ADDRESSOF = 11, ALIAS = 12, AND = 13, ATTRIBUTE = 14, APPACTIVATE = 15,
            APPEND = 16, AS = 17, BEGIN = 18, BEEP = 19, BINARY = 20, BOOLEAN = 21, BYVAL = 22,
            BYREF = 23, BYTE = 24, CALL = 25, CASE = 26, CHDIR = 27, CHDRIVE = 28, CLASS = 29, CLOSE = 30,
            COLLECTION = 31, CONST = 32, DATABASE = 33, DATE = 34, DECLARE = 35, DEFBOOL = 36,
            DEFBYTE = 37, DEFDATE = 38, DEFDBL = 39, DEFDEC = 40, DEFCUR = 41, DEFINT = 42, DEFLNG = 43,
            DEFOBJ = 44, DEFSNG = 45, DEFSTR = 46, DEFVAR = 47, DELETESETTING = 48, DIM = 49,
            DO = 50, DOUBLE = 51, EACH = 52, ELSE = 53, ELSEIF = 54, END_ENUM = 55, END_FUNCTION = 56,
            END_IF = 57, END_PROPERTY = 58, END_SELECT = 59, END_SUB = 60, END_TYPE = 61, END_WITH = 62,
            END = 63, ENUM = 64, EQV = 65, ERASE = 66, ERROR = 67, EVENT = 68, EXIT_DO = 69, EXIT_FOR = 70,
            EXIT_FUNCTION = 71, EXIT_PROPERTY = 72, EXIT_SUB = 73, FALSE = 74, FILECOPY = 75,
            FRIEND = 76, FOR = 77, FUNCTION = 78, GET = 79, GLOBAL = 80, GOSUB = 81, GOTO = 82,
            IF = 83, IMP = 84, IMPLEMENTS = 85, IN = 86, INPUT = 87, IS = 88, INTEGER = 89, KILL = 90,
            LOAD = 91, LOCK = 92, LONG = 93, LOOP = 94, LEN = 95, LET = 96, LIB = 97, LIKE = 98, LINE_INPUT = 99,
            LOCK_READ = 100, LOCK_WRITE = 101, LOCK_READ_WRITE = 102, LSET = 103, MACRO_CONST = 104,
            MACRO_IF = 105, MACRO_ELSEIF = 106, MACRO_ELSE = 107, MACRO_END_IF = 108, ME = 109,
            MID = 110, MKDIR = 111, MOD = 112, NAME = 113, NEXT = 114, NEW = 115, NOT = 116, NOTHING = 117,
            NULL = 118, ON = 119, ON_ERROR = 120, ON_LOCAL_ERROR = 121, OPEN = 122, OPTIONAL = 123,
            OPTION_BASE = 124, OPTION_EXPLICIT = 125, OPTION_COMPARE = 126, OPTION_PRIVATE_MODULE = 127,
            OR = 128, OUTPUT = 129, PARAMARRAY = 130, PRESERVE = 131, PRINT = 132, PRIVATE = 133,
            PROPERTY_GET = 134, PROPERTY_LET = 135, PROPERTY_SET = 136, PTRSAFE = 137, PUBLIC = 138,
            PUT = 139, RANDOM = 140, RANDOMIZE = 141, RAISEEVENT = 142, READ = 143, READ_WRITE = 144,
            REDIM = 145, REM = 146, RESET = 147, RESUME = 148, RETURN = 149, RMDIR = 150, RSET = 151,
            SAVEPICTURE = 152, SAVESETTING = 153, SEEK = 154, SELECT = 155, SENDKEYS = 156,
            SET = 157, SETATTR = 158, SHARED = 159, SINGLE = 160, SPC = 161, STATIC = 162, STEP = 163,
            STOP = 164, STRING = 165, SUB = 166, TAB = 167, TEXT = 168, THEN = 169, TIME = 170,
            TO = 171, TRUE = 172, TYPE = 173, TYPEOF = 174, UNLOAD = 175, UNLOCK = 176, UNTIL = 177,
            VARIANT = 178, VERSION = 179, WEND = 180, WHILE = 181, WIDTH = 182, WITH = 183, WITHEVENTS = 184,
            WRITE = 185, XOR = 186, AMPERSAND = 187, ASSIGN = 188, DIV = 189, EQ = 190, GEQ = 191,
            GT = 192, LEQ = 193, LPAREN = 194, LT = 195, MINUS = 196, MINUS_EQ = 197, MULT = 198,
            NEQ = 199, PLUS = 200, PLUS_EQ = 201, POW = 202, RPAREN = 203, L_SQUARE_BRACKET = 204,
            R_SQUARE_BRACKET = 205, STRINGLITERAL = 206, OCTLITERAL = 207, HEXLITERAL = 208,
            SHORTLITERAL = 209, INTEGERLITERAL = 210, DOUBLELITERAL = 211, DATELITERAL = 212,
            LINE_CONTINUATION = 213, NEWLINE = 214, COMMENT = 215, WS = 216, IDENTIFIER = 217;
        public static readonly string[] tokenNames = {
        "<INVALID>", "'@'", "'!'", "'#'", "'$'", "'%'", "':'", "';'", "','", "'.'",
        "ACCESS", "ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPACTIVATE", "APPEND",
        "AS", "BEGIN", "BEEP", "BINARY", "BOOLEAN", "BYVAL", "BYREF", "BYTE",
        "CALL", "CASE", "CHDIR", "CHDRIVE", "CLASS", "CLOSE", "COLLECTION", "CONST",
        "DATABASE", "DATE", "DECLARE", "DEFBOOL", "DEFBYTE", "DEFDATE", "DEFDBL",
        "DEFDEC", "DEFCUR", "DEFINT", "DEFLNG", "DEFOBJ", "DEFSNG", "DEFSTR",
        "DEFVAR", "DELETESETTING", "DIM", "DO", "DOUBLE", "EACH", "ELSE", "ELSEIF",
        "END_ENUM", "END_FUNCTION", "END_IF", "END_PROPERTY", "END_SELECT", "END_SUB",
        "END_TYPE", "END_WITH", "END", "ENUM", "EQV", "ERASE", "ERROR", "EVENT",
        "EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", "EXIT_SUB", "FALSE",
        "FILECOPY", "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", "GOTO",
        "IF", "IMP", "IMPLEMENTS", "IN", "INPUT", "IS", "INTEGER", "KILL", "LOAD",
        "LOCK", "LONG", "LOOP", "LEN", "LET", "LIB", "LIKE", "LINE_INPUT", "LOCK_READ",
        "LOCK_WRITE", "LOCK_READ_WRITE", "LSET", "MACRO_CONST", "MACRO_IF", "MACRO_ELSEIF",
        "MACRO_ELSE", "MACRO_END_IF", "ME", "MID", "MKDIR", "MOD", "NAME", "NEXT",
        "NEW", "NOT", "NOTHING", "NULL", "ON", "ON_ERROR", "ON_LOCAL_ERROR", "OPEN",
        "OPTIONAL", "OPTION_BASE", "OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE",
        "OR", "OUTPUT", "PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET",
        "PROPERTY_LET", "PROPERTY_SET", "PTRSAFE", "PUBLIC", "PUT", "RANDOM",
        "RANDOMIZE", "RAISEEVENT", "READ", "READ_WRITE", "REDIM", "REM", "RESET",
        "RESUME", "RETURN", "RMDIR", "RSET", "SAVEPICTURE", "SAVESETTING", "SEEK",
        "SELECT", "SENDKEYS", "SET", "SETATTR", "SHARED", "SINGLE", "SPC", "STATIC",
        "STEP", "STOP", "STRING", "SUB", "TAB", "TEXT", "THEN", "TIME", "TO",
        "TRUE", "TYPE", "TYPEOF", "UNLOAD", "UNLOCK", "UNTIL", "VARIANT", "VERSION",
        "WEND", "WHILE", "WIDTH", "WITH", "WITHEVENTS", "WRITE", "XOR", "'&'",
        "':='", "DIV", "'='", "'>='", "'>'", "'<='", "'('", "'<'", "'-'", "'-='",
        "'*'", "'<>'", "'+'", "'+='", "'^'", "')'", "'['", "']'", "STRINGLITERAL",
        "OCTLITERAL", "HEXLITERAL", "SHORTLITERAL", "INTEGERLITERAL", "DOUBLELITERAL",
        "DATELITERAL", "LINE_CONTINUATION", "NEWLINE", "COMMENT", "WS", "IDENTIFIER"
    };
        public const int
            RULE_startRule = 0, RULE_module = 1, RULE_moduleHeader = 2, RULE_moduleConfig = 3,
            RULE_moduleConfigElement = 4, RULE_moduleAttributes = 5, RULE_moduleDeclarations = 6,
            RULE_moduleOption = 7, RULE_moduleDeclarationsElement = 8, RULE_moduleBody = 9,
            RULE_moduleBodyElement = 10, RULE_attributeStmt = 11, RULE_block = 12,
            RULE_blockStmt = 13, RULE_appactivateStmt = 14, RULE_beepStmt = 15, RULE_chdirStmt = 16,
            RULE_chdriveStmt = 17, RULE_closeStmt = 18, RULE_constStmt = 19, RULE_constSubStmt = 20,
            RULE_dateStmt = 21, RULE_declareStmt = 22, RULE_deftypeStmt = 23, RULE_deleteSettingStmt = 24,
            RULE_doLoopStmt = 25, RULE_endStmt = 26, RULE_enumerationStmt = 27, RULE_enumerationStmt_Constant = 28,
            RULE_eraseStmt = 29, RULE_errorStmt = 30, RULE_eventStmt = 31, RULE_exitStmt = 32,
            RULE_filecopyStmt = 33, RULE_forEachStmt = 34, RULE_forNextStmt = 35,
            RULE_functionStmt = 36, RULE_getStmt = 37, RULE_goSubStmt = 38, RULE_goToStmt = 39,
            RULE_ifThenElseStmt = 40, RULE_ifBlockStmt = 41, RULE_ifConditionStmt = 42,
            RULE_ifElseIfBlockStmt = 43, RULE_ifElseBlockStmt = 44, RULE_implementsStmt = 45,
            RULE_inputStmt = 46, RULE_killStmt = 47, RULE_letStmt = 48, RULE_lineInputStmt = 49,
            RULE_loadStmt = 50, RULE_lockStmt = 51, RULE_lsetStmt = 52, RULE_macroConstStmt = 53,
            RULE_macroIfThenElseStmt = 54, RULE_macroIfBlockStmt = 55, RULE_macroElseIfBlockStmt = 56,
            RULE_macroElseBlockStmt = 57, RULE_midStmt = 58, RULE_mkdirStmt = 59,
            RULE_nameStmt = 60, RULE_onErrorStmt = 61, RULE_onGoToStmt = 62, RULE_onGoSubStmt = 63,
            RULE_openStmt = 64, RULE_outputList = 65, RULE_outputList_Expression = 66,
            RULE_printStmt = 67, RULE_propertyGetStmt = 68, RULE_propertySetStmt = 69,
            RULE_propertyLetStmt = 70, RULE_putStmt = 71, RULE_raiseEventStmt = 72,
            RULE_randomizeStmt = 73, RULE_redimStmt = 74, RULE_redimSubStmt = 75,
            RULE_resetStmt = 76, RULE_resumeStmt = 77, RULE_returnStmt = 78, RULE_rmdirStmt = 79,
            RULE_rsetStmt = 80, RULE_savepictureStmt = 81, RULE_saveSettingStmt = 82,
            RULE_seekStmt = 83, RULE_selectCaseStmt = 84, RULE_sC_Selection = 85,
            RULE_sC_Case = 86, RULE_sC_Cond = 87, RULE_sendkeysStmt = 88, RULE_setattrStmt = 89,
            RULE_setStmt = 90, RULE_stopStmt = 91, RULE_subStmt = 92, RULE_timeStmt = 93,
            RULE_typeStmt = 94, RULE_typeStmt_Element = 95, RULE_typeOfStmt = 96,
            RULE_unloadStmt = 97, RULE_unlockStmt = 98, RULE_valueStmt = 99, RULE_variableStmt = 100,
            RULE_variableListStmt = 101, RULE_variableSubStmt = 102, RULE_whileWendStmt = 103,
            RULE_widthStmt = 104, RULE_withStmt = 105, RULE_writeStmt = 106, RULE_fileNumber = 107,
            RULE_explicitCallStmt = 108, RULE_eCS_ProcedureCall = 109, RULE_eCS_MemberProcedureCall = 110,
            RULE_implicitCallStmt_InBlock = 111, RULE_iCS_B_MemberProcedureCall = 112,
            RULE_iCS_B_ProcedureCall = 113, RULE_implicitCallStmt_InStmt = 114, RULE_iCS_S_VariableOrProcedureCall = 115,
            RULE_iCS_S_ProcedureOrArrayCall = 116, RULE_iCS_S_MembersCall = 117, RULE_iCS_S_MemberCall = 118,
            RULE_iCS_S_DictionaryCall = 119, RULE_argsCall = 120, RULE_argCall = 121,
            RULE_dictionaryCallStmt = 122, RULE_argList = 123, RULE_arg = 124, RULE_argDefaultValue = 125,
            RULE_subscripts = 126, RULE_subscript = 127, RULE_ambiguousIdentifier = 128,
            RULE_asTypeClause = 129, RULE_baseType = 130, RULE_certainIdentifier = 131,
            RULE_comparisonOperator = 132, RULE_complexType = 133, RULE_fieldLength = 134,
            RULE_letterrange = 135, RULE_lineLabel = 136, RULE_literal = 137, RULE_type = 138,
            RULE_typeHint = 139, RULE_visibility = 140, RULE_ambiguousKeyword = 141;
        public static readonly string[] ruleNames = {
        "startRule", "module", "moduleHeader", "moduleConfig", "moduleConfigElement",
        "moduleAttributes", "moduleDeclarations", "moduleOption", "moduleDeclarationsElement",
        "moduleBody", "moduleBodyElement", "attributeStmt", "block", "blockStmt",
        "appactivateStmt", "beepStmt", "chdirStmt", "chdriveStmt", "closeStmt",
        "constStmt", "constSubStmt", "dateStmt", "declareStmt", "deftypeStmt",
        "deleteSettingStmt", "doLoopStmt", "endStmt", "enumerationStmt", "enumerationStmt_Constant",
        "eraseStmt", "errorStmt", "eventStmt", "exitStmt", "filecopyStmt", "forEachStmt",
        "forNextStmt", "functionStmt", "getStmt", "goSubStmt", "goToStmt", "ifThenElseStmt",
        "ifBlockStmt", "ifConditionStmt", "ifElseIfBlockStmt", "ifElseBlockStmt",
        "implementsStmt", "inputStmt", "killStmt", "letStmt", "lineInputStmt",
        "loadStmt", "lockStmt", "lsetStmt", "macroConstStmt", "macroIfThenElseStmt",
        "macroIfBlockStmt", "macroElseIfBlockStmt", "macroElseBlockStmt", "midStmt",
        "mkdirStmt", "nameStmt", "onErrorStmt", "onGoToStmt", "onGoSubStmt", "openStmt",
        "outputList", "outputList_Expression", "printStmt", "propertyGetStmt",
        "propertySetStmt", "propertyLetStmt", "putStmt", "raiseEventStmt", "randomizeStmt",
        "redimStmt", "redimSubStmt", "resetStmt", "resumeStmt", "returnStmt",
        "rmdirStmt", "rsetStmt", "savepictureStmt", "saveSettingStmt", "seekStmt",
        "selectCaseStmt", "sC_Selection", "sC_Case", "sC_Cond", "sendkeysStmt",
        "setattrStmt", "setStmt", "stopStmt", "subStmt", "timeStmt", "typeStmt",
        "typeStmt_Element", "typeOfStmt", "unloadStmt", "unlockStmt", "valueStmt",
        "variableStmt", "variableListStmt", "variableSubStmt", "whileWendStmt",
        "widthStmt", "withStmt", "writeStmt", "fileNumber", "explicitCallStmt",
        "eCS_ProcedureCall", "eCS_MemberProcedureCall", "implicitCallStmt_InBlock",
        "iCS_B_MemberProcedureCall", "iCS_B_ProcedureCall", "implicitCallStmt_InStmt",
        "iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", "iCS_S_MembersCall",
        "iCS_S_MemberCall", "iCS_S_DictionaryCall", "argsCall", "argCall", "dictionaryCallStmt",
        "argList", "arg", "argDefaultValue", "subscripts", "subscript", "ambiguousIdentifier",
        "asTypeClause", "baseType", "certainIdentifier", "comparisonOperator",
        "complexType", "fieldLength", "letterrange", "lineLabel", "literal", "type",
        "typeHint", "visibility", "ambiguousKeyword"
    };

        public override string GrammarFileName { get { return "VBA.g4"; } }

        public override string[] TokenNames { get { return tokenNames; } }

        public override string[] RuleNames { get { return ruleNames; } }

        public override string SerializedAtn { get { return _serializedATN; } }

        public VBAParser(ITokenStream input)
            : base(input)
        {
            _interp = new ParserATNSimulator(this, _ATN);
        }
        public partial class StartRuleContext : ParserRuleContext
        {
            public ITerminalNode Eof() { return GetToken(VBAParser.Eof, 0); }
            public ModuleContext module()
            {
                return GetRuleContext<ModuleContext>(0);
            }
            public StartRuleContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_startRule; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterStartRule(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitStartRule(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public StartRuleContext startRule()
        {
            StartRuleContext _localctx = new StartRuleContext(_ctx, State);
            EnterRule(_localctx, 0, RULE_startRule);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 284; module();
                    State = 285; Match(Eof);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ModuleHeaderContext moduleHeader()
            {
                return GetRuleContext<ModuleHeaderContext>(0);
            }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public ModuleConfigContext moduleConfig()
            {
                return GetRuleContext<ModuleConfigContext>(0);
            }
            public ModuleAttributesContext moduleAttributes()
            {
                return GetRuleContext<ModuleAttributesContext>(0);
            }
            public ModuleBodyContext moduleBody()
            {
                return GetRuleContext<ModuleBodyContext>(0);
            }
            public ModuleDeclarationsContext moduleDeclarations()
            {
                return GetRuleContext<ModuleDeclarationsContext>(0);
            }
            public ModuleContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_module; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModule(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModule(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModule(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleContext module()
        {
            ModuleContext _localctx = new ModuleContext(_ctx, State);
            EnterRule(_localctx, 2, RULE_module);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 288;
                    switch (Interpreter.AdaptivePredict(_input, 0, _ctx))
                    {
                        case 1:
                            {
                                State = 287; Match(WS);
                            }
                            break;
                    }
                    State = 293;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 1, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 290; Match(NEWLINE);
                                }
                            }
                        }
                        State = 295;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 1, _ctx);
                    }
                    State = 302;
                    _la = _input.La(1);
                    if (_la == VERSION)
                    {
                        {
                            State = 296; moduleHeader();
                            State = 298;
                            _errHandler.Sync(this);
                            _alt = 1;
                            do
                            {
                                switch (_alt)
                                {
                                    case 1:
                                        {
                                            {
                                                State = 297; Match(NEWLINE);
                                            }
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                                State = 300;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 2, _ctx);
                            } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                        }
                    }

                    State = 305;
                    _la = _input.La(1);
                    if (_la == BEGIN)
                    {
                        {
                            State = 304; moduleConfig();
                        }
                    }

                    State = 310;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 5, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 307; Match(NEWLINE);
                                }
                            }
                        }
                        State = 312;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 5, _ctx);
                    }
                    State = 314;
                    _la = _input.La(1);
                    if (_la == ATTRIBUTE)
                    {
                        {
                            State = 313; moduleAttributes();
                        }
                    }

                    State = 319;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 7, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 316; Match(NEWLINE);
                                }
                            }
                        }
                        State = 321;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 7, _ctx);
                    }
                    State = 323;
                    switch (Interpreter.AdaptivePredict(_input, 8, _ctx))
                    {
                        case 1:
                            {
                                State = 322; moduleDeclarations();
                            }
                            break;
                    }
                    State = 328;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 9, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 325; Match(NEWLINE);
                                }
                            }
                        }
                        State = 330;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 9, _ctx);
                    }
                    State = 332;
                    _la = _input.La(1);
                    if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (FUNCTION - 76)) | (1L << (GLOBAL - 76)) | (1L << (MACRO_CONST - 76)) | (1L << (MACRO_IF - 76)) | (1L << (PRIVATE - 76)) | (1L << (PROPERTY_GET - 76)) | (1L << (PROPERTY_LET - 76)) | (1L << (PROPERTY_SET - 76)) | (1L << (PUBLIC - 76)))) != 0) || _la == STATIC || _la == SUB)
                    {
                        {
                            State = 331; moduleBody();
                        }
                    }

                    State = 337;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while (_la == NEWLINE)
                    {
                        {
                            {
                                State = 334; Match(NEWLINE);
                            }
                        }
                        State = 339;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 341;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 340; Match(WS);
                        }
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleHeaderContext : ParserRuleContext
        {
            public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode DOUBLELITERAL() { return GetToken(VBAParser.DOUBLELITERAL, 0); }
            public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
            public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleHeader; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleHeader(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleHeader(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleHeaderContext moduleHeader()
        {
            ModuleHeaderContext _localctx = new ModuleHeaderContext(_ctx, State);
            EnterRule(_localctx, 4, RULE_moduleHeader);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 343; Match(VERSION);
                    State = 344; Match(WS);
                    State = 345; Match(DOUBLELITERAL);
                    State = 346; Match(WS);
                    State = 347; Match(CLASS);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleConfigContext : ParserRuleContext
        {
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public IReadOnlyList<ModuleConfigElementContext> moduleConfigElement()
            {
                return GetRuleContexts<ModuleConfigElementContext>();
            }
            public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
            public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
            public ModuleConfigElementContext moduleConfigElement(int i)
            {
                return GetRuleContext<ModuleConfigElementContext>(i);
            }
            public ModuleConfigContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleConfig; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleConfig(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleConfig(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleConfigContext moduleConfig()
        {
            ModuleConfigContext _localctx = new ModuleConfigContext(_ctx, State);
            EnterRule(_localctx, 6, RULE_moduleConfig);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 349; Match(BEGIN);
                    State = 351;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 350; Match(NEWLINE);
                            }
                        }
                        State = 353;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == NEWLINE);
                    State = 356;
                    _errHandler.Sync(this);
                    _alt = 1;
                    do
                    {
                        switch (_alt)
                        {
                            case 1:
                                {
                                    {
                                        State = 355; moduleConfigElement();
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 358;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 14, _ctx);
                    } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                    State = 360; Match(END);
                    State = 362;
                    _errHandler.Sync(this);
                    _alt = 1;
                    do
                    {
                        switch (_alt)
                        {
                            case 1:
                                {
                                    {
                                        State = 361; Match(NEWLINE);
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 364;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 15, _ctx);
                    } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleConfigElementContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode NEWLINE() { return GetToken(VBAParser.NEWLINE, 0); }
            public LiteralContext literal()
            {
                return GetRuleContext<LiteralContext>(0);
            }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleConfigElement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleConfigElement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleConfigElement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleConfigElementContext moduleConfigElement()
        {
            ModuleConfigElementContext _localctx = new ModuleConfigElementContext(_ctx, State);
            EnterRule(_localctx, 8, RULE_moduleConfigElement);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 366; ambiguousIdentifier();
                    State = 368;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 367; Match(WS);
                        }
                    }

                    State = 370; Match(EQ);
                    State = 372;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 371; Match(WS);
                        }
                    }

                    State = 374; literal();
                    State = 375; Match(NEWLINE);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleAttributesContext : ParserRuleContext
        {
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public AttributeStmtContext attributeStmt(int i)
            {
                return GetRuleContext<AttributeStmtContext>(i);
            }
            public IReadOnlyList<AttributeStmtContext> attributeStmt()
            {
                return GetRuleContexts<AttributeStmtContext>();
            }
            public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleAttributes; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleAttributes(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleAttributes(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleAttributesContext moduleAttributes()
        {
            ModuleAttributesContext _localctx = new ModuleAttributesContext(_ctx, State);
            EnterRule(_localctx, 10, RULE_moduleAttributes);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 383;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 377; attributeStmt();
                                State = 379;
                                _errHandler.Sync(this);
                                _alt = 1;
                                do
                                {
                                    switch (_alt)
                                    {
                                        case 1:
                                            {
                                                {
                                                    State = 378; Match(NEWLINE);
                                                }
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException(this);
                                    }
                                    State = 381;
                                    _errHandler.Sync(this);
                                    _alt = Interpreter.AdaptivePredict(_input, 18, _ctx);
                                } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                            }
                        }
                        State = 385;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == ATTRIBUTE);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleDeclarationsContext : ParserRuleContext
        {
            public ModuleDeclarationsElementContext moduleDeclarationsElement(int i)
            {
                return GetRuleContext<ModuleDeclarationsElementContext>(i);
            }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public IReadOnlyList<ModuleDeclarationsElementContext> moduleDeclarationsElement()
            {
                return GetRuleContexts<ModuleDeclarationsElementContext>();
            }
            public ModuleDeclarationsContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleDeclarations; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleDeclarations(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleDeclarations(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleDeclarations(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleDeclarationsContext moduleDeclarations()
        {
            ModuleDeclarationsContext _localctx = new ModuleDeclarationsContext(_ctx, State);
            EnterRule(_localctx, 12, RULE_moduleDeclarations);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 387; moduleDeclarationsElement();
                    State = 396;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 21, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 389;
                                    _errHandler.Sync(this);
                                    _la = _input.La(1);
                                    do
                                    {
                                        {
                                            {
                                                State = 388; Match(NEWLINE);
                                            }
                                        }
                                        State = 391;
                                        _errHandler.Sync(this);
                                        _la = _input.La(1);
                                    } while (_la == NEWLINE);
                                    State = 393; moduleDeclarationsElement();
                                }
                            }
                        }
                        State = 398;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 21, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleOptionContext : ParserRuleContext
        {
            public ModuleOptionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleOption; } }

            public ModuleOptionContext() { }
            public virtual void CopyFrom(ModuleOptionContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class OptionExplicitStmtContext : ModuleOptionContext
        {
            public ITerminalNode OPTION_EXPLICIT() { return GetToken(VBAParser.OPTION_EXPLICIT, 0); }
            public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class OptionBaseStmtContext : ModuleOptionContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode OPTION_BASE() { return GetToken(VBAParser.OPTION_BASE, 0); }
            public ITerminalNode SHORTLITERAL() { return GetToken(VBAParser.SHORTLITERAL, 0); }
            public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class OptionPrivateModuleStmtContext : ModuleOptionContext
        {
            public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VBAParser.OPTION_PRIVATE_MODULE, 0); }
            public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class OptionCompareStmtContext : ModuleOptionContext
        {
            public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
            public ITerminalNode OPTION_COMPARE() { return GetToken(VBAParser.OPTION_COMPARE, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
            public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
            public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleOptionContext moduleOption()
        {
            ModuleOptionContext _localctx = new ModuleOptionContext(_ctx, State);
            EnterRule(_localctx, 14, RULE_moduleOption);
            int _la;
            try
            {
                State = 411;
                switch (_input.La(1))
                {
                    case OPTION_BASE:
                        _localctx = new OptionBaseStmtContext(_localctx);
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 399; Match(OPTION_BASE);
                            State = 401;
                            _la = _input.La(1);
                            if (_la == WS)
                            {
                                {
                                    State = 400; Match(WS);
                                }
                            }

                            State = 403; Match(SHORTLITERAL);
                        }
                        break;
                    case OPTION_COMPARE:
                        _localctx = new OptionCompareStmtContext(_localctx);
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 404; Match(OPTION_COMPARE);
                            State = 406;
                            _la = _input.La(1);
                            if (_la == WS)
                            {
                                {
                                    State = 405; Match(WS);
                                }
                            }

                            State = 408;
                            _la = _input.La(1);
                            if (!(_la == BINARY || _la == DATABASE || _la == TEXT))
                            {
                                _errHandler.RecoverInline(this);
                            }
                            Consume();
                        }
                        break;
                    case OPTION_EXPLICIT:
                        _localctx = new OptionExplicitStmtContext(_localctx);
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 409; Match(OPTION_EXPLICIT);
                        }
                        break;
                    case OPTION_PRIVATE_MODULE:
                        _localctx = new OptionPrivateModuleStmtContext(_localctx);
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 410; Match(OPTION_PRIVATE_MODULE);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleDeclarationsElementContext : ParserRuleContext
        {
            public MacroConstStmtContext macroConstStmt()
            {
                return GetRuleContext<MacroConstStmtContext>(0);
            }
            public EnumerationStmtContext enumerationStmt()
            {
                return GetRuleContext<EnumerationStmtContext>(0);
            }
            public ConstStmtContext constStmt()
            {
                return GetRuleContext<ConstStmtContext>(0);
            }
            public TypeStmtContext typeStmt()
            {
                return GetRuleContext<TypeStmtContext>(0);
            }
            public EventStmtContext eventStmt()
            {
                return GetRuleContext<EventStmtContext>(0);
            }
            public VariableStmtContext variableStmt()
            {
                return GetRuleContext<VariableStmtContext>(0);
            }
            public ImplementsStmtContext implementsStmt()
            {
                return GetRuleContext<ImplementsStmtContext>(0);
            }
            public MacroIfThenElseStmtContext macroIfThenElseStmt()
            {
                return GetRuleContext<MacroIfThenElseStmtContext>(0);
            }
            public ModuleOptionContext moduleOption()
            {
                return GetRuleContext<ModuleOptionContext>(0);
            }
            public DeclareStmtContext declareStmt()
            {
                return GetRuleContext<DeclareStmtContext>(0);
            }
            public ModuleDeclarationsElementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleDeclarationsElement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleDeclarationsElement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleDeclarationsElement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleDeclarationsElement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleDeclarationsElementContext moduleDeclarationsElement()
        {
            ModuleDeclarationsElementContext _localctx = new ModuleDeclarationsElementContext(_ctx, State);
            EnterRule(_localctx, 16, RULE_moduleDeclarationsElement);
            try
            {
                State = 423;
                switch (Interpreter.AdaptivePredict(_input, 25, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 413; declareStmt();
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 414; enumerationStmt();
                        }
                        break;

                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 415; eventStmt();
                        }
                        break;

                    case 4:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 416; constStmt();
                        }
                        break;

                    case 5:
                        EnterOuterAlt(_localctx, 5);
                        {
                            State = 417; implementsStmt();
                        }
                        break;

                    case 6:
                        EnterOuterAlt(_localctx, 6);
                        {
                            State = 418; variableStmt();
                        }
                        break;

                    case 7:
                        EnterOuterAlt(_localctx, 7);
                        {
                            State = 419; macroConstStmt();
                        }
                        break;

                    case 8:
                        EnterOuterAlt(_localctx, 8);
                        {
                            State = 420; macroIfThenElseStmt();
                        }
                        break;

                    case 9:
                        EnterOuterAlt(_localctx, 9);
                        {
                            State = 421; moduleOption();
                        }
                        break;

                    case 10:
                        EnterOuterAlt(_localctx, 10);
                        {
                            State = 422; typeStmt();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleBodyContext : ParserRuleContext
        {
            public IReadOnlyList<ModuleBodyElementContext> moduleBodyElement()
            {
                return GetRuleContexts<ModuleBodyElementContext>();
            }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public ModuleBodyElementContext moduleBodyElement(int i)
            {
                return GetRuleContext<ModuleBodyElementContext>(i);
            }
            public ModuleBodyContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleBody; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleBody(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleBody(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleBodyContext moduleBody()
        {
            ModuleBodyContext _localctx = new ModuleBodyContext(_ctx, State);
            EnterRule(_localctx, 18, RULE_moduleBody);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 425; moduleBodyElement();
                    State = 434;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 27, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 427;
                                    _errHandler.Sync(this);
                                    _la = _input.La(1);
                                    do
                                    {
                                        {
                                            {
                                                State = 426; Match(NEWLINE);
                                            }
                                        }
                                        State = 429;
                                        _errHandler.Sync(this);
                                        _la = _input.La(1);
                                    } while (_la == NEWLINE);
                                    State = 431; moduleBodyElement();
                                }
                            }
                        }
                        State = 436;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 27, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ModuleBodyElementContext : ParserRuleContext
        {
            public MacroConstStmtContext macroConstStmt()
            {
                return GetRuleContext<MacroConstStmtContext>(0);
            }
            public PropertySetStmtContext propertySetStmt()
            {
                return GetRuleContext<PropertySetStmtContext>(0);
            }
            public PropertyLetStmtContext propertyLetStmt()
            {
                return GetRuleContext<PropertyLetStmtContext>(0);
            }
            public MacroIfThenElseStmtContext macroIfThenElseStmt()
            {
                return GetRuleContext<MacroIfThenElseStmtContext>(0);
            }
            public PropertyGetStmtContext propertyGetStmt()
            {
                return GetRuleContext<PropertyGetStmtContext>(0);
            }
            public SubStmtContext subStmt()
            {
                return GetRuleContext<SubStmtContext>(0);
            }
            public FunctionStmtContext functionStmt()
            {
                return GetRuleContext<FunctionStmtContext>(0);
            }
            public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_moduleBodyElement; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterModuleBodyElement(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitModuleBodyElement(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ModuleBodyElementContext moduleBodyElement()
        {
            ModuleBodyElementContext _localctx = new ModuleBodyElementContext(_ctx, State);
            EnterRule(_localctx, 20, RULE_moduleBodyElement);
            try
            {
                State = 444;
                switch (Interpreter.AdaptivePredict(_input, 28, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 437; functionStmt();
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 438; macroIfThenElseStmt();
                        }
                        break;

                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 439; macroConstStmt();
                        }
                        break;

                    case 4:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 440; propertyGetStmt();
                        }
                        break;

                    case 5:
                        EnterOuterAlt(_localctx, 5);
                        {
                            State = 441; propertySetStmt();
                        }
                        break;

                    case 6:
                        EnterOuterAlt(_localctx, 6);
                        {
                            State = 442; propertyLetStmt();
                        }
                        break;

                    case 7:
                        EnterOuterAlt(_localctx, 7);
                        {
                            State = 443; subStmt();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class AttributeStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public LiteralContext literal(int i)
            {
                return GetRuleContext<LiteralContext>(i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<LiteralContext> literal()
            {
                return GetRuleContexts<LiteralContext>();
            }
            public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public AttributeStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_attributeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterAttributeStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitAttributeStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public AttributeStmtContext attributeStmt()
        {
            AttributeStmtContext _localctx = new AttributeStmtContext(_ctx, State);
            EnterRule(_localctx, 22, RULE_attributeStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 446; Match(ATTRIBUTE);
                    State = 447; Match(WS);
                    State = 448; implicitCallStmt_InStmt();
                    State = 450;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 449; Match(WS);
                        }
                    }

                    State = 452; Match(EQ);
                    State = 454;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 453; Match(WS);
                        }
                    }

                    State = 456; literal();
                    State = 467;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 33, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 458;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 457; Match(WS);
                                        }
                                    }

                                    State = 460; Match(T__1);
                                    State = 462;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 461; Match(WS);
                                        }
                                    }

                                    State = 464; literal();
                                }
                            }
                        }
                        State = 469;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 33, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class BlockContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<BlockStmtContext> blockStmt()
            {
                return GetRuleContexts<BlockStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public BlockStmtContext blockStmt(int i)
            {
                return GetRuleContext<BlockStmtContext>(i);
            }
            public BlockContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_block; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterBlock(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitBlock(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBlock(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public BlockContext block()
        {
            BlockContext _localctx = new BlockContext(_ctx, State);
            EnterRule(_localctx, 24, RULE_block);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 470; blockStmt();
                    State = 474;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 34, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 471; Match(WS);
                                }
                            }
                        }
                        State = 476;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 34, _ctx);
                    }
                    State = 489;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 37, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 480;
                                    _errHandler.Sync(this);
                                    _la = _input.La(1);
                                    while (_la == NEWLINE)
                                    {
                                        {
                                            {
                                                State = 477; Match(NEWLINE);
                                            }
                                        }
                                        State = 482;
                                        _errHandler.Sync(this);
                                        _la = _input.La(1);
                                    }
                                    State = 484;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 483; Match(WS);
                                        }
                                    }

                                    State = 486; blockStmt();
                                }
                            }
                        }
                        State = 491;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 37, _ctx);
                    }
                    State = 493;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 492; Match(WS);
                        }
                    }

                    State = 498;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 39, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 495; Match(NEWLINE);
                                }
                            }
                        }
                        State = 500;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 39, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class BlockStmtContext : ParserRuleContext
        {
            public GoToStmtContext goToStmt()
            {
                return GetRuleContext<GoToStmtContext>(0);
            }
            public LoadStmtContext loadStmt()
            {
                return GetRuleContext<LoadStmtContext>(0);
            }
            public ChdriveStmtContext chdriveStmt()
            {
                return GetRuleContext<ChdriveStmtContext>(0);
            }
            public EndStmtContext endStmt()
            {
                return GetRuleContext<EndStmtContext>(0);
            }
            public LetStmtContext letStmt()
            {
                return GetRuleContext<LetStmtContext>(0);
            }
            public FilecopyStmtContext filecopyStmt()
            {
                return GetRuleContext<FilecopyStmtContext>(0);
            }
            public RmdirStmtContext rmdirStmt()
            {
                return GetRuleContext<RmdirStmtContext>(0);
            }
            public RsetStmtContext rsetStmt()
            {
                return GetRuleContext<RsetStmtContext>(0);
            }
            public EraseStmtContext eraseStmt()
            {
                return GetRuleContext<EraseStmtContext>(0);
            }
            public ChdirStmtContext chdirStmt()
            {
                return GetRuleContext<ChdirStmtContext>(0);
            }
            public WriteStmtContext writeStmt()
            {
                return GetRuleContext<WriteStmtContext>(0);
            }
            public ExplicitCallStmtContext explicitCallStmt()
            {
                return GetRuleContext<ExplicitCallStmtContext>(0);
            }
            public MacroIfThenElseStmtContext macroIfThenElseStmt()
            {
                return GetRuleContext<MacroIfThenElseStmtContext>(0);
            }
            public RandomizeStmtContext randomizeStmt()
            {
                return GetRuleContext<RandomizeStmtContext>(0);
            }
            public ConstStmtContext constStmt()
            {
                return GetRuleContext<ConstStmtContext>(0);
            }
            public SelectCaseStmtContext selectCaseStmt()
            {
                return GetRuleContext<SelectCaseStmtContext>(0);
            }
            public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock()
            {
                return GetRuleContext<ImplicitCallStmt_InBlockContext>(0);
            }
            public MkdirStmtContext mkdirStmt()
            {
                return GetRuleContext<MkdirStmtContext>(0);
            }
            public RaiseEventStmtContext raiseEventStmt()
            {
                return GetRuleContext<RaiseEventStmtContext>(0);
            }
            public SavepictureStmtContext savepictureStmt()
            {
                return GetRuleContext<SavepictureStmtContext>(0);
            }
            public ExitStmtContext exitStmt()
            {
                return GetRuleContext<ExitStmtContext>(0);
            }
            public IfThenElseStmtContext ifThenElseStmt()
            {
                return GetRuleContext<IfThenElseStmtContext>(0);
            }
            public OpenStmtContext openStmt()
            {
                return GetRuleContext<OpenStmtContext>(0);
            }
            public SetattrStmtContext setattrStmt()
            {
                return GetRuleContext<SetattrStmtContext>(0);
            }
            public SaveSettingStmtContext saveSettingStmt()
            {
                return GetRuleContext<SaveSettingStmtContext>(0);
            }
            public AttributeStmtContext attributeStmt()
            {
                return GetRuleContext<AttributeStmtContext>(0);
            }
            public ForEachStmtContext forEachStmt()
            {
                return GetRuleContext<ForEachStmtContext>(0);
            }
            public ForNextStmtContext forNextStmt()
            {
                return GetRuleContext<ForNextStmtContext>(0);
            }
            public RedimStmtContext redimStmt()
            {
                return GetRuleContext<RedimStmtContext>(0);
            }
            public TimeStmtContext timeStmt()
            {
                return GetRuleContext<TimeStmtContext>(0);
            }
            public OnGoSubStmtContext onGoSubStmt()
            {
                return GetRuleContext<OnGoSubStmtContext>(0);
            }
            public SendkeysStmtContext sendkeysStmt()
            {
                return GetRuleContext<SendkeysStmtContext>(0);
            }
            public DeleteSettingStmtContext deleteSettingStmt()
            {
                return GetRuleContext<DeleteSettingStmtContext>(0);
            }
            public ErrorStmtContext errorStmt()
            {
                return GetRuleContext<ErrorStmtContext>(0);
            }
            public SetStmtContext setStmt()
            {
                return GetRuleContext<SetStmtContext>(0);
            }
            public WithStmtContext withStmt()
            {
                return GetRuleContext<WithStmtContext>(0);
            }
            public OnErrorStmtContext onErrorStmt()
            {
                return GetRuleContext<OnErrorStmtContext>(0);
            }
            public WhileWendStmtContext whileWendStmt()
            {
                return GetRuleContext<WhileWendStmtContext>(0);
            }
            public UnlockStmtContext unlockStmt()
            {
                return GetRuleContext<UnlockStmtContext>(0);
            }
            public StopStmtContext stopStmt()
            {
                return GetRuleContext<StopStmtContext>(0);
            }
            public NameStmtContext nameStmt()
            {
                return GetRuleContext<NameStmtContext>(0);
            }
            public LineInputStmtContext lineInputStmt()
            {
                return GetRuleContext<LineInputStmtContext>(0);
            }
            public DateStmtContext dateStmt()
            {
                return GetRuleContext<DateStmtContext>(0);
            }
            public InputStmtContext inputStmt()
            {
                return GetRuleContext<InputStmtContext>(0);
            }
            public ResetStmtContext resetStmt()
            {
                return GetRuleContext<ResetStmtContext>(0);
            }
            public ImplementsStmtContext implementsStmt()
            {
                return GetRuleContext<ImplementsStmtContext>(0);
            }
            public CloseStmtContext closeStmt()
            {
                return GetRuleContext<CloseStmtContext>(0);
            }
            public GoSubStmtContext goSubStmt()
            {
                return GetRuleContext<GoSubStmtContext>(0);
            }
            public KillStmtContext killStmt()
            {
                return GetRuleContext<KillStmtContext>(0);
            }
            public DeftypeStmtContext deftypeStmt()
            {
                return GetRuleContext<DeftypeStmtContext>(0);
            }
            public ReturnStmtContext returnStmt()
            {
                return GetRuleContext<ReturnStmtContext>(0);
            }
            public LockStmtContext lockStmt()
            {
                return GetRuleContext<LockStmtContext>(0);
            }
            public DoLoopStmtContext doLoopStmt()
            {
                return GetRuleContext<DoLoopStmtContext>(0);
            }
            public LineLabelContext lineLabel()
            {
                return GetRuleContext<LineLabelContext>(0);
            }
            public BeepStmtContext beepStmt()
            {
                return GetRuleContext<BeepStmtContext>(0);
            }
            public AppactivateStmtContext appactivateStmt()
            {
                return GetRuleContext<AppactivateStmtContext>(0);
            }
            public LsetStmtContext lsetStmt()
            {
                return GetRuleContext<LsetStmtContext>(0);
            }
            public MidStmtContext midStmt()
            {
                return GetRuleContext<MidStmtContext>(0);
            }
            public GetStmtContext getStmt()
            {
                return GetRuleContext<GetStmtContext>(0);
            }
            public OnGoToStmtContext onGoToStmt()
            {
                return GetRuleContext<OnGoToStmtContext>(0);
            }
            public WidthStmtContext widthStmt()
            {
                return GetRuleContext<WidthStmtContext>(0);
            }
            public PrintStmtContext printStmt()
            {
                return GetRuleContext<PrintStmtContext>(0);
            }
            public SeekStmtContext seekStmt()
            {
                return GetRuleContext<SeekStmtContext>(0);
            }
            public ResumeStmtContext resumeStmt()
            {
                return GetRuleContext<ResumeStmtContext>(0);
            }
            public VariableStmtContext variableStmt()
            {
                return GetRuleContext<VariableStmtContext>(0);
            }
            public PutStmtContext putStmt()
            {
                return GetRuleContext<PutStmtContext>(0);
            }
            public UnloadStmtContext unloadStmt()
            {
                return GetRuleContext<UnloadStmtContext>(0);
            }
            public BlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_blockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterBlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitBlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public BlockStmtContext blockStmt()
        {
            BlockStmtContext _localctx = new BlockStmtContext(_ctx, State);
            EnterRule(_localctx, 26, RULE_blockStmt);
            try
            {
                State = 568;
                switch (Interpreter.AdaptivePredict(_input, 40, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 501; lineLabel();
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 502; appactivateStmt();
                        }
                        break;

                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 503; attributeStmt();
                        }
                        break;

                    case 4:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 504; beepStmt();
                        }
                        break;

                    case 5:
                        EnterOuterAlt(_localctx, 5);
                        {
                            State = 505; chdirStmt();
                        }
                        break;

                    case 6:
                        EnterOuterAlt(_localctx, 6);
                        {
                            State = 506; chdriveStmt();
                        }
                        break;

                    case 7:
                        EnterOuterAlt(_localctx, 7);
                        {
                            State = 507; closeStmt();
                        }
                        break;

                    case 8:
                        EnterOuterAlt(_localctx, 8);
                        {
                            State = 508; constStmt();
                        }
                        break;

                    case 9:
                        EnterOuterAlt(_localctx, 9);
                        {
                            State = 509; dateStmt();
                        }
                        break;

                    case 10:
                        EnterOuterAlt(_localctx, 10);
                        {
                            State = 510; deleteSettingStmt();
                        }
                        break;

                    case 11:
                        EnterOuterAlt(_localctx, 11);
                        {
                            State = 511; deftypeStmt();
                        }
                        break;

                    case 12:
                        EnterOuterAlt(_localctx, 12);
                        {
                            State = 512; doLoopStmt();
                        }
                        break;

                    case 13:
                        EnterOuterAlt(_localctx, 13);
                        {
                            State = 513; endStmt();
                        }
                        break;

                    case 14:
                        EnterOuterAlt(_localctx, 14);
                        {
                            State = 514; eraseStmt();
                        }
                        break;

                    case 15:
                        EnterOuterAlt(_localctx, 15);
                        {
                            State = 515; errorStmt();
                        }
                        break;

                    case 16:
                        EnterOuterAlt(_localctx, 16);
                        {
                            State = 516; exitStmt();
                        }
                        break;

                    case 17:
                        EnterOuterAlt(_localctx, 17);
                        {
                            State = 517; explicitCallStmt();
                        }
                        break;

                    case 18:
                        EnterOuterAlt(_localctx, 18);
                        {
                            State = 518; filecopyStmt();
                        }
                        break;

                    case 19:
                        EnterOuterAlt(_localctx, 19);
                        {
                            State = 519; forEachStmt();
                        }
                        break;

                    case 20:
                        EnterOuterAlt(_localctx, 20);
                        {
                            State = 520; forNextStmt();
                        }
                        break;

                    case 21:
                        EnterOuterAlt(_localctx, 21);
                        {
                            State = 521; getStmt();
                        }
                        break;

                    case 22:
                        EnterOuterAlt(_localctx, 22);
                        {
                            State = 522; goSubStmt();
                        }
                        break;

                    case 23:
                        EnterOuterAlt(_localctx, 23);
                        {
                            State = 523; goToStmt();
                        }
                        break;

                    case 24:
                        EnterOuterAlt(_localctx, 24);
                        {
                            State = 524; ifThenElseStmt();
                        }
                        break;

                    case 25:
                        EnterOuterAlt(_localctx, 25);
                        {
                            State = 525; implementsStmt();
                        }
                        break;

                    case 26:
                        EnterOuterAlt(_localctx, 26);
                        {
                            State = 526; inputStmt();
                        }
                        break;

                    case 27:
                        EnterOuterAlt(_localctx, 27);
                        {
                            State = 527; killStmt();
                        }
                        break;

                    case 28:
                        EnterOuterAlt(_localctx, 28);
                        {
                            State = 528; letStmt();
                        }
                        break;

                    case 29:
                        EnterOuterAlt(_localctx, 29);
                        {
                            State = 529; lineInputStmt();
                        }
                        break;

                    case 30:
                        EnterOuterAlt(_localctx, 30);
                        {
                            State = 530; loadStmt();
                        }
                        break;

                    case 31:
                        EnterOuterAlt(_localctx, 31);
                        {
                            State = 531; lockStmt();
                        }
                        break;

                    case 32:
                        EnterOuterAlt(_localctx, 32);
                        {
                            State = 532; lsetStmt();
                        }
                        break;

                    case 33:
                        EnterOuterAlt(_localctx, 33);
                        {
                            State = 533; macroIfThenElseStmt();
                        }
                        break;

                    case 34:
                        EnterOuterAlt(_localctx, 34);
                        {
                            State = 534; midStmt();
                        }
                        break;

                    case 35:
                        EnterOuterAlt(_localctx, 35);
                        {
                            State = 535; mkdirStmt();
                        }
                        break;

                    case 36:
                        EnterOuterAlt(_localctx, 36);
                        {
                            State = 536; nameStmt();
                        }
                        break;

                    case 37:
                        EnterOuterAlt(_localctx, 37);
                        {
                            State = 537; onErrorStmt();
                        }
                        break;

                    case 38:
                        EnterOuterAlt(_localctx, 38);
                        {
                            State = 538; onGoToStmt();
                        }
                        break;

                    case 39:
                        EnterOuterAlt(_localctx, 39);
                        {
                            State = 539; onGoSubStmt();
                        }
                        break;

                    case 40:
                        EnterOuterAlt(_localctx, 40);
                        {
                            State = 540; openStmt();
                        }
                        break;

                    case 41:
                        EnterOuterAlt(_localctx, 41);
                        {
                            State = 541; printStmt();
                        }
                        break;

                    case 42:
                        EnterOuterAlt(_localctx, 42);
                        {
                            State = 542; putStmt();
                        }
                        break;

                    case 43:
                        EnterOuterAlt(_localctx, 43);
                        {
                            State = 543; raiseEventStmt();
                        }
                        break;

                    case 44:
                        EnterOuterAlt(_localctx, 44);
                        {
                            State = 544; randomizeStmt();
                        }
                        break;

                    case 45:
                        EnterOuterAlt(_localctx, 45);
                        {
                            State = 545; redimStmt();
                        }
                        break;

                    case 46:
                        EnterOuterAlt(_localctx, 46);
                        {
                            State = 546; resetStmt();
                        }
                        break;

                    case 47:
                        EnterOuterAlt(_localctx, 47);
                        {
                            State = 547; resumeStmt();
                        }
                        break;

                    case 48:
                        EnterOuterAlt(_localctx, 48);
                        {
                            State = 548; returnStmt();
                        }
                        break;

                    case 49:
                        EnterOuterAlt(_localctx, 49);
                        {
                            State = 549; rmdirStmt();
                        }
                        break;

                    case 50:
                        EnterOuterAlt(_localctx, 50);
                        {
                            State = 550; rsetStmt();
                        }
                        break;

                    case 51:
                        EnterOuterAlt(_localctx, 51);
                        {
                            State = 551; savepictureStmt();
                        }
                        break;

                    case 52:
                        EnterOuterAlt(_localctx, 52);
                        {
                            State = 552; saveSettingStmt();
                        }
                        break;

                    case 53:
                        EnterOuterAlt(_localctx, 53);
                        {
                            State = 553; seekStmt();
                        }
                        break;

                    case 54:
                        EnterOuterAlt(_localctx, 54);
                        {
                            State = 554; selectCaseStmt();
                        }
                        break;

                    case 55:
                        EnterOuterAlt(_localctx, 55);
                        {
                            State = 555; sendkeysStmt();
                        }
                        break;

                    case 56:
                        EnterOuterAlt(_localctx, 56);
                        {
                            State = 556; setattrStmt();
                        }
                        break;

                    case 57:
                        EnterOuterAlt(_localctx, 57);
                        {
                            State = 557; setStmt();
                        }
                        break;

                    case 58:
                        EnterOuterAlt(_localctx, 58);
                        {
                            State = 558; stopStmt();
                        }
                        break;

                    case 59:
                        EnterOuterAlt(_localctx, 59);
                        {
                            State = 559; timeStmt();
                        }
                        break;

                    case 60:
                        EnterOuterAlt(_localctx, 60);
                        {
                            State = 560; unloadStmt();
                        }
                        break;

                    case 61:
                        EnterOuterAlt(_localctx, 61);
                        {
                            State = 561; unlockStmt();
                        }
                        break;

                    case 62:
                        EnterOuterAlt(_localctx, 62);
                        {
                            State = 562; variableStmt();
                        }
                        break;

                    case 63:
                        EnterOuterAlt(_localctx, 63);
                        {
                            State = 563; whileWendStmt();
                        }
                        break;

                    case 64:
                        EnterOuterAlt(_localctx, 64);
                        {
                            State = 564; widthStmt();
                        }
                        break;

                    case 65:
                        EnterOuterAlt(_localctx, 65);
                        {
                            State = 565; withStmt();
                        }
                        break;

                    case 66:
                        EnterOuterAlt(_localctx, 66);
                        {
                            State = 566; writeStmt();
                        }
                        break;

                    case 67:
                        EnterOuterAlt(_localctx, 67);
                        {
                            State = 567; implicitCallStmt_InBlock();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class AppactivateStmtContext : ParserRuleContext
        {
            public ITerminalNode APPACTIVATE() { return GetToken(VBAParser.APPACTIVATE, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public AppactivateStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_appactivateStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterAppactivateStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitAppactivateStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAppactivateStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public AppactivateStmtContext appactivateStmt()
        {
            AppactivateStmtContext _localctx = new AppactivateStmtContext(_ctx, State);
            EnterRule(_localctx, 28, RULE_appactivateStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 570; Match(APPACTIVATE);
                    State = 571; Match(WS);
                    State = 572; valueStmt(0);
                    State = 581;
                    switch (Interpreter.AdaptivePredict(_input, 43, _ctx))
                    {
                        case 1:
                            {
                                State = 574;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 573; Match(WS);
                                    }
                                }

                                State = 576; Match(T__1);
                                State = 578;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 577; Match(WS);
                                    }
                                }

                                State = 580; valueStmt(0);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class BeepStmtContext : ParserRuleContext
        {
            public ITerminalNode BEEP() { return GetToken(VBAParser.BEEP, 0); }
            public BeepStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_beepStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterBeepStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitBeepStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBeepStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public BeepStmtContext beepStmt()
        {
            BeepStmtContext _localctx = new BeepStmtContext(_ctx, State);
            EnterRule(_localctx, 30, RULE_beepStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 583; Match(BEEP);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ChdirStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode CHDIR() { return GetToken(VBAParser.CHDIR, 0); }
            public ChdirStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_chdirStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterChdirStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitChdirStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitChdirStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ChdirStmtContext chdirStmt()
        {
            ChdirStmtContext _localctx = new ChdirStmtContext(_ctx, State);
            EnterRule(_localctx, 32, RULE_chdirStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 585; Match(CHDIR);
                    State = 586; Match(WS);
                    State = 587; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ChdriveStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode CHDRIVE() { return GetToken(VBAParser.CHDRIVE, 0); }
            public ChdriveStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_chdriveStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterChdriveStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitChdriveStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitChdriveStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ChdriveStmtContext chdriveStmt()
        {
            ChdriveStmtContext _localctx = new ChdriveStmtContext(_ctx, State);
            EnterRule(_localctx, 34, RULE_chdriveStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 589; Match(CHDRIVE);
                    State = 590; Match(WS);
                    State = 591; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CloseStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
            public IReadOnlyList<FileNumberContext> fileNumber()
            {
                return GetRuleContexts<FileNumberContext>();
            }
            public FileNumberContext fileNumber(int i)
            {
                return GetRuleContext<FileNumberContext>(i);
            }
            public CloseStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_closeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterCloseStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitCloseStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CloseStmtContext closeStmt()
        {
            CloseStmtContext _localctx = new CloseStmtContext(_ctx, State);
            EnterRule(_localctx, 36, RULE_closeStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 593; Match(CLOSE);
                    State = 609;
                    switch (Interpreter.AdaptivePredict(_input, 47, _ctx))
                    {
                        case 1:
                            {
                                State = 594; Match(WS);
                                State = 595; fileNumber();
                                State = 606;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 46, _ctx);
                                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                                {
                                    if (_alt == 1)
                                    {
                                        {
                                            {
                                                State = 597;
                                                _la = _input.La(1);
                                                if (_la == WS)
                                                {
                                                    {
                                                        State = 596; Match(WS);
                                                    }
                                                }

                                                State = 599; Match(T__1);
                                                State = 601;
                                                _la = _input.La(1);
                                                if (_la == WS)
                                                {
                                                    {
                                                        State = 600; Match(WS);
                                                    }
                                                }

                                                State = 603; fileNumber();
                                            }
                                        }
                                    }
                                    State = 608;
                                    _errHandler.Sync(this);
                                    _alt = Interpreter.AdaptivePredict(_input, 46, _ctx);
                                }
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ConstStmtContext : ParserRuleContext
        {
            public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ConstSubStmtContext> constSubStmt()
            {
                return GetRuleContexts<ConstSubStmtContext>();
            }
            public ConstSubStmtContext constSubStmt(int i)
            {
                return GetRuleContext<ConstSubStmtContext>(i);
            }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public ConstStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_constStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterConstStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitConstStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ConstStmtContext constStmt()
        {
            ConstStmtContext _localctx = new ConstStmtContext(_ctx, State);
            EnterRule(_localctx, 38, RULE_constStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 614;
                    _la = _input.La(1);
                    if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0))
                    {
                        {
                            State = 611; visibility();
                            State = 612; Match(WS);
                        }
                    }

                    State = 616; Match(CONST);
                    State = 617; Match(WS);
                    State = 618; constSubStmt();
                    State = 629;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 51, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 620;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 619; Match(WS);
                                        }
                                    }

                                    State = 622; Match(T__1);
                                    State = 624;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 623; Match(WS);
                                        }
                                    }

                                    State = 626; constSubStmt();
                                }
                            }
                        }
                        State = 631;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 51, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ConstSubStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_constSubStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterConstSubStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitConstSubStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ConstSubStmtContext constSubStmt()
        {
            ConstSubStmtContext _localctx = new ConstSubStmtContext(_ctx, State);
            EnterRule(_localctx, 40, RULE_constSubStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 632; ambiguousIdentifier();
                    State = 634;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4))) != 0) || _la == AMPERSAND)
                    {
                        {
                            State = 633; typeHint();
                        }
                    }

                    State = 638;
                    switch (Interpreter.AdaptivePredict(_input, 53, _ctx))
                    {
                        case 1:
                            {
                                State = 636; Match(WS);
                                State = 637; asTypeClause();
                            }
                            break;
                    }
                    State = 641;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 640; Match(WS);
                        }
                    }

                    State = 643; Match(EQ);
                    State = 645;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 644; Match(WS);
                        }
                    }

                    State = 647; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DateStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
            public DateStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_dateStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterDateStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitDateStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDateStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public DateStmtContext dateStmt()
        {
            DateStmtContext _localctx = new DateStmtContext(_ctx, State);
            EnterRule(_localctx, 42, RULE_dateStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 649; Match(DATE);
                    State = 651;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 650; Match(WS);
                        }
                    }

                    State = 653; Match(EQ);
                    State = 655;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 654; Match(WS);
                        }
                    }

                    State = 657; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DeclareStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode STRINGLITERAL(int i)
            {
                return GetToken(VBAParser.STRINGLITERAL, i);
            }
            public ITerminalNode PTRSAFE() { return GetToken(VBAParser.PTRSAFE, 0); }
            public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
            public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public TypeHintContext typeHint(int i)
            {
                return GetRuleContext<TypeHintContext>(i);
            }
            public ArgListContext argList()
            {
                return GetRuleContext<ArgListContext>(0);
            }
            public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
            public IReadOnlyList<ITerminalNode> STRINGLITERAL() { return GetTokens(VBAParser.STRINGLITERAL); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<TypeHintContext> typeHint()
            {
                return GetRuleContexts<TypeHintContext>();
            }
            public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
            public DeclareStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_declareStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterDeclareStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitDeclareStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public DeclareStmtContext declareStmt()
        {
            DeclareStmtContext _localctx = new DeclareStmtContext(_ctx, State);
            EnterRule(_localctx, 44, RULE_declareStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 662;
                    _la = _input.La(1);
                    if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0))
                    {
                        {
                            State = 659; visibility();
                            State = 660; Match(WS);
                        }
                    }

                    State = 664; Match(DECLARE);
                    State = 665; Match(WS);
                    State = 668;
                    _la = _input.La(1);
                    if (_la == PTRSAFE)
                    {
                        {
                            State = 666; Match(PTRSAFE);
                            State = 667; Match(WS);
                        }
                    }

                    State = 675;
                    switch (_input.La(1))
                    {
                        case FUNCTION:
                            {
                                {
                                    State = 670; Match(FUNCTION);
                                    State = 672;
                                    _la = _input.La(1);
                                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4))) != 0) || _la == AMPERSAND)
                                    {
                                        {
                                            State = 671; typeHint();
                                        }
                                    }

                                }
                            }
                            break;
                        case SUB:
                            {
                                State = 674; Match(SUB);
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    State = 677; Match(WS);
                    State = 678; ambiguousIdentifier();
                    State = 680;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4))) != 0) || _la == AMPERSAND)
                    {
                        {
                            State = 679; typeHint();
                        }
                    }

                    State = 682; Match(WS);
                    State = 683; Match(LIB);
                    State = 684; Match(WS);
                    State = 685; Match(STRINGLITERAL);
                    State = 690;
                    switch (Interpreter.AdaptivePredict(_input, 63, _ctx))
                    {
                        case 1:
                            {
                                State = 686; Match(WS);
                                State = 687; Match(ALIAS);
                                State = 688; Match(WS);
                                State = 689; Match(STRINGLITERAL);
                            }
                            break;
                    }
                    State = 696;
                    switch (Interpreter.AdaptivePredict(_input, 65, _ctx))
                    {
                        case 1:
                            {
                                State = 693;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 692; Match(WS);
                                    }
                                }

                                State = 695; argList();
                            }
                            break;
                    }
                    State = 700;
                    switch (Interpreter.AdaptivePredict(_input, 66, _ctx))
                    {
                        case 1:
                            {
                                State = 698; Match(WS);
                                State = 699; asTypeClause();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DeftypeStmtContext : ParserRuleContext
        {
            public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
            public ITerminalNode DEFDEC() { return GetToken(VBAParser.DEFDEC, 0); }
            public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
            public IReadOnlyList<LetterrangeContext> letterrange()
            {
                return GetRuleContexts<LetterrangeContext>();
            }
            public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
            public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
            public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
            public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
            public LetterrangeContext letterrange(int i)
            {
                return GetRuleContext<LetterrangeContext>(i);
            }
            public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
            public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
            public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
            public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
            public DeftypeStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_deftypeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterDeftypeStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitDeftypeStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDeftypeStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public DeftypeStmtContext deftypeStmt()
        {
            DeftypeStmtContext _localctx = new DeftypeStmtContext(_ctx, State);
            EnterRule(_localctx, 46, RULE_deftypeStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 702;
                    _la = _input.La(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                    State = 703; Match(WS);
                    State = 704; letterrange();
                    State = 715;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 69, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 706;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 705; Match(WS);
                                        }
                                    }

                                    State = 708; Match(T__1);
                                    State = 710;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 709; Match(WS);
                                        }
                                    }

                                    State = 712; letterrange();
                                }
                            }
                        }
                        State = 717;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 69, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DeleteSettingStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public DeleteSettingStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_deleteSettingStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterDeleteSettingStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitDeleteSettingStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDeleteSettingStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public DeleteSettingStmtContext deleteSettingStmt()
        {
            DeleteSettingStmtContext _localctx = new DeleteSettingStmtContext(_ctx, State);
            EnterRule(_localctx, 48, RULE_deleteSettingStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 718; Match(DELETESETTING);
                    State = 719; Match(WS);
                    State = 720; valueStmt(0);
                    State = 722;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 721; Match(WS);
                        }
                    }

                    State = 724; Match(T__1);
                    State = 726;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 725; Match(WS);
                        }
                    }

                    State = 728; valueStmt(0);
                    State = 737;
                    switch (Interpreter.AdaptivePredict(_input, 74, _ctx))
                    {
                        case 1:
                            {
                                State = 730;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 729; Match(WS);
                                    }
                                }

                                State = 732; Match(T__1);
                                State = 734;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 733; Match(WS);
                                    }
                                }

                                State = 736; valueStmt(0);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DoLoopStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
            public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
            public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_doLoopStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterDoLoopStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitDoLoopStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public DoLoopStmtContext doLoopStmt()
        {
            DoLoopStmtContext _localctx = new DoLoopStmtContext(_ctx, State);
            EnterRule(_localctx, 50, RULE_doLoopStmt);
            int _la;
            try
            {
                State = 792;
                switch (Interpreter.AdaptivePredict(_input, 83, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 739; Match(DO);
                            State = 741;
                            _errHandler.Sync(this);
                            _la = _input.La(1);
                            do
                            {
                                {
                                    {
                                        State = 740; Match(NEWLINE);
                                    }
                                }
                                State = 743;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                            } while (_la == NEWLINE);
                            State = 751;
                            switch (Interpreter.AdaptivePredict(_input, 77, _ctx))
                            {
                                case 1:
                                    {
                                        State = 745; block();
                                        State = 747;
                                        _errHandler.Sync(this);
                                        _la = _input.La(1);
                                        do
                                        {
                                            {
                                                {
                                                    State = 746; Match(NEWLINE);
                                                }
                                            }
                                            State = 749;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                        } while (_la == NEWLINE);
                                    }
                                    break;
                            }
                            State = 753; Match(LOOP);
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 754; Match(DO);
                            State = 755; Match(WS);
                            State = 756;
                            _la = _input.La(1);
                            if (!(_la == UNTIL || _la == WHILE))
                            {
                                _errHandler.RecoverInline(this);
                            }
                            Consume();
                            State = 757; Match(WS);
                            State = 758; valueStmt(0);
                            State = 760;
                            _errHandler.Sync(this);
                            _la = _input.La(1);
                            do
                            {
                                {
                                    {
                                        State = 759; Match(NEWLINE);
                                    }
                                }
                                State = 762;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                            } while (_la == NEWLINE);
                            State = 770;
                            switch (Interpreter.AdaptivePredict(_input, 80, _ctx))
                            {
                                case 1:
                                    {
                                        State = 764; block();
                                        State = 766;
                                        _errHandler.Sync(this);
                                        _la = _input.La(1);
                                        do
                                        {
                                            {
                                                {
                                                    State = 765; Match(NEWLINE);
                                                }
                                            }
                                            State = 768;
                                            _errHandler.Sync(this);
                                            _la = _input.La(1);
                                        } while (_la == NEWLINE);
                                    }
                                    break;
                            }
                            State = 772; Match(LOOP);
                        }
                        break;

                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 774; Match(DO);
                            State = 776;
                            _errHandler.Sync(this);
                            _la = _input.La(1);
                            do
                            {
                                {
                                    {
                                        State = 775; Match(NEWLINE);
                                    }
                                }
                                State = 778;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                            } while (_la == NEWLINE);
                            {
                                State = 780; block();
                                State = 782;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                                do
                                {
                                    {
                                        {
                                            State = 781; Match(NEWLINE);
                                        }
                                    }
                                    State = 784;
                                    _errHandler.Sync(this);
                                    _la = _input.La(1);
                                } while (_la == NEWLINE);
                            }
                            State = 786; Match(LOOP);
                            State = 787; Match(WS);
                            State = 788;
                            _la = _input.La(1);
                            if (!(_la == UNTIL || _la == WHILE))
                            {
                                _errHandler.RecoverInline(this);
                            }
                            Consume();
                            State = 789; Match(WS);
                            State = 790; valueStmt(0);
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EndStmtContext : ParserRuleContext
        {
            public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
            public EndStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_endStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterEndStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitEndStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEndStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EndStmtContext endStmt()
        {
            EndStmtContext _localctx = new EndStmtContext(_ctx, State);
            EnterRule(_localctx, 52, RULE_endStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 794; Match(END);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EnumerationStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<EnumerationStmt_ConstantContext> enumerationStmt_Constant()
            {
                return GetRuleContexts<EnumerationStmt_ConstantContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i)
            {
                return GetRuleContext<EnumerationStmt_ConstantContext>(i);
            }
            public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public ITerminalNode END_ENUM() { return GetToken(VBAParser.END_ENUM, 0); }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_enumerationStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterEnumerationStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitEnumerationStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EnumerationStmtContext enumerationStmt()
        {
            EnumerationStmtContext _localctx = new EnumerationStmtContext(_ctx, State);
            EnterRule(_localctx, 54, RULE_enumerationStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 799;
                    _la = _input.La(1);
                    if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0))
                    {
                        {
                            State = 796; visibility();
                            State = 797; Match(WS);
                        }
                    }

                    State = 801; Match(ENUM);
                    State = 802; Match(WS);
                    State = 803; ambiguousIdentifier();
                    State = 805;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 804; Match(NEWLINE);
                            }
                        }
                        State = 807;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == NEWLINE);
                    State = 812;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            {
                                State = 809; enumerationStmt_Constant();
                            }
                        }
                        State = 814;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 815; Match(END_ENUM);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EnumerationStmt_ConstantContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EnumerationStmt_ConstantContext enumerationStmt_Constant()
        {
            EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(_ctx, State);
            EnterRule(_localctx, 56, RULE_enumerationStmt_Constant);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 817; ambiguousIdentifier();
                    State = 826;
                    _la = _input.La(1);
                    if (_la == EQ || _la == WS)
                    {
                        {
                            State = 819;
                            _la = _input.La(1);
                            if (_la == WS)
                            {
                                {
                                    State = 818; Match(WS);
                                }
                            }

                            State = 821; Match(EQ);
                            State = 823;
                            _la = _input.La(1);
                            if (_la == WS)
                            {
                                {
                                    State = 822; Match(WS);
                                }
                            }

                            State = 825; valueStmt(0);
                        }
                    }

                    State = 829;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 828; Match(NEWLINE);
                            }
                        }
                        State = 831;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == NEWLINE);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EraseStmtContext : ParserRuleContext
        {
            public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public EraseStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_eraseStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterEraseStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitEraseStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EraseStmtContext eraseStmt()
        {
            EraseStmtContext _localctx = new EraseStmtContext(_ctx, State);
            EnterRule(_localctx, 58, RULE_eraseStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 833; Match(ERASE);
                    State = 834; Match(WS);
                    State = 835; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ErrorStmtContext : ParserRuleContext
        {
            public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ErrorStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_errorStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterErrorStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitErrorStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ErrorStmtContext errorStmt()
        {
            ErrorStmtContext _localctx = new ErrorStmtContext(_ctx, State);
            EnterRule(_localctx, 60, RULE_errorStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 837; Match(ERROR);
                    State = 838; Match(WS);
                    State = 839; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class EventStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgListContext argList()
            {
                return GetRuleContext<ArgListContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
            public EventStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_eventStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterEventStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitEventStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public EventStmtContext eventStmt()
        {
            EventStmtContext _localctx = new EventStmtContext(_ctx, State);
            EnterRule(_localctx, 62, RULE_eventStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 844;
                    _la = _input.La(1);
                    if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0))
                    {
                        {
                            State = 841; visibility();
                            State = 842; Match(WS);
                        }
                    }

                    State = 846; Match(EVENT);
                    State = 847; Match(WS);
                    State = 848; ambiguousIdentifier();
                    State = 850;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 849; Match(WS);
                        }
                    }

                    State = 852; argList();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ExitStmtContext : ParserRuleContext
        {
            public ITerminalNode EXIT_SUB() { return GetToken(VBAParser.EXIT_SUB, 0); }
            public ITerminalNode EXIT_PROPERTY() { return GetToken(VBAParser.EXIT_PROPERTY, 0); }
            public ITerminalNode EXIT_FUNCTION() { return GetToken(VBAParser.EXIT_FUNCTION, 0); }
            public ITerminalNode EXIT_DO() { return GetToken(VBAParser.EXIT_DO, 0); }
            public ITerminalNode EXIT_FOR() { return GetToken(VBAParser.EXIT_FOR, 0); }
            public ExitStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_exitStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterExitStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitExitStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ExitStmtContext exitStmt()
        {
            ExitStmtContext _localctx = new ExitStmtContext(_ctx, State);
            EnterRule(_localctx, 64, RULE_exitStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 854;
                    _la = _input.La(1);
                    if (!(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (EXIT_DO - 69)) | (1L << (EXIT_FOR - 69)) | (1L << (EXIT_FUNCTION - 69)) | (1L << (EXIT_PROPERTY - 69)) | (1L << (EXIT_SUB - 69)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class FilecopyStmtContext : ParserRuleContext
        {
            public ITerminalNode FILECOPY() { return GetToken(VBAParser.FILECOPY, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public FilecopyStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_filecopyStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterFilecopyStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitFilecopyStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFilecopyStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public FilecopyStmtContext filecopyStmt()
        {
            FilecopyStmtContext _localctx = new FilecopyStmtContext(_ctx, State);
            EnterRule(_localctx, 66, RULE_filecopyStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 856; Match(FILECOPY);
                    State = 857; Match(WS);
                    State = 858; valueStmt(0);
                    State = 860;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 859; Match(WS);
                        }
                    }

                    State = 862; Match(T__1);
                    State = 864;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 863; Match(WS);
                        }
                    }

                    State = 866; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ForEachStmtContext : ParserRuleContext
        {
            public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier()
            {
                return GetRuleContexts<AmbiguousIdentifierContext>();
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public AmbiguousIdentifierContext ambiguousIdentifier(int i)
            {
                return GetRuleContext<AmbiguousIdentifierContext>(i);
            }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
            public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
            public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
            public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public ForEachStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_forEachStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterForEachStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitForEachStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ForEachStmtContext forEachStmt()
        {
            ForEachStmtContext _localctx = new ForEachStmtContext(_ctx, State);
            EnterRule(_localctx, 68, RULE_forEachStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 868; Match(FOR);
                    State = 869; Match(WS);
                    State = 870; Match(EACH);
                    State = 871; Match(WS);
                    State = 872; ambiguousIdentifier();
                    State = 874;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4))) != 0) || _la == AMPERSAND)
                    {
                        {
                            State = 873; typeHint();
                        }
                    }

                    State = 876; Match(WS);
                    State = 877; Match(IN);
                    State = 878; Match(WS);
                    State = 879; valueStmt(0);
                    State = 881;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 880; Match(NEWLINE);
                            }
                        }
                        State = 883;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == NEWLINE);
                    State = 891;
                    switch (Interpreter.AdaptivePredict(_input, 98, _ctx))
                    {
                        case 1:
                            {
                                State = 885; block();
                                State = 887;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                                do
                                {
                                    {
                                        {
                                            State = 886; Match(NEWLINE);
                                        }
                                    }
                                    State = 889;
                                    _errHandler.Sync(this);
                                    _la = _input.La(1);
                                } while (_la == NEWLINE);
                            }
                            break;
                    }
                    State = 893; Match(NEXT);
                    State = 896;
                    switch (Interpreter.AdaptivePredict(_input, 99, _ctx))
                    {
                        case 1:
                            {
                                State = 894; Match(WS);
                                State = 895; ambiguousIdentifier();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ForNextStmtContext : ParserRuleContext
        {
            public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier()
            {
                return GetRuleContexts<AmbiguousIdentifierContext>();
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public AmbiguousIdentifierContext ambiguousIdentifier(int i)
            {
                return GetRuleContext<AmbiguousIdentifierContext>(i);
            }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
            public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
            public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public ForNextStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_forNextStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterForNextStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitForNextStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ForNextStmtContext forNextStmt()
        {
            ForNextStmtContext _localctx = new ForNextStmtContext(_ctx, State);
            EnterRule(_localctx, 70, RULE_forNextStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 898; Match(FOR);
                    State = 899; Match(WS);
                    State = 900; ambiguousIdentifier();
                    State = 902;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4))) != 0) || _la == AMPERSAND)
                    {
                        {
                            State = 901; typeHint();
                        }
                    }

                    State = 906;
                    switch (Interpreter.AdaptivePredict(_input, 101, _ctx))
                    {
                        case 1:
                            {
                                State = 904; Match(WS);
                                State = 905; asTypeClause();
                            }
                            break;
                    }
                    State = 909;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 908; Match(WS);
                        }
                    }

                    State = 911; Match(EQ);
                    State = 913;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 912; Match(WS);
                        }
                    }

                    State = 915; valueStmt(0);
                    State = 916; Match(WS);
                    State = 917; Match(TO);
                    State = 918; Match(WS);
                    State = 919; valueStmt(0);
                    State = 924;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 920; Match(WS);
                            State = 921; Match(STEP);
                            State = 922; Match(WS);
                            State = 923; valueStmt(0);
                        }
                    }

                    State = 927;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 926; Match(NEWLINE);
                            }
                        }
                        State = 929;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == NEWLINE);
                    State = 937;
                    switch (Interpreter.AdaptivePredict(_input, 107, _ctx))
                    {
                        case 1:
                            {
                                State = 931; block();
                                State = 933;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                                do
                                {
                                    {
                                        {
                                            State = 932; Match(NEWLINE);
                                        }
                                    }
                                    State = 935;
                                    _errHandler.Sync(this);
                                    _la = _input.La(1);
                                } while (_la == NEWLINE);
                            }
                            break;
                    }
                    State = 939; Match(NEXT);
                    State = 942;
                    switch (Interpreter.AdaptivePredict(_input, 108, _ctx))
                    {
                        case 1:
                            {
                                State = 940; Match(WS);
                                State = 941; ambiguousIdentifier();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class FunctionStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode END_FUNCTION() { return GetToken(VBAParser.END_FUNCTION, 0); }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public ArgListContext argList()
            {
                return GetRuleContext<ArgListContext>(0);
            }
            public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public FunctionStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_functionStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterFunctionStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitFunctionStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public FunctionStmtContext functionStmt()
        {
            FunctionStmtContext _localctx = new FunctionStmtContext(_ctx, State);
            EnterRule(_localctx, 72, RULE_functionStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 947;
                    _la = _input.La(1);
                    if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0))
                    {
                        {
                            State = 944; visibility();
                            State = 945; Match(WS);
                        }
                    }

                    State = 951;
                    _la = _input.La(1);
                    if (_la == STATIC)
                    {
                        {
                            State = 949; Match(STATIC);
                            State = 950; Match(WS);
                        }
                    }

                    State = 953; Match(FUNCTION);
                    State = 955;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 954; Match(WS);
                        }
                    }

                    State = 957; ambiguousIdentifier();
                    State = 959;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4))) != 0) || _la == AMPERSAND)
                    {
                        {
                            State = 958; typeHint();
                        }
                    }

                    State = 965;
                    switch (Interpreter.AdaptivePredict(_input, 114, _ctx))
                    {
                        case 1:
                            {
                                State = 962;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 961; Match(WS);
                                    }
                                }

                                State = 964; argList();
                            }
                            break;
                    }
                    State = 971;
                    _la = _input.La(1);
                    if (_la == AS || _la == WS)
                    {
                        {
                            State = 968;
                            _la = _input.La(1);
                            if (_la == WS)
                            {
                                {
                                    State = 967; Match(WS);
                                }
                            }

                            State = 970; asTypeClause();
                        }
                    }

                    State = 974;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 973; Match(NEWLINE);
                            }
                        }
                        State = 976;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == NEWLINE);
                    State = 984;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            State = 978; block();
                            State = 980;
                            _errHandler.Sync(this);
                            _la = _input.La(1);
                            do
                            {
                                {
                                    {
                                        State = 979; Match(NEWLINE);
                                    }
                                }
                                State = 982;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                            } while (_la == NEWLINE);
                        }
                    }

                    State = 986; Match(END_FUNCTION);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class GetStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public GetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_getStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterGetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitGetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public GetStmtContext getStmt()
        {
            GetStmtContext _localctx = new GetStmtContext(_ctx, State);
            EnterRule(_localctx, 74, RULE_getStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 988; Match(GET);
                    State = 989; Match(WS);
                    State = 990; fileNumber();
                    State = 992;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 991; Match(WS);
                        }
                    }

                    State = 994; Match(T__1);
                    State = 996;
                    switch (Interpreter.AdaptivePredict(_input, 121, _ctx))
                    {
                        case 1:
                            {
                                State = 995; Match(WS);
                            }
                            break;
                    }
                    State = 999;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (LPAREN - 194)) | (1L << (MINUS - 194)) | (1L << (PLUS - 194)) | (1L << (STRINGLITERAL - 194)) | (1L << (OCTLITERAL - 194)) | (1L << (HEXLITERAL - 194)) | (1L << (SHORTLITERAL - 194)) | (1L << (INTEGERLITERAL - 194)) | (1L << (DOUBLELITERAL - 194)) | (1L << (DATELITERAL - 194)) | (1L << (IDENTIFIER - 194)))) != 0))
                    {
                        {
                            State = 998; valueStmt(0);
                        }
                    }

                    State = 1002;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1001; Match(WS);
                        }
                    }

                    State = 1004; Match(T__1);
                    State = 1006;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1005; Match(WS);
                        }
                    }

                    State = 1008; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class GoSubStmtContext : ParserRuleContext
        {
            public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public GoSubStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_goSubStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterGoSubStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitGoSubStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public GoSubStmtContext goSubStmt()
        {
            GoSubStmtContext _localctx = new GoSubStmtContext(_ctx, State);
            EnterRule(_localctx, 76, RULE_goSubStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1010; Match(GOSUB);
                    State = 1011; Match(WS);
                    State = 1012; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class GoToStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
            public GoToStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_goToStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterGoToStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitGoToStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public GoToStmtContext goToStmt()
        {
            GoToStmtContext _localctx = new GoToStmtContext(_ctx, State);
            EnterRule(_localctx, 78, RULE_goToStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1014; Match(GOTO);
                    State = 1015; Match(WS);
                    State = 1016; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IfThenElseStmtContext : ParserRuleContext
        {
            public IfThenElseStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ifThenElseStmt; } }

            public IfThenElseStmtContext() { }
            public virtual void CopyFrom(IfThenElseStmtContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class BlockIfThenElseContext : IfThenElseStmtContext
        {
            public IfElseIfBlockStmtContext ifElseIfBlockStmt(int i)
            {
                return GetRuleContext<IfElseIfBlockStmtContext>(i);
            }
            public ITerminalNode END_IF() { return GetToken(VBAParser.END_IF, 0); }
            public IReadOnlyList<IfElseIfBlockStmtContext> ifElseIfBlockStmt()
            {
                return GetRuleContexts<IfElseIfBlockStmtContext>();
            }
            public IfBlockStmtContext ifBlockStmt()
            {
                return GetRuleContext<IfBlockStmtContext>(0);
            }
            public IfElseBlockStmtContext ifElseBlockStmt()
            {
                return GetRuleContext<IfElseBlockStmtContext>(0);
            }
            public BlockIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterBlockIfThenElse(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitBlockIfThenElse(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBlockIfThenElse(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class InlineIfThenElseContext : IfThenElseStmtContext
        {
            public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
            public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<BlockStmtContext> blockStmt()
            {
                return GetRuleContexts<BlockStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
            public IfConditionStmtContext ifConditionStmt()
            {
                return GetRuleContext<IfConditionStmtContext>(0);
            }
            public BlockStmtContext blockStmt(int i)
            {
                return GetRuleContext<BlockStmtContext>(i);
            }
            public InlineIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterInlineIfThenElse(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitInlineIfThenElse(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitInlineIfThenElse(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public IfThenElseStmtContext ifThenElseStmt()
        {
            IfThenElseStmtContext _localctx = new IfThenElseStmtContext(_ctx, State);
            EnterRule(_localctx, 80, RULE_ifThenElseStmt);
            int _la;
            try
            {
                State = 1043;
                switch (Interpreter.AdaptivePredict(_input, 128, _ctx))
                {
                    case 1:
                        _localctx = new InlineIfThenElseContext(_localctx);
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 1018; Match(IF);
                            State = 1019; Match(WS);
                            State = 1020; ifConditionStmt();
                            State = 1021; Match(WS);
                            State = 1022; Match(THEN);
                            State = 1023; Match(WS);
                            State = 1024; blockStmt();
                            State = 1029;
                            switch (Interpreter.AdaptivePredict(_input, 125, _ctx))
                            {
                                case 1:
                                    {
                                        State = 1025; Match(WS);
                                        State = 1026; Match(ELSE);
                                        State = 1027; Match(WS);
                                        State = 1028; blockStmt();
                                    }
                                    break;
                            }
                        }
                        break;

                    case 2:
                        _localctx = new BlockIfThenElseContext(_localctx);
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 1031; ifBlockStmt();
                            State = 1035;
                            _errHandler.Sync(this);
                            _la = _input.La(1);
                            while (_la == ELSEIF)
                            {
                                {
                                    {
                                        State = 1032; ifElseIfBlockStmt();
                                    }
                                }
                                State = 1037;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                            }
                            State = 1039;
                            _la = _input.La(1);
                            if (_la == ELSE)
                            {
                                {
                                    State = 1038; ifElseBlockStmt();
                                }
                            }

                            State = 1041; Match(END_IF);
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IfBlockStmtContext : ParserRuleContext
        {
            public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public IfConditionStmtContext ifConditionStmt()
            {
                return GetRuleContext<IfConditionStmtContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public IfBlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ifBlockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterIfBlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitIfBlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitIfBlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public IfBlockStmtContext ifBlockStmt()
        {
            IfBlockStmtContext _localctx = new IfBlockStmtContext(_ctx, State);
            EnterRule(_localctx, 82, RULE_ifBlockStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1045; Match(IF);
                    State = 1046; Match(WS);
                    State = 1047; ifConditionStmt();
                    State = 1048; Match(WS);
                    State = 1049; Match(THEN);
                    State = 1051;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 1050; Match(NEWLINE);
                            }
                        }
                        State = 1053;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == NEWLINE);
                    State = 1061;
                    switch (Interpreter.AdaptivePredict(_input, 131, _ctx))
                    {
                        case 1:
                            {
                                State = 1055; block();
                                State = 1057;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                                do
                                {
                                    {
                                        {
                                            State = 1056; Match(NEWLINE);
                                        }
                                    }
                                    State = 1059;
                                    _errHandler.Sync(this);
                                    _la = _input.La(1);
                                } while (_la == NEWLINE);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IfConditionStmtContext : ParserRuleContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IfConditionStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ifConditionStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterIfConditionStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitIfConditionStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitIfConditionStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public IfConditionStmtContext ifConditionStmt()
        {
            IfConditionStmtContext _localctx = new IfConditionStmtContext(_ctx, State);
            EnterRule(_localctx, 84, RULE_ifConditionStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1063; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IfElseIfBlockStmtContext : ParserRuleContext
        {
            public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public IfConditionStmtContext ifConditionStmt()
            {
                return GetRuleContext<IfConditionStmtContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public IfElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ifElseIfBlockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterIfElseIfBlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitIfElseIfBlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitIfElseIfBlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public IfElseIfBlockStmtContext ifElseIfBlockStmt()
        {
            IfElseIfBlockStmtContext _localctx = new IfElseIfBlockStmtContext(_ctx, State);
            EnterRule(_localctx, 86, RULE_ifElseIfBlockStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1065; Match(ELSEIF);
                    State = 1066; Match(WS);
                    State = 1067; ifConditionStmt();
                    State = 1068; Match(WS);
                    State = 1069; Match(THEN);
                    State = 1071;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 1070; Match(NEWLINE);
                            }
                        }
                        State = 1073;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == NEWLINE);
                    State = 1081;
                    switch (Interpreter.AdaptivePredict(_input, 134, _ctx))
                    {
                        case 1:
                            {
                                State = 1075; block();
                                State = 1077;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                                do
                                {
                                    {
                                        {
                                            State = 1076; Match(NEWLINE);
                                        }
                                    }
                                    State = 1079;
                                    _errHandler.Sync(this);
                                    _la = _input.La(1);
                                } while (_la == NEWLINE);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class IfElseBlockStmtContext : ParserRuleContext
        {
            public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public IfElseBlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ifElseBlockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterIfElseBlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitIfElseBlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitIfElseBlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public IfElseBlockStmtContext ifElseBlockStmt()
        {
            IfElseBlockStmtContext _localctx = new IfElseBlockStmtContext(_ctx, State);
            EnterRule(_localctx, 88, RULE_ifElseBlockStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1083; Match(ELSE);
                    State = 1085;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 1084; Match(NEWLINE);
                            }
                        }
                        State = 1087;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == NEWLINE);
                    State = 1095;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            State = 1089; block();
                            State = 1091;
                            _errHandler.Sync(this);
                            _la = _input.La(1);
                            do
                            {
                                {
                                    {
                                        State = 1090; Match(NEWLINE);
                                    }
                                }
                                State = 1093;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                            } while (_la == NEWLINE);
                        }
                    }

                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ImplementsStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
            public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_implementsStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterImplementsStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitImplementsStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ImplementsStmtContext implementsStmt()
        {
            ImplementsStmtContext _localctx = new ImplementsStmtContext(_ctx, State);
            EnterRule(_localctx, 90, RULE_implementsStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1097; Match(IMPLEMENTS);
                    State = 1098; Match(WS);
                    State = 1099; ambiguousIdentifier();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class InputStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public InputStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_inputStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterInputStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitInputStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public InputStmtContext inputStmt()
        {
            InputStmtContext _localctx = new InputStmtContext(_ctx, State);
            EnterRule(_localctx, 92, RULE_inputStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1101; Match(INPUT);
                    State = 1102; Match(WS);
                    State = 1103; fileNumber();
                    State = 1112;
                    _errHandler.Sync(this);
                    _alt = 1;
                    do
                    {
                        switch (_alt)
                        {
                            case 1:
                                {
                                    {
                                        State = 1105;
                                        _la = _input.La(1);
                                        if (_la == WS)
                                        {
                                            {
                                                State = 1104; Match(WS);
                                            }
                                        }

                                        State = 1107; Match(T__1);
                                        State = 1109;
                                        _la = _input.La(1);
                                        if (_la == WS)
                                        {
                                            {
                                                State = 1108; Match(WS);
                                            }
                                        }

                                        State = 1111; valueStmt(0);
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 1114;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 140, _ctx);
                    } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class KillStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode KILL() { return GetToken(VBAParser.KILL, 0); }
            public KillStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_killStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterKillStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitKillStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitKillStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public KillStmtContext killStmt()
        {
            KillStmtContext _localctx = new KillStmtContext(_ctx, State);
            EnterRule(_localctx, 94, RULE_killStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1116; Match(KILL);
                    State = 1117; Match(WS);
                    State = 1118; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LetStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode PLUS_EQ() { return GetToken(VBAParser.PLUS_EQ, 0); }
            public ITerminalNode MINUS_EQ() { return GetToken(VBAParser.MINUS_EQ, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
            public LetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_letStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LetStmtContext letStmt()
        {
            LetStmtContext _localctx = new LetStmtContext(_ctx, State);
            EnterRule(_localctx, 96, RULE_letStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1122;
                    switch (Interpreter.AdaptivePredict(_input, 141, _ctx))
                    {
                        case 1:
                            {
                                State = 1120; Match(LET);
                                State = 1121; Match(WS);
                            }
                            break;
                    }
                    State = 1124; implicitCallStmt_InStmt();
                    State = 1126;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1125; Match(WS);
                        }
                    }

                    State = 1128;
                    _la = _input.La(1);
                    if (!(((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (EQ - 190)) | (1L << (MINUS_EQ - 190)) | (1L << (PLUS_EQ - 190)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                    State = 1130;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1129; Match(WS);
                        }
                    }

                    State = 1132; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LineInputStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public ITerminalNode LINE_INPUT() { return GetToken(VBAParser.LINE_INPUT, 0); }
            public LineInputStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lineInputStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLineInputStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLineInputStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LineInputStmtContext lineInputStmt()
        {
            LineInputStmtContext _localctx = new LineInputStmtContext(_ctx, State);
            EnterRule(_localctx, 98, RULE_lineInputStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1134; Match(LINE_INPUT);
                    State = 1135; Match(WS);
                    State = 1136; fileNumber();
                    State = 1138;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1137; Match(WS);
                        }
                    }

                    State = 1140; Match(T__1);
                    State = 1142;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1141; Match(WS);
                        }
                    }

                    State = 1144; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LoadStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
            public LoadStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_loadStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLoadStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLoadStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLoadStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LoadStmtContext loadStmt()
        {
            LoadStmtContext _localctx = new LoadStmtContext(_ctx, State);
            EnterRule(_localctx, 100, RULE_loadStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1146; Match(LOAD);
                    State = 1147; Match(WS);
                    State = 1148; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LockStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
            public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public LockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LockStmtContext lockStmt()
        {
            LockStmtContext _localctx = new LockStmtContext(_ctx, State);
            EnterRule(_localctx, 102, RULE_lockStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1150; Match(LOCK);
                    State = 1151; Match(WS);
                    State = 1152; valueStmt(0);
                    State = 1167;
                    switch (Interpreter.AdaptivePredict(_input, 149, _ctx))
                    {
                        case 1:
                            {
                                State = 1154;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1153; Match(WS);
                                    }
                                }

                                State = 1156; Match(T__1);
                                State = 1158;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1157; Match(WS);
                                    }
                                }

                                State = 1160; valueStmt(0);
                                State = 1165;
                                switch (Interpreter.AdaptivePredict(_input, 148, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1161; Match(WS);
                                            State = 1162; Match(TO);
                                            State = 1163; Match(WS);
                                            State = 1164; valueStmt(0);
                                        }
                                        break;
                                }
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LsetStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public LsetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lsetStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLsetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLsetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LsetStmtContext lsetStmt()
        {
            LsetStmtContext _localctx = new LsetStmtContext(_ctx, State);
            EnterRule(_localctx, 104, RULE_lsetStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1169; Match(LSET);
                    State = 1170; Match(WS);
                    State = 1171; implicitCallStmt_InStmt();
                    State = 1173;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1172; Match(WS);
                        }
                    }

                    State = 1175; Match(EQ);
                    State = 1177;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1176; Match(WS);
                        }
                    }

                    State = 1179; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MacroConstStmtContext : ParserRuleContext
        {
            public ITerminalNode MACRO_CONST() { return GetToken(VBAParser.MACRO_CONST, 0); }
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public MacroConstStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_macroConstStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMacroConstStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMacroConstStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMacroConstStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MacroConstStmtContext macroConstStmt()
        {
            MacroConstStmtContext _localctx = new MacroConstStmtContext(_ctx, State);
            EnterRule(_localctx, 106, RULE_macroConstStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1181; Match(MACRO_CONST);
                    State = 1183;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1182; Match(WS);
                        }
                    }

                    State = 1185; ambiguousIdentifier();
                    State = 1187;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1186; Match(WS);
                        }
                    }

                    State = 1189; Match(EQ);
                    State = 1191;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1190; Match(WS);
                        }
                    }

                    State = 1193; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MacroIfThenElseStmtContext : ParserRuleContext
        {
            public IReadOnlyList<MacroElseIfBlockStmtContext> macroElseIfBlockStmt()
            {
                return GetRuleContexts<MacroElseIfBlockStmtContext>();
            }
            public ITerminalNode MACRO_END_IF() { return GetToken(VBAParser.MACRO_END_IF, 0); }
            public MacroIfBlockStmtContext macroIfBlockStmt()
            {
                return GetRuleContext<MacroIfBlockStmtContext>(0);
            }
            public MacroElseIfBlockStmtContext macroElseIfBlockStmt(int i)
            {
                return GetRuleContext<MacroElseIfBlockStmtContext>(i);
            }
            public MacroElseBlockStmtContext macroElseBlockStmt()
            {
                return GetRuleContext<MacroElseBlockStmtContext>(0);
            }
            public MacroIfThenElseStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_macroIfThenElseStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMacroIfThenElseStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMacroIfThenElseStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMacroIfThenElseStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MacroIfThenElseStmtContext macroIfThenElseStmt()
        {
            MacroIfThenElseStmtContext _localctx = new MacroIfThenElseStmtContext(_ctx, State);
            EnterRule(_localctx, 108, RULE_macroIfThenElseStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1195; macroIfBlockStmt();
                    State = 1199;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while (_la == MACRO_ELSEIF)
                    {
                        {
                            {
                                State = 1196; macroElseIfBlockStmt();
                            }
                        }
                        State = 1201;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 1203;
                    _la = _input.La(1);
                    if (_la == MACRO_ELSE)
                    {
                        {
                            State = 1202; macroElseBlockStmt();
                        }
                    }

                    State = 1205; Match(MACRO_END_IF);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MacroIfBlockStmtContext : ParserRuleContext
        {
            public ModuleBodyContext moduleBody(int i)
            {
                return GetRuleContext<ModuleBodyContext>(i);
            }
            public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ModuleDeclarationsElementContext moduleDeclarationsElement(int i)
            {
                return GetRuleContext<ModuleDeclarationsElementContext>(i);
            }
            public ITerminalNode MACRO_IF() { return GetToken(VBAParser.MACRO_IF, 0); }
            public IfConditionStmtContext ifConditionStmt()
            {
                return GetRuleContext<IfConditionStmtContext>(0);
            }
            public IReadOnlyList<ModuleBodyContext> moduleBody()
            {
                return GetRuleContexts<ModuleBodyContext>();
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public BlockContext block(int i)
            {
                return GetRuleContext<BlockContext>(i);
            }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public IReadOnlyList<ModuleDeclarationsElementContext> moduleDeclarationsElement()
            {
                return GetRuleContexts<ModuleDeclarationsElementContext>();
            }
            public IReadOnlyList<BlockContext> block()
            {
                return GetRuleContexts<BlockContext>();
            }
            public MacroIfBlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_macroIfBlockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMacroIfBlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMacroIfBlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMacroIfBlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MacroIfBlockStmtContext macroIfBlockStmt()
        {
            MacroIfBlockStmtContext _localctx = new MacroIfBlockStmtContext(_ctx, State);
            EnterRule(_localctx, 110, RULE_macroIfBlockStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1207; Match(MACRO_IF);
                    State = 1209;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1208; Match(WS);
                        }
                    }

                    State = 1211; ifConditionStmt();
                    State = 1212; Match(WS);
                    State = 1213; Match(THEN);
                    State = 1217;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while (_la == NEWLINE)
                    {
                        {
                            {
                                State = 1214; Match(NEWLINE);
                            }
                        }
                        State = 1219;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 1233;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            {
                                State = 1223;
                                switch (Interpreter.AdaptivePredict(_input, 159, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1220; moduleDeclarationsElement();
                                        }
                                        break;

                                    case 2:
                                        {
                                            State = 1221; moduleBody();
                                        }
                                        break;

                                    case 3:
                                        {
                                            State = 1222; block();
                                        }
                                        break;
                                }
                                State = 1228;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                                while (_la == NEWLINE)
                                {
                                    {
                                        {
                                            State = 1225; Match(NEWLINE);
                                        }
                                    }
                                    State = 1230;
                                    _errHandler.Sync(this);
                                    _la = _input.La(1);
                                }
                            }
                        }
                        State = 1235;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MacroElseIfBlockStmtContext : ParserRuleContext
        {
            public ModuleBodyContext moduleBody(int i)
            {
                return GetRuleContext<ModuleBodyContext>(i);
            }
            public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ModuleDeclarationsElementContext moduleDeclarationsElement(int i)
            {
                return GetRuleContext<ModuleDeclarationsElementContext>(i);
            }
            public IfConditionStmtContext ifConditionStmt()
            {
                return GetRuleContext<IfConditionStmtContext>(0);
            }
            public IReadOnlyList<ModuleBodyContext> moduleBody()
            {
                return GetRuleContexts<ModuleBodyContext>();
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode MACRO_ELSEIF() { return GetToken(VBAParser.MACRO_ELSEIF, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public BlockContext block(int i)
            {
                return GetRuleContext<BlockContext>(i);
            }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public IReadOnlyList<ModuleDeclarationsElementContext> moduleDeclarationsElement()
            {
                return GetRuleContexts<ModuleDeclarationsElementContext>();
            }
            public IReadOnlyList<BlockContext> block()
            {
                return GetRuleContexts<BlockContext>();
            }
            public MacroElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_macroElseIfBlockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMacroElseIfBlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMacroElseIfBlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMacroElseIfBlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MacroElseIfBlockStmtContext macroElseIfBlockStmt()
        {
            MacroElseIfBlockStmtContext _localctx = new MacroElseIfBlockStmtContext(_ctx, State);
            EnterRule(_localctx, 112, RULE_macroElseIfBlockStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1236; Match(MACRO_ELSEIF);
                    State = 1238;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1237; Match(WS);
                        }
                    }

                    State = 1240; ifConditionStmt();
                    State = 1241; Match(WS);
                    State = 1242; Match(THEN);
                    State = 1246;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while (_la == NEWLINE)
                    {
                        {
                            {
                                State = 1243; Match(NEWLINE);
                            }
                        }
                        State = 1248;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 1262;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            {
                                State = 1252;
                                switch (Interpreter.AdaptivePredict(_input, 164, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1249; moduleDeclarationsElement();
                                        }
                                        break;

                                    case 2:
                                        {
                                            State = 1250; moduleBody();
                                        }
                                        break;

                                    case 3:
                                        {
                                            State = 1251; block();
                                        }
                                        break;
                                }
                                State = 1257;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                                while (_la == NEWLINE)
                                {
                                    {
                                        {
                                            State = 1254; Match(NEWLINE);
                                        }
                                    }
                                    State = 1259;
                                    _errHandler.Sync(this);
                                    _la = _input.La(1);
                                }
                            }
                        }
                        State = 1264;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MacroElseBlockStmtContext : ParserRuleContext
        {
            public ModuleBodyContext moduleBody(int i)
            {
                return GetRuleContext<ModuleBodyContext>(i);
            }
            public BlockContext block(int i)
            {
                return GetRuleContext<BlockContext>(i);
            }
            public ITerminalNode MACRO_ELSE() { return GetToken(VBAParser.MACRO_ELSE, 0); }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public ModuleDeclarationsElementContext moduleDeclarationsElement(int i)
            {
                return GetRuleContext<ModuleDeclarationsElementContext>(i);
            }
            public IReadOnlyList<ModuleBodyContext> moduleBody()
            {
                return GetRuleContexts<ModuleBodyContext>();
            }
            public IReadOnlyList<ModuleDeclarationsElementContext> moduleDeclarationsElement()
            {
                return GetRuleContexts<ModuleDeclarationsElementContext>();
            }
            public IReadOnlyList<BlockContext> block()
            {
                return GetRuleContexts<BlockContext>();
            }
            public MacroElseBlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_macroElseBlockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMacroElseBlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMacroElseBlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMacroElseBlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MacroElseBlockStmtContext macroElseBlockStmt()
        {
            MacroElseBlockStmtContext _localctx = new MacroElseBlockStmtContext(_ctx, State);
            EnterRule(_localctx, 114, RULE_macroElseBlockStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1265; Match(MACRO_ELSE);
                    State = 1269;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while (_la == NEWLINE)
                    {
                        {
                            {
                                State = 1266; Match(NEWLINE);
                            }
                        }
                        State = 1271;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 1285;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_CONST - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OPTION_BASE - 64)) | (1L << (OPTION_EXPLICIT - 64)) | (1L << (OPTION_COMPARE - 64)) | (1L << (OPTION_PRIVATE_MODULE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PROPERTY_GET - 128)) | (1L << (PROPERTY_LET - 128)) | (1L << (PROPERTY_SET - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            {
                                State = 1275;
                                switch (Interpreter.AdaptivePredict(_input, 168, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1272; moduleDeclarationsElement();
                                        }
                                        break;

                                    case 2:
                                        {
                                            State = 1273; moduleBody();
                                        }
                                        break;

                                    case 3:
                                        {
                                            State = 1274; block();
                                        }
                                        break;
                                }
                                State = 1280;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                                while (_la == NEWLINE)
                                {
                                    {
                                        {
                                            State = 1277; Match(NEWLINE);
                                        }
                                    }
                                    State = 1282;
                                    _errHandler.Sync(this);
                                    _la = _input.La(1);
                                }
                            }
                        }
                        State = 1287;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MidStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
            public MidStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_midStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMidStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMidStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMidStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MidStmtContext midStmt()
        {
            MidStmtContext _localctx = new MidStmtContext(_ctx, State);
            EnterRule(_localctx, 116, RULE_midStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1288; Match(MID);
                    State = 1290;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1289; Match(WS);
                        }
                    }

                    State = 1292; Match(LPAREN);
                    State = 1294;
                    switch (Interpreter.AdaptivePredict(_input, 172, _ctx))
                    {
                        case 1:
                            {
                                State = 1293; Match(WS);
                            }
                            break;
                    }
                    State = 1296; argsCall();
                    State = 1298;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1297; Match(WS);
                        }
                    }

                    State = 1300; Match(RPAREN);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class MkdirStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode MKDIR() { return GetToken(VBAParser.MKDIR, 0); }
            public MkdirStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_mkdirStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterMkdirStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitMkdirStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitMkdirStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public MkdirStmtContext mkdirStmt()
        {
            MkdirStmtContext _localctx = new MkdirStmtContext(_ctx, State);
            EnterRule(_localctx, 118, RULE_mkdirStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1302; Match(MKDIR);
                    State = 1303; Match(WS);
                    State = 1304; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class NameStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
            public NameStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_nameStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterNameStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitNameStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitNameStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public NameStmtContext nameStmt()
        {
            NameStmtContext _localctx = new NameStmtContext(_ctx, State);
            EnterRule(_localctx, 120, RULE_nameStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1306; Match(NAME);
                    State = 1307; Match(WS);
                    State = 1308; valueStmt(0);
                    State = 1309; Match(WS);
                    State = 1310; Match(AS);
                    State = 1311; Match(WS);
                    State = 1312; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OnErrorStmtContext : ParserRuleContext
        {
            public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode ON_ERROR() { return GetToken(VBAParser.ON_ERROR, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
            public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
            public ITerminalNode ON_LOCAL_ERROR() { return GetToken(VBAParser.ON_LOCAL_ERROR, 0); }
            public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_onErrorStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOnErrorStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOnErrorStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public OnErrorStmtContext onErrorStmt()
        {
            OnErrorStmtContext _localctx = new OnErrorStmtContext(_ctx, State);
            EnterRule(_localctx, 122, RULE_onErrorStmt);
            try
            {
                State = 1325;
                switch (_input.La(1))
                {
                    case ON_ERROR:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 1314; Match(ON_ERROR);
                        }
                        break;
                    case ON_LOCAL_ERROR:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 1315; Match(ON_LOCAL_ERROR);
                            State = 1316; Match(WS);
                            State = 1323;
                            switch (_input.La(1))
                            {
                                case GOTO:
                                    {
                                        State = 1317; Match(GOTO);
                                        State = 1318; Match(WS);
                                        State = 1319; valueStmt(0);
                                    }
                                    break;
                                case RESUME:
                                    {
                                        State = 1320; Match(RESUME);
                                        State = 1321; Match(WS);
                                        State = 1322; Match(NEXT);
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OnGoToStmtContext : ParserRuleContext
        {
            public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_onGoToStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOnGoToStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOnGoToStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public OnGoToStmtContext onGoToStmt()
        {
            OnGoToStmtContext _localctx = new OnGoToStmtContext(_ctx, State);
            EnterRule(_localctx, 124, RULE_onGoToStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1327; Match(ON);
                    State = 1328; Match(WS);
                    State = 1329; valueStmt(0);
                    State = 1330; Match(WS);
                    State = 1331; Match(GOTO);
                    State = 1332; Match(WS);
                    State = 1333; valueStmt(0);
                    State = 1344;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 178, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 1335;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 1334; Match(WS);
                                        }
                                    }

                                    State = 1337; Match(T__1);
                                    State = 1339;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 1338; Match(WS);
                                        }
                                    }

                                    State = 1341; valueStmt(0);
                                }
                            }
                        }
                        State = 1346;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 178, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OnGoSubStmtContext : ParserRuleContext
        {
            public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_onGoSubStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public OnGoSubStmtContext onGoSubStmt()
        {
            OnGoSubStmtContext _localctx = new OnGoSubStmtContext(_ctx, State);
            EnterRule(_localctx, 126, RULE_onGoSubStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1347; Match(ON);
                    State = 1348; Match(WS);
                    State = 1349; valueStmt(0);
                    State = 1350; Match(WS);
                    State = 1351; Match(GOSUB);
                    State = 1352; Match(WS);
                    State = 1353; valueStmt(0);
                    State = 1364;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 181, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 1355;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 1354; Match(WS);
                                        }
                                    }

                                    State = 1357; Match(T__1);
                                    State = 1359;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 1358; Match(WS);
                                        }
                                    }

                                    State = 1361; valueStmt(0);
                                }
                            }
                        }
                        State = 1366;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 181, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OpenStmtContext : ParserRuleContext
        {
            public ITerminalNode LOCK_WRITE() { return GetToken(VBAParser.LOCK_WRITE, 0); }
            public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode LOCK_READ_WRITE() { return GetToken(VBAParser.LOCK_READ_WRITE, 0); }
            public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
            public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
            public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
            public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
            public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
            public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
            public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
            public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
            public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
            public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LOCK_READ() { return GetToken(VBAParser.LOCK_READ, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ITerminalNode READ_WRITE() { return GetToken(VBAParser.READ_WRITE, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public OpenStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_openStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOpenStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOpenStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public OpenStmtContext openStmt()
        {
            OpenStmtContext _localctx = new OpenStmtContext(_ctx, State);
            EnterRule(_localctx, 128, RULE_openStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1367; Match(OPEN);
                    State = 1368; Match(WS);
                    State = 1369; valueStmt(0);
                    State = 1370; Match(WS);
                    State = 1371; Match(FOR);
                    State = 1372; Match(WS);
                    State = 1373;
                    _la = _input.La(1);
                    if (!(_la == APPEND || _la == BINARY || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (INPUT - 87)) | (1L << (OUTPUT - 87)) | (1L << (RANDOM - 87)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                    State = 1378;
                    switch (Interpreter.AdaptivePredict(_input, 182, _ctx))
                    {
                        case 1:
                            {
                                State = 1374; Match(WS);
                                State = 1375; Match(ACCESS);
                                State = 1376; Match(WS);
                                State = 1377;
                                _la = _input.La(1);
                                if (!(((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (READ - 143)) | (1L << (READ_WRITE - 143)) | (1L << (WRITE - 143)))) != 0)))
                                {
                                    _errHandler.RecoverInline(this);
                                }
                                Consume();
                            }
                            break;
                    }
                    State = 1382;
                    switch (Interpreter.AdaptivePredict(_input, 183, _ctx))
                    {
                        case 1:
                            {
                                State = 1380; Match(WS);
                                State = 1381;
                                _la = _input.La(1);
                                if (!(((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (LOCK_READ - 100)) | (1L << (LOCK_WRITE - 100)) | (1L << (LOCK_READ_WRITE - 100)) | (1L << (SHARED - 100)))) != 0)))
                                {
                                    _errHandler.RecoverInline(this);
                                }
                                Consume();
                            }
                            break;
                    }
                    State = 1384; Match(WS);
                    State = 1385; Match(AS);
                    State = 1386; Match(WS);
                    State = 1387; fileNumber();
                    State = 1398;
                    switch (Interpreter.AdaptivePredict(_input, 186, _ctx))
                    {
                        case 1:
                            {
                                State = 1388; Match(WS);
                                State = 1389; Match(LEN);
                                State = 1391;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1390; Match(WS);
                                    }
                                }

                                State = 1393; Match(EQ);
                                State = 1395;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1394; Match(WS);
                                    }
                                }

                                State = 1397; valueStmt(0);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OutputListContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<OutputList_ExpressionContext> outputList_Expression()
            {
                return GetRuleContexts<OutputList_ExpressionContext>();
            }
            public OutputList_ExpressionContext outputList_Expression(int i)
            {
                return GetRuleContext<OutputList_ExpressionContext>(i);
            }
            public OutputListContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_outputList; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOutputList(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOutputList(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public OutputListContext outputList()
        {
            OutputListContext _localctx = new OutputListContext(_ctx, State);
            EnterRule(_localctx, 130, RULE_outputList);
            int _la;
            try
            {
                int _alt;
                State = 1433;
                switch (Interpreter.AdaptivePredict(_input, 196, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 1400; outputList_Expression();
                            State = 1413;
                            _errHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(_input, 190, _ctx);
                            while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                            {
                                if (_alt == 1)
                                {
                                    {
                                        {
                                            State = 1402;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1401; Match(WS);
                                                }
                                            }

                                            State = 1404;
                                            _la = _input.La(1);
                                            if (!(_la == T__2 || _la == T__1))
                                            {
                                                _errHandler.RecoverInline(this);
                                            }
                                            Consume();
                                            State = 1406;
                                            switch (Interpreter.AdaptivePredict(_input, 188, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 1405; Match(WS);
                                                    }
                                                    break;
                                            }
                                            State = 1409;
                                            switch (Interpreter.AdaptivePredict(_input, 189, _ctx))
                                            {
                                                case 1:
                                                    {
                                                        State = 1408; outputList_Expression();
                                                    }
                                                    break;
                                            }
                                        }
                                    }
                                }
                                State = 1415;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 190, _ctx);
                            }
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 1417;
                            _la = _input.La(1);
                            if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (LPAREN - 194)) | (1L << (MINUS - 194)) | (1L << (PLUS - 194)) | (1L << (STRINGLITERAL - 194)) | (1L << (OCTLITERAL - 194)) | (1L << (HEXLITERAL - 194)) | (1L << (SHORTLITERAL - 194)) | (1L << (INTEGERLITERAL - 194)) | (1L << (DOUBLELITERAL - 194)) | (1L << (DATELITERAL - 194)) | (1L << (IDENTIFIER - 194)))) != 0))
                            {
                                {
                                    State = 1416; outputList_Expression();
                                }
                            }

                            State = 1429;
                            _errHandler.Sync(this);
                            _alt = 1;
                            do
                            {
                                switch (_alt)
                                {
                                    case 1:
                                        {
                                            {
                                                State = 1420;
                                                _la = _input.La(1);
                                                if (_la == WS)
                                                {
                                                    {
                                                        State = 1419; Match(WS);
                                                    }
                                                }

                                                State = 1422;
                                                _la = _input.La(1);
                                                if (!(_la == T__2 || _la == T__1))
                                                {
                                                    _errHandler.RecoverInline(this);
                                                }
                                                Consume();
                                                State = 1424;
                                                switch (Interpreter.AdaptivePredict(_input, 193, _ctx))
                                                {
                                                    case 1:
                                                        {
                                                            State = 1423; Match(WS);
                                                        }
                                                        break;
                                                }
                                                State = 1427;
                                                switch (Interpreter.AdaptivePredict(_input, 194, _ctx))
                                                {
                                                    case 1:
                                                        {
                                                            State = 1426; outputList_Expression();
                                                        }
                                                        break;
                                                }
                                            }
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                                State = 1431;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 195, _ctx);
                            } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class OutputList_ExpressionContext : ParserRuleContext
        {
            public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public OutputList_ExpressionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_outputList_Expression; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterOutputList_Expression(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitOutputList_Expression(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitOutputList_Expression(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public OutputList_ExpressionContext outputList_Expression()
        {
            OutputList_ExpressionContext _localctx = new OutputList_ExpressionContext(_ctx, State);
            EnterRule(_localctx, 132, RULE_outputList_Expression);
            int _la;
            try
            {
                State = 1452;
                switch (Interpreter.AdaptivePredict(_input, 201, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 1435; valueStmt(0);
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 1436;
                            _la = _input.La(1);
                            if (!(_la == SPC || _la == TAB))
                            {
                                _errHandler.RecoverInline(this);
                            }
                            Consume();
                            State = 1450;
                            switch (Interpreter.AdaptivePredict(_input, 200, _ctx))
                            {
                                case 1:
                                    {
                                        State = 1438;
                                        _la = _input.La(1);
                                        if (_la == WS)
                                        {
                                            {
                                                State = 1437; Match(WS);
                                            }
                                        }

                                        State = 1440; Match(LPAREN);
                                        State = 1442;
                                        switch (Interpreter.AdaptivePredict(_input, 198, _ctx))
                                        {
                                            case 1:
                                                {
                                                    State = 1441; Match(WS);
                                                }
                                                break;
                                        }
                                        State = 1444; argsCall();
                                        State = 1446;
                                        _la = _input.La(1);
                                        if (_la == WS)
                                        {
                                            {
                                                State = 1445; Match(WS);
                                            }
                                        }

                                        State = 1448; Match(RPAREN);
                                    }
                                    break;
                            }
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class PrintStmtContext : ParserRuleContext
        {
            public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public OutputListContext outputList()
            {
                return GetRuleContext<OutputListContext>(0);
            }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public PrintStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_printStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterPrintStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitPrintStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public PrintStmtContext printStmt()
        {
            PrintStmtContext _localctx = new PrintStmtContext(_ctx, State);
            EnterRule(_localctx, 134, RULE_printStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1454; Match(PRINT);
                    State = 1455; Match(WS);
                    State = 1456; fileNumber();
                    State = 1458;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1457; Match(WS);
                        }
                    }

                    State = 1460; Match(T__1);
                    State = 1465;
                    switch (Interpreter.AdaptivePredict(_input, 204, _ctx))
                    {
                        case 1:
                            {
                                State = 1462;
                                switch (Interpreter.AdaptivePredict(_input, 203, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1461; Match(WS);
                                        }
                                        break;
                                }
                                State = 1464; outputList();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class PropertyGetStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public ITerminalNode PROPERTY_GET() { return GetToken(VBAParser.PROPERTY_GET, 0); }
            public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
            public ArgListContext argList()
            {
                return GetRuleContext<ArgListContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_propertyGetStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public PropertyGetStmtContext propertyGetStmt()
        {
            PropertyGetStmtContext _localctx = new PropertyGetStmtContext(_ctx, State);
            EnterRule(_localctx, 136, RULE_propertyGetStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1470;
                    _la = _input.La(1);
                    if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0))
                    {
                        {
                            State = 1467; visibility();
                            State = 1468; Match(WS);
                        }
                    }

                    State = 1474;
                    _la = _input.La(1);
                    if (_la == STATIC)
                    {
                        {
                            State = 1472; Match(STATIC);
                            State = 1473; Match(WS);
                        }
                    }

                    State = 1476; Match(PROPERTY_GET);
                    State = 1477; Match(WS);
                    State = 1478; ambiguousIdentifier();
                    State = 1480;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4))) != 0) || _la == AMPERSAND)
                    {
                        {
                            State = 1479; typeHint();
                        }
                    }

                    State = 1486;
                    switch (Interpreter.AdaptivePredict(_input, 209, _ctx))
                    {
                        case 1:
                            {
                                State = 1483;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1482; Match(WS);
                                    }
                                }

                                State = 1485; argList();
                            }
                            break;
                    }
                    State = 1490;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1488; Match(WS);
                            State = 1489; asTypeClause();
                        }
                    }

                    State = 1493;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 1492; Match(NEWLINE);
                            }
                        }
                        State = 1495;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == NEWLINE);
                    State = 1503;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            State = 1497; block();
                            State = 1499;
                            _errHandler.Sync(this);
                            _la = _input.La(1);
                            do
                            {
                                {
                                    {
                                        State = 1498; Match(NEWLINE);
                                    }
                                }
                                State = 1501;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                            } while (_la == NEWLINE);
                        }
                    }

                    State = 1505; Match(END_PROPERTY);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class PropertySetStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgListContext argList()
            {
                return GetRuleContext<ArgListContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public ITerminalNode PROPERTY_SET() { return GetToken(VBAParser.PROPERTY_SET, 0); }
            public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
            public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_propertySetStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterPropertySetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitPropertySetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public PropertySetStmtContext propertySetStmt()
        {
            PropertySetStmtContext _localctx = new PropertySetStmtContext(_ctx, State);
            EnterRule(_localctx, 138, RULE_propertySetStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1510;
                    _la = _input.La(1);
                    if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0))
                    {
                        {
                            State = 1507; visibility();
                            State = 1508; Match(WS);
                        }
                    }

                    State = 1514;
                    _la = _input.La(1);
                    if (_la == STATIC)
                    {
                        {
                            State = 1512; Match(STATIC);
                            State = 1513; Match(WS);
                        }
                    }

                    State = 1516; Match(PROPERTY_SET);
                    State = 1517; Match(WS);
                    State = 1518; ambiguousIdentifier();
                    State = 1523;
                    _la = _input.La(1);
                    if (_la == LPAREN || _la == WS)
                    {
                        {
                            State = 1520;
                            _la = _input.La(1);
                            if (_la == WS)
                            {
                                {
                                    State = 1519; Match(WS);
                                }
                            }

                            State = 1522; argList();
                        }
                    }

                    State = 1526;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 1525; Match(NEWLINE);
                            }
                        }
                        State = 1528;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == NEWLINE);
                    State = 1536;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            State = 1530; block();
                            State = 1532;
                            _errHandler.Sync(this);
                            _la = _input.La(1);
                            do
                            {
                                {
                                    {
                                        State = 1531; Match(NEWLINE);
                                    }
                                }
                                State = 1534;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                            } while (_la == NEWLINE);
                        }
                    }

                    State = 1538; Match(END_PROPERTY);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class PropertyLetStmtContext : ParserRuleContext
        {
            public ITerminalNode PROPERTY_LET() { return GetToken(VBAParser.PROPERTY_LET, 0); }
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgListContext argList()
            {
                return GetRuleContext<ArgListContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public ITerminalNode END_PROPERTY() { return GetToken(VBAParser.END_PROPERTY, 0); }
            public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_propertyLetStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public PropertyLetStmtContext propertyLetStmt()
        {
            PropertyLetStmtContext _localctx = new PropertyLetStmtContext(_ctx, State);
            EnterRule(_localctx, 140, RULE_propertyLetStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1543;
                    _la = _input.La(1);
                    if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0))
                    {
                        {
                            State = 1540; visibility();
                            State = 1541; Match(WS);
                        }
                    }

                    State = 1547;
                    _la = _input.La(1);
                    if (_la == STATIC)
                    {
                        {
                            State = 1545; Match(STATIC);
                            State = 1546; Match(WS);
                        }
                    }

                    State = 1549; Match(PROPERTY_LET);
                    State = 1550; Match(WS);
                    State = 1551; ambiguousIdentifier();
                    State = 1556;
                    _la = _input.La(1);
                    if (_la == LPAREN || _la == WS)
                    {
                        {
                            State = 1553;
                            _la = _input.La(1);
                            if (_la == WS)
                            {
                                {
                                    State = 1552; Match(WS);
                                }
                            }

                            State = 1555; argList();
                        }
                    }

                    State = 1559;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 1558; Match(NEWLINE);
                            }
                        }
                        State = 1561;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == NEWLINE);
                    State = 1569;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            State = 1563; block();
                            State = 1565;
                            _errHandler.Sync(this);
                            _la = _input.La(1);
                            do
                            {
                                {
                                    {
                                        State = 1564; Match(NEWLINE);
                                    }
                                }
                                State = 1567;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                            } while (_la == NEWLINE);
                        }
                    }

                    State = 1571; Match(END_PROPERTY);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class PutStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public PutStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_putStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterPutStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitPutStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public PutStmtContext putStmt()
        {
            PutStmtContext _localctx = new PutStmtContext(_ctx, State);
            EnterRule(_localctx, 142, RULE_putStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1573; Match(PUT);
                    State = 1574; Match(WS);
                    State = 1575; fileNumber();
                    State = 1577;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1576; Match(WS);
                        }
                    }

                    State = 1579; Match(T__1);
                    State = 1581;
                    switch (Interpreter.AdaptivePredict(_input, 229, _ctx))
                    {
                        case 1:
                            {
                                State = 1580; Match(WS);
                            }
                            break;
                    }
                    State = 1584;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (LPAREN - 194)) | (1L << (MINUS - 194)) | (1L << (PLUS - 194)) | (1L << (STRINGLITERAL - 194)) | (1L << (OCTLITERAL - 194)) | (1L << (HEXLITERAL - 194)) | (1L << (SHORTLITERAL - 194)) | (1L << (INTEGERLITERAL - 194)) | (1L << (DOUBLELITERAL - 194)) | (1L << (DATELITERAL - 194)) | (1L << (IDENTIFIER - 194)))) != 0))
                    {
                        {
                            State = 1583; valueStmt(0);
                        }
                    }

                    State = 1587;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1586; Match(WS);
                        }
                    }

                    State = 1589; Match(T__1);
                    State = 1591;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1590; Match(WS);
                        }
                    }

                    State = 1593; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RaiseEventStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_raiseEventStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public RaiseEventStmtContext raiseEventStmt()
        {
            RaiseEventStmtContext _localctx = new RaiseEventStmtContext(_ctx, State);
            EnterRule(_localctx, 144, RULE_raiseEventStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1595; Match(RAISEEVENT);
                    State = 1596; Match(WS);
                    State = 1597; ambiguousIdentifier();
                    State = 1612;
                    switch (Interpreter.AdaptivePredict(_input, 237, _ctx))
                    {
                        case 1:
                            {
                                State = 1599;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1598; Match(WS);
                                    }
                                }

                                State = 1601; Match(LPAREN);
                                State = 1603;
                                switch (Interpreter.AdaptivePredict(_input, 234, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1602; Match(WS);
                                        }
                                        break;
                                }
                                State = 1609;
                                switch (Interpreter.AdaptivePredict(_input, 236, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1605; argsCall();
                                            State = 1607;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1606; Match(WS);
                                                }
                                            }

                                        }
                                        break;
                                }
                                State = 1611; Match(RPAREN);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RandomizeStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode RANDOMIZE() { return GetToken(VBAParser.RANDOMIZE, 0); }
            public RandomizeStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_randomizeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterRandomizeStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitRandomizeStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitRandomizeStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public RandomizeStmtContext randomizeStmt()
        {
            RandomizeStmtContext _localctx = new RandomizeStmtContext(_ctx, State);
            EnterRule(_localctx, 146, RULE_randomizeStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1614; Match(RANDOMIZE);
                    State = 1617;
                    switch (Interpreter.AdaptivePredict(_input, 238, _ctx))
                    {
                        case 1:
                            {
                                State = 1615; Match(WS);
                                State = 1616; valueStmt(0);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RedimStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<RedimSubStmtContext> redimSubStmt()
            {
                return GetRuleContexts<RedimSubStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
            public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
            public RedimSubStmtContext redimSubStmt(int i)
            {
                return GetRuleContext<RedimSubStmtContext>(i);
            }
            public RedimStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_redimStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterRedimStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitRedimStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public RedimStmtContext redimStmt()
        {
            RedimStmtContext _localctx = new RedimStmtContext(_ctx, State);
            EnterRule(_localctx, 148, RULE_redimStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1619; Match(REDIM);
                    State = 1620; Match(WS);
                    State = 1623;
                    switch (Interpreter.AdaptivePredict(_input, 239, _ctx))
                    {
                        case 1:
                            {
                                State = 1621; Match(PRESERVE);
                                State = 1622; Match(WS);
                            }
                            break;
                    }
                    State = 1625; redimSubStmt();
                    State = 1636;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 242, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 1627;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 1626; Match(WS);
                                        }
                                    }

                                    State = 1629; Match(T__1);
                                    State = 1631;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 1630; Match(WS);
                                        }
                                    }

                                    State = 1633; redimSubStmt();
                                }
                            }
                        }
                        State = 1638;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 242, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RedimSubStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public SubscriptsContext subscripts()
            {
                return GetRuleContext<SubscriptsContext>(0);
            }
            public RedimSubStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_redimSubStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterRedimSubStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitRedimSubStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitRedimSubStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public RedimSubStmtContext redimSubStmt()
        {
            RedimSubStmtContext _localctx = new RedimSubStmtContext(_ctx, State);
            EnterRule(_localctx, 150, RULE_redimSubStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1639; implicitCallStmt_InStmt();
                    State = 1641;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1640; Match(WS);
                        }
                    }

                    State = 1643; Match(LPAREN);
                    State = 1645;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1644; Match(WS);
                        }
                    }

                    State = 1647; subscripts();
                    State = 1649;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1648; Match(WS);
                        }
                    }

                    State = 1651; Match(RPAREN);
                    State = 1654;
                    switch (Interpreter.AdaptivePredict(_input, 246, _ctx))
                    {
                        case 1:
                            {
                                State = 1652; Match(WS);
                                State = 1653; asTypeClause();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ResetStmtContext : ParserRuleContext
        {
            public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
            public ResetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_resetStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterResetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitResetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ResetStmtContext resetStmt()
        {
            ResetStmtContext _localctx = new ResetStmtContext(_ctx, State);
            EnterRule(_localctx, 152, RULE_resetStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1656; Match(RESET);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ResumeStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
            public ResumeStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_resumeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterResumeStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitResumeStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ResumeStmtContext resumeStmt()
        {
            ResumeStmtContext _localctx = new ResumeStmtContext(_ctx, State);
            EnterRule(_localctx, 154, RULE_resumeStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1658; Match(RESUME);
                    State = 1664;
                    switch (Interpreter.AdaptivePredict(_input, 248, _ctx))
                    {
                        case 1:
                            {
                                State = 1659; Match(WS);
                                State = 1662;
                                switch (Interpreter.AdaptivePredict(_input, 247, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1660; Match(NEXT);
                                        }
                                        break;

                                    case 2:
                                        {
                                            State = 1661; ambiguousIdentifier();
                                        }
                                        break;
                                }
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ReturnStmtContext : ParserRuleContext
        {
            public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
            public ReturnStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_returnStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterReturnStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitReturnStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ReturnStmtContext returnStmt()
        {
            ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, State);
            EnterRule(_localctx, 156, RULE_returnStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1666; Match(RETURN);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RmdirStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
            public RmdirStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_rmdirStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterRmdirStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitRmdirStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitRmdirStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public RmdirStmtContext rmdirStmt()
        {
            RmdirStmtContext _localctx = new RmdirStmtContext(_ctx, State);
            EnterRule(_localctx, 158, RULE_rmdirStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1668; Match(RMDIR);
                    State = 1669; Match(WS);
                    State = 1670; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class RsetStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public RsetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_rsetStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterRsetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitRsetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public RsetStmtContext rsetStmt()
        {
            RsetStmtContext _localctx = new RsetStmtContext(_ctx, State);
            EnterRule(_localctx, 160, RULE_rsetStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1672; Match(RSET);
                    State = 1673; Match(WS);
                    State = 1674; implicitCallStmt_InStmt();
                    State = 1676;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1675; Match(WS);
                        }
                    }

                    State = 1678; Match(EQ);
                    State = 1680;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1679; Match(WS);
                        }
                    }

                    State = 1682; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SavepictureStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode SAVEPICTURE() { return GetToken(VBAParser.SAVEPICTURE, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public SavepictureStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_savepictureStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSavepictureStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSavepictureStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSavepictureStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SavepictureStmtContext savepictureStmt()
        {
            SavepictureStmtContext _localctx = new SavepictureStmtContext(_ctx, State);
            EnterRule(_localctx, 162, RULE_savepictureStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1684; Match(SAVEPICTURE);
                    State = 1685; Match(WS);
                    State = 1686; valueStmt(0);
                    State = 1688;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1687; Match(WS);
                        }
                    }

                    State = 1690; Match(T__1);
                    State = 1692;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1691; Match(WS);
                        }
                    }

                    State = 1694; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SaveSettingStmtContext : ParserRuleContext
        {
            public ITerminalNode SAVESETTING() { return GetToken(VBAParser.SAVESETTING, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public SaveSettingStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_saveSettingStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSaveSettingStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSaveSettingStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSaveSettingStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SaveSettingStmtContext saveSettingStmt()
        {
            SaveSettingStmtContext _localctx = new SaveSettingStmtContext(_ctx, State);
            EnterRule(_localctx, 164, RULE_saveSettingStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1696; Match(SAVESETTING);
                    State = 1697; Match(WS);
                    State = 1698; valueStmt(0);
                    State = 1700;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1699; Match(WS);
                        }
                    }

                    State = 1702; Match(T__1);
                    State = 1704;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1703; Match(WS);
                        }
                    }

                    State = 1706; valueStmt(0);
                    State = 1708;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1707; Match(WS);
                        }
                    }

                    State = 1710; Match(T__1);
                    State = 1712;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1711; Match(WS);
                        }
                    }

                    State = 1714; valueStmt(0);
                    State = 1716;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1715; Match(WS);
                        }
                    }

                    State = 1718; Match(T__1);
                    State = 1720;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1719; Match(WS);
                        }
                    }

                    State = 1722; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SeekStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
            public SeekStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_seekStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSeekStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSeekStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SeekStmtContext seekStmt()
        {
            SeekStmtContext _localctx = new SeekStmtContext(_ctx, State);
            EnterRule(_localctx, 166, RULE_seekStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1724; Match(SEEK);
                    State = 1725; Match(WS);
                    State = 1726; fileNumber();
                    State = 1728;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1727; Match(WS);
                        }
                    }

                    State = 1730; Match(T__1);
                    State = 1732;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1731; Match(WS);
                        }
                    }

                    State = 1734; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SelectCaseStmtContext : ParserRuleContext
        {
            public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode END_SELECT() { return GetToken(VBAParser.END_SELECT, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
            public SC_CaseContext sC_Case(int i)
            {
                return GetRuleContext<SC_CaseContext>(i);
            }
            public IReadOnlyList<SC_CaseContext> sC_Case()
            {
                return GetRuleContexts<SC_CaseContext>();
            }
            public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_selectCaseStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SelectCaseStmtContext selectCaseStmt()
        {
            SelectCaseStmtContext _localctx = new SelectCaseStmtContext(_ctx, State);
            EnterRule(_localctx, 168, RULE_selectCaseStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1736; Match(SELECT);
                    State = 1737; Match(WS);
                    State = 1738; Match(CASE);
                    State = 1739; Match(WS);
                    State = 1740; valueStmt(0);
                    State = 1742;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 1741; Match(NEWLINE);
                            }
                        }
                        State = 1744;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == NEWLINE);
                    State = 1749;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while (_la == CASE)
                    {
                        {
                            {
                                State = 1746; sC_Case();
                            }
                        }
                        State = 1751;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 1753;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1752; Match(WS);
                        }
                    }

                    State = 1755; Match(END_SELECT);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SC_SelectionContext : ParserRuleContext
        {
            public SC_SelectionContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_sC_Selection; } }

            public SC_SelectionContext() { }
            public virtual void CopyFrom(SC_SelectionContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class CaseCondValueContext : SC_SelectionContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public CaseCondValueContext(SC_SelectionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterCaseCondValue(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitCaseCondValue(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCaseCondValue(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class CaseCondToContext : SC_SelectionContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public CaseCondToContext(SC_SelectionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterCaseCondTo(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitCaseCondTo(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCaseCondTo(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class CaseCondIsContext : SC_SelectionContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ComparisonOperatorContext comparisonOperator()
            {
                return GetRuleContext<ComparisonOperatorContext>(0);
            }
            public CaseCondIsContext(SC_SelectionContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterCaseCondIs(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitCaseCondIs(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCaseCondIs(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SC_SelectionContext sC_Selection()
        {
            SC_SelectionContext _localctx = new SC_SelectionContext(_ctx, State);
            EnterRule(_localctx, 170, RULE_sC_Selection);
            int _la;
            try
            {
                State = 1774;
                switch (Interpreter.AdaptivePredict(_input, 266, _ctx))
                {
                    case 1:
                        _localctx = new CaseCondIsContext(_localctx);
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 1757; Match(IS);
                            State = 1759;
                            _la = _input.La(1);
                            if (_la == WS)
                            {
                                {
                                    State = 1758; Match(WS);
                                }
                            }

                            State = 1761; comparisonOperator();
                            State = 1763;
                            _la = _input.La(1);
                            if (_la == WS)
                            {
                                {
                                    State = 1762; Match(WS);
                                }
                            }

                            State = 1765; valueStmt(0);
                        }
                        break;

                    case 2:
                        _localctx = new CaseCondToContext(_localctx);
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 1767; valueStmt(0);
                            State = 1768; Match(WS);
                            State = 1769; Match(TO);
                            State = 1770; Match(WS);
                            State = 1771; valueStmt(0);
                        }
                        break;

                    case 3:
                        _localctx = new CaseCondValueContext(_localctx);
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 1773; valueStmt(0);
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SC_CaseContext : ParserRuleContext
        {
            public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public BlockContext block(int i)
            {
                return GetRuleContext<BlockContext>(i);
            }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public SC_CondContext sC_Cond()
            {
                return GetRuleContext<SC_CondContext>(0);
            }
            public IReadOnlyList<BlockContext> block()
            {
                return GetRuleContexts<BlockContext>();
            }
            public SC_CaseContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_sC_Case; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSC_Case(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSC_Case(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSC_Case(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SC_CaseContext sC_Case()
        {
            SC_CaseContext _localctx = new SC_CaseContext(_ctx, State);
            EnterRule(_localctx, 172, RULE_sC_Case);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1776; Match(CASE);
                    State = 1777; Match(WS);
                    State = 1778; sC_Cond();
                    State = 1780;
                    switch (Interpreter.AdaptivePredict(_input, 267, _ctx))
                    {
                        case 1:
                            {
                                State = 1779; Match(WS);
                            }
                            break;
                    }
                    {
                        State = 1783;
                        _la = _input.La(1);
                        if (_la == T__3)
                        {
                            {
                                State = 1782; Match(T__3);
                            }
                        }

                        State = 1788;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                        while (_la == NEWLINE)
                        {
                            {
                                {
                                    State = 1785; Match(NEWLINE);
                                }
                            }
                            State = 1790;
                            _errHandler.Sync(this);
                            _la = _input.La(1);
                        }
                    }
                    State = 1799;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 271, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 1791; block();
                                    State = 1793;
                                    _errHandler.Sync(this);
                                    _la = _input.La(1);
                                    do
                                    {
                                        {
                                            {
                                                State = 1792; Match(NEWLINE);
                                            }
                                        }
                                        State = 1795;
                                        _errHandler.Sync(this);
                                        _la = _input.La(1);
                                    } while (_la == NEWLINE);
                                }
                            }
                        }
                        State = 1801;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 271, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SC_CondContext : ParserRuleContext
        {
            public SC_CondContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_sC_Cond; } }

            public SC_CondContext() { }
            public virtual void CopyFrom(SC_CondContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class CaseCondSelectionContext : SC_CondContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<SC_SelectionContext> sC_Selection()
            {
                return GetRuleContexts<SC_SelectionContext>();
            }
            public SC_SelectionContext sC_Selection(int i)
            {
                return GetRuleContext<SC_SelectionContext>(i);
            }
            public CaseCondSelectionContext(SC_CondContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterCaseCondSelection(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitCaseCondSelection(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCaseCondSelection(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class CaseCondElseContext : SC_CondContext
        {
            public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
            public CaseCondElseContext(SC_CondContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterCaseCondElse(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitCaseCondElse(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCaseCondElse(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SC_CondContext sC_Cond()
        {
            SC_CondContext _localctx = new SC_CondContext(_ctx, State);
            EnterRule(_localctx, 174, RULE_sC_Cond);
            int _la;
            try
            {
                int _alt;
                State = 1817;
                switch (Interpreter.AdaptivePredict(_input, 275, _ctx))
                {
                    case 1:
                        _localctx = new CaseCondElseContext(_localctx);
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 1802; Match(ELSE);
                        }
                        break;

                    case 2:
                        _localctx = new CaseCondSelectionContext(_localctx);
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 1803; sC_Selection();
                            State = 1814;
                            _errHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(_input, 274, _ctx);
                            while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                            {
                                if (_alt == 1)
                                {
                                    {
                                        {
                                            State = 1805;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1804; Match(WS);
                                                }
                                            }

                                            State = 1807; Match(T__1);
                                            State = 1809;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1808; Match(WS);
                                                }
                                            }

                                            State = 1811; sC_Selection();
                                        }
                                    }
                                }
                                State = 1816;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 274, _ctx);
                            }
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SendkeysStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public SendkeysStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_sendkeysStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSendkeysStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSendkeysStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSendkeysStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SendkeysStmtContext sendkeysStmt()
        {
            SendkeysStmtContext _localctx = new SendkeysStmtContext(_ctx, State);
            EnterRule(_localctx, 176, RULE_sendkeysStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1819; Match(SENDKEYS);
                    State = 1820; Match(WS);
                    State = 1821; valueStmt(0);
                    State = 1830;
                    switch (Interpreter.AdaptivePredict(_input, 278, _ctx))
                    {
                        case 1:
                            {
                                State = 1823;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1822; Match(WS);
                                    }
                                }

                                State = 1825; Match(T__1);
                                State = 1827;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1826; Match(WS);
                                    }
                                }

                                State = 1829; valueStmt(0);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SetattrStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public SetattrStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_setattrStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSetattrStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSetattrStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSetattrStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SetattrStmtContext setattrStmt()
        {
            SetattrStmtContext _localctx = new SetattrStmtContext(_ctx, State);
            EnterRule(_localctx, 178, RULE_setattrStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1832; Match(SETATTR);
                    State = 1833; Match(WS);
                    State = 1834; valueStmt(0);
                    State = 1836;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1835; Match(WS);
                        }
                    }

                    State = 1838; Match(T__1);
                    State = 1840;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1839; Match(WS);
                        }
                    }

                    State = 1842; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SetStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
            public SetStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_setStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSetStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSetStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SetStmtContext setStmt()
        {
            SetStmtContext _localctx = new SetStmtContext(_ctx, State);
            EnterRule(_localctx, 180, RULE_setStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1844; Match(SET);
                    State = 1845; Match(WS);
                    State = 1846; implicitCallStmt_InStmt();
                    State = 1848;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1847; Match(WS);
                        }
                    }

                    State = 1850; Match(EQ);
                    State = 1852;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1851; Match(WS);
                        }
                    }

                    State = 1854; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class StopStmtContext : ParserRuleContext
        {
            public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
            public StopStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_stopStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterStopStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitStopStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public StopStmtContext stopStmt()
        {
            StopStmtContext _localctx = new StopStmtContext(_ctx, State);
            EnterRule(_localctx, 182, RULE_stopStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1856; Match(STOP);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SubStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgListContext argList()
            {
                return GetRuleContext<ArgListContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
            public ITerminalNode END_SUB() { return GetToken(VBAParser.END_SUB, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public SubStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_subStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSubStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSubStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SubStmtContext subStmt()
        {
            SubStmtContext _localctx = new SubStmtContext(_ctx, State);
            EnterRule(_localctx, 184, RULE_subStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1861;
                    _la = _input.La(1);
                    if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0))
                    {
                        {
                            State = 1858; visibility();
                            State = 1859; Match(WS);
                        }
                    }

                    State = 1865;
                    _la = _input.La(1);
                    if (_la == STATIC)
                    {
                        {
                            State = 1863; Match(STATIC);
                            State = 1864; Match(WS);
                        }
                    }

                    State = 1867; Match(SUB);
                    State = 1869;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1868; Match(WS);
                        }
                    }

                    State = 1871; ambiguousIdentifier();
                    State = 1876;
                    _la = _input.La(1);
                    if (_la == LPAREN || _la == WS)
                    {
                        {
                            State = 1873;
                            _la = _input.La(1);
                            if (_la == WS)
                            {
                                {
                                    State = 1872; Match(WS);
                                }
                            }

                            State = 1875; argList();
                        }
                    }

                    State = 1879;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 1878; Match(NEWLINE);
                            }
                        }
                        State = 1881;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == NEWLINE);
                    State = 1889;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            State = 1883; block();
                            State = 1885;
                            _errHandler.Sync(this);
                            _la = _input.La(1);
                            do
                            {
                                {
                                    {
                                        State = 1884; Match(NEWLINE);
                                    }
                                }
                                State = 1887;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                            } while (_la == NEWLINE);
                        }
                    }

                    State = 1891; Match(END_SUB);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TimeStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode TIME() { return GetToken(VBAParser.TIME, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public TimeStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_timeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterTimeStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitTimeStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTimeStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public TimeStmtContext timeStmt()
        {
            TimeStmtContext _localctx = new TimeStmtContext(_ctx, State);
            EnterRule(_localctx, 186, RULE_timeStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1893; Match(TIME);
                    State = 1895;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1894; Match(WS);
                        }
                    }

                    State = 1897; Match(EQ);
                    State = 1899;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1898; Match(WS);
                        }
                    }

                    State = 1901; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TypeStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<TypeStmt_ElementContext> typeStmt_Element()
            {
                return GetRuleContexts<TypeStmt_ElementContext>();
            }
            public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeStmt_ElementContext typeStmt_Element(int i)
            {
                return GetRuleContext<TypeStmt_ElementContext>(i);
            }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public ITerminalNode END_TYPE() { return GetToken(VBAParser.END_TYPE, 0); }
            public TypeStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_typeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterTypeStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitTypeStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTypeStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public TypeStmtContext typeStmt()
        {
            TypeStmtContext _localctx = new TypeStmtContext(_ctx, State);
            EnterRule(_localctx, 188, RULE_typeStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1906;
                    _la = _input.La(1);
                    if (((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0))
                    {
                        {
                            State = 1903; visibility();
                            State = 1904; Match(WS);
                        }
                    }

                    State = 1908; Match(TYPE);
                    State = 1909; Match(WS);
                    State = 1910; ambiguousIdentifier();
                    State = 1912;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 1911; Match(NEWLINE);
                            }
                        }
                        State = 1914;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == NEWLINE);
                    State = 1919;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            {
                                State = 1916; typeStmt_Element();
                            }
                        }
                        State = 1921;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    }
                    State = 1922; Match(END_TYPE);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TypeStmt_ElementContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public SubscriptsContext subscripts()
            {
                return GetRuleContext<SubscriptsContext>(0);
            }
            public TypeStmt_ElementContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_typeStmt_Element; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterTypeStmt_Element(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitTypeStmt_Element(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTypeStmt_Element(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public TypeStmt_ElementContext typeStmt_Element()
        {
            TypeStmt_ElementContext _localctx = new TypeStmt_ElementContext(_ctx, State);
            EnterRule(_localctx, 190, RULE_typeStmt_Element);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1924; ambiguousIdentifier();
                    State = 1939;
                    switch (Interpreter.AdaptivePredict(_input, 300, _ctx))
                    {
                        case 1:
                            {
                                State = 1926;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1925; Match(WS);
                                    }
                                }

                                State = 1928; Match(LPAREN);
                                State = 1933;
                                switch (Interpreter.AdaptivePredict(_input, 298, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1930;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 1929; Match(WS);
                                                }
                                            }

                                            State = 1932; subscripts();
                                        }
                                        break;
                                }
                                State = 1936;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1935; Match(WS);
                                    }
                                }

                                State = 1938; Match(RPAREN);
                            }
                            break;
                    }
                    State = 1943;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 1941; Match(WS);
                            State = 1942; asTypeClause();
                        }
                    }

                    State = 1946;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 1945; Match(NEWLINE);
                            }
                        }
                        State = 1948;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == NEWLINE);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TypeOfStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
            public TypeContext type()
            {
                return GetRuleContext<TypeContext>(0);
            }
            public TypeOfStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_typeOfStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterTypeOfStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitTypeOfStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTypeOfStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public TypeOfStmtContext typeOfStmt()
        {
            TypeOfStmtContext _localctx = new TypeOfStmtContext(_ctx, State);
            EnterRule(_localctx, 192, RULE_typeOfStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1950; Match(TYPEOF);
                    State = 1951; Match(WS);
                    State = 1952; valueStmt(0);
                    State = 1957;
                    switch (Interpreter.AdaptivePredict(_input, 303, _ctx))
                    {
                        case 1:
                            {
                                State = 1953; Match(WS);
                                State = 1954; Match(IS);
                                State = 1955; Match(WS);
                                State = 1956; type();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class UnloadStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode UNLOAD() { return GetToken(VBAParser.UNLOAD, 0); }
            public UnloadStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_unloadStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterUnloadStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitUnloadStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitUnloadStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public UnloadStmtContext unloadStmt()
        {
            UnloadStmtContext _localctx = new UnloadStmtContext(_ctx, State);
            EnterRule(_localctx, 194, RULE_unloadStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1959; Match(UNLOAD);
                    State = 1960; Match(WS);
                    State = 1961; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class UnlockStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
            public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public UnlockStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_unlockStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterUnlockStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitUnlockStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public UnlockStmtContext unlockStmt()
        {
            UnlockStmtContext _localctx = new UnlockStmtContext(_ctx, State);
            EnterRule(_localctx, 196, RULE_unlockStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 1963; Match(UNLOCK);
                    State = 1964; Match(WS);
                    State = 1965; fileNumber();
                    State = 1980;
                    switch (Interpreter.AdaptivePredict(_input, 307, _ctx))
                    {
                        case 1:
                            {
                                State = 1967;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1966; Match(WS);
                                    }
                                }

                                State = 1969; Match(T__1);
                                State = 1971;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1970; Match(WS);
                                    }
                                }

                                State = 1973; valueStmt(0);
                                State = 1978;
                                switch (Interpreter.AdaptivePredict(_input, 306, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 1974; Match(WS);
                                            State = 1975; Match(TO);
                                            State = 1976; Match(WS);
                                            State = 1977; valueStmt(0);
                                        }
                                        break;
                                }
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ValueStmtContext : ParserRuleContext
        {
            public ValueStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_valueStmt; } }

            public ValueStmtContext() { }
            public virtual void CopyFrom(ValueStmtContext context)
            {
                base.CopyFrom(context);
            }
        }
        public partial class VsStructContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsStructContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsStruct(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsStruct(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsStruct(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsAddContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsAddContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsAdd(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsAdd(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsAdd(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsLtContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsLtContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsLt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsLt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsLt(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsAddressOfContext : ValueStmtContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
            public VsAddressOfContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsAddressOf(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsAddressOf(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsAddressOf(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsNewContext : ValueStmtContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
            public VsNewContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsNew(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsNew(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsNew(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsMultContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsMultContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsMult(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsMult(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsMult(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsNegationContext : ValueStmtContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
            public VsNegationContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsNegation(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsNegation(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsNegation(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsAssignContext : ValueStmtContext
        {
            public ITerminalNode ASSIGN() { return GetToken(VBAParser.ASSIGN, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public VsAssignContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsAssign(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsAssign(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsAssign(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsLikeContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsLikeContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsLike(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsLike(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsLike(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsDivContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public ITerminalNode DIV() { return GetToken(VBAParser.DIV, 0); }
            public VsDivContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsDiv(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsDiv(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsDiv(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsPlusContext : ValueStmtContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode PLUS() { return GetToken(VBAParser.PLUS, 0); }
            public VsPlusContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsPlus(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsPlus(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsPlus(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsNotContext : ValueStmtContext
        {
            public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public VsNotContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsNot(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsNot(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsNot(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsGeqContext : ValueStmtContext
        {
            public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsGeqContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsGeq(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsGeq(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsGeq(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsTypeOfContext : ValueStmtContext
        {
            public TypeOfStmtContext typeOfStmt()
            {
                return GetRuleContext<TypeOfStmtContext>(0);
            }
            public VsTypeOfContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsTypeOf(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsTypeOf(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsTypeOf(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsICSContext : ValueStmtContext
        {
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public VsICSContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsICS(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsICS(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsICS(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsNeqContext : ValueStmtContext
        {
            public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsNeqContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsNeq(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsNeq(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsNeq(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsXorContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsXorContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsXor(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsXor(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsXor(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsAndContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsAndContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsAnd(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsAnd(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsAnd(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsLeqContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsLeqContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsLeq(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsLeq(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsLeq(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsPowContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public ITerminalNode POW() { return GetToken(VBAParser.POW, 0); }
            public VsPowContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsPow(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsPow(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsPow(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsIsContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsIsContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsIs(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsIs(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsIs(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsModContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsModContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsMod(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsMod(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsMod(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsAmpContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode AMPERSAND() { return GetToken(VBAParser.AMPERSAND, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsAmpContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsAmp(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsAmp(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsAmp(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsOrContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsOrContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsOr(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsOr(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsOr(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsMinusContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsMinusContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsMinus(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsMinus(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsMinus(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsLiteralContext : ValueStmtContext
        {
            public LiteralContext literal()
            {
                return GetRuleContext<LiteralContext>(0);
            }
            public VsLiteralContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsLiteral(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsLiteral(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsLiteral(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsEqvContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsEqvContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsEqv(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsEqv(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsEqv(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsImpContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsImpContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsImp(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsImp(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsImp(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsGtContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsGtContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsGt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsGt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsGt(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsEqContext : ValueStmtContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public VsEqContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsEq(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsEq(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsEq(this);
                else return visitor.VisitChildren(this);
            }
        }
        public partial class VsMidContext : ValueStmtContext
        {
            public MidStmtContext midStmt()
            {
                return GetRuleContext<MidStmtContext>(0);
            }
            public VsMidContext(ValueStmtContext context) { CopyFrom(context); }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVsMid(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVsMid(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVsMid(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ValueStmtContext valueStmt()
        {
            return valueStmt(0);
        }

        private ValueStmtContext valueStmt(int _p)
        {
            ParserRuleContext _parentctx = _ctx;
            int _parentState = State;
            ValueStmtContext _localctx = new ValueStmtContext(_ctx, _parentState);
            ValueStmtContext _prevctx = _localctx;
            int _startState = 198;
            EnterRecursionRule(_localctx, 198, RULE_valueStmt, _p);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2042;
                    switch (Interpreter.AdaptivePredict(_input, 319, _ctx))
                    {
                        case 1:
                            {
                                _localctx = new VsNewContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;

                                State = 1983; Match(NEW);
                                State = 1985;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1984; Match(WS);
                                    }
                                }

                                State = 1987; valueStmt(28);
                            }
                            break;

                        case 2:
                            {
                                _localctx = new VsAddressOfContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 1988; Match(ADDRESSOF);
                                State = 1990;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1989; Match(WS);
                                    }
                                }

                                State = 1992; valueStmt(25);
                            }
                            break;

                        case 3:
                            {
                                _localctx = new VsAssignContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 1993; implicitCallStmt_InStmt();
                                State = 1995;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1994; Match(WS);
                                    }
                                }

                                State = 1997; Match(ASSIGN);
                                State = 1999;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 1998; Match(WS);
                                    }
                                }

                                State = 2001; valueStmt(24);
                            }
                            break;

                        case 4:
                            {
                                _localctx = new VsNegationContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 2003; Match(MINUS);
                                State = 2005;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2004; Match(WS);
                                    }
                                }

                                State = 2007; valueStmt(14);
                            }
                            break;

                        case 5:
                            {
                                _localctx = new VsPlusContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 2008; Match(PLUS);
                                State = 2010;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2009; Match(WS);
                                    }
                                }

                                State = 2012; valueStmt(13);
                            }
                            break;

                        case 6:
                            {
                                _localctx = new VsNotContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 2013; Match(NOT);
                                State = 2015;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2014; Match(WS);
                                    }
                                }

                                State = 2017; valueStmt(1);
                            }
                            break;

                        case 7:
                            {
                                _localctx = new VsLiteralContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 2018; literal();
                            }
                            break;

                        case 8:
                            {
                                _localctx = new VsICSContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 2019; implicitCallStmt_InStmt();
                            }
                            break;

                        case 9:
                            {
                                _localctx = new VsStructContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 2020; Match(LPAREN);
                                State = 2022;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2021; Match(WS);
                                    }
                                }

                                State = 2024; valueStmt(0);
                                State = 2035;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                                while (_la == T__1 || _la == WS)
                                {
                                    {
                                        {
                                            State = 2026;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2025; Match(WS);
                                                }
                                            }

                                            State = 2028; Match(T__1);
                                            State = 2030;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2029; Match(WS);
                                                }
                                            }

                                            State = 2032; valueStmt(0);
                                        }
                                    }
                                    State = 2037;
                                    _errHandler.Sync(this);
                                    _la = _input.La(1);
                                }
                                State = 2038; Match(RPAREN);
                            }
                            break;

                        case 10:
                            {
                                _localctx = new VsTypeOfContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 2040; typeOfStmt();
                            }
                            break;

                        case 11:
                            {
                                _localctx = new VsMidContext(_localctx);
                                _ctx = _localctx;
                                _prevctx = _localctx;
                                State = 2041; midStmt();
                            }
                            break;
                    }
                    _ctx.stop = _input.Lt(-1);
                    State = 2226;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 361, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            if (_parseListeners != null) TriggerExitRuleEvent();
                            _prevctx = _localctx;
                            {
                                State = 2224;
                                switch (Interpreter.AdaptivePredict(_input, 360, _ctx))
                                {
                                    case 1:
                                        {
                                            _localctx = new VsIsContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 2044;
                                            if (!(Precpred(_ctx, 23))) throw new FailedPredicateException(this, "Precpred(_ctx, 23)");
                                            State = 2046;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2045; Match(WS);
                                                }
                                            }

                                            State = 2048; Match(IS);
                                            State = 2050;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2049; Match(WS);
                                                }
                                            }

                                            State = 2052; valueStmt(24);
                                        }
                                        break;

                                    case 2:
                                        {
                                            _localctx = new VsLikeContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 2053;
                                            if (!(Precpred(_ctx, 22))) throw new FailedPredicateException(this, "Precpred(_ctx, 22)");
                                            State = 2055;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2054; Match(WS);
                                                }
                                            }

                                            State = 2057; Match(LIKE);
                                            State = 2059;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2058; Match(WS);
                                                }
                                            }

                                            State = 2061; valueStmt(23);
                                        }
                                        break;

                                    case 3:
                                        {
                                            _localctx = new VsGeqContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 2062;
                                            if (!(Precpred(_ctx, 21))) throw new FailedPredicateException(this, "Precpred(_ctx, 21)");
                                            State = 2064;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2063; Match(WS);
                                                }
                                            }

                                            State = 2066; Match(GEQ);
                                            State = 2068;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2067; Match(WS);
                                                }
                                            }

                                            State = 2070; valueStmt(22);
                                        }
                                        break;

                                    case 4:
                                        {
                                            _localctx = new VsLeqContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 2071;
                                            if (!(Precpred(_ctx, 20))) throw new FailedPredicateException(this, "Precpred(_ctx, 20)");
                                            State = 2073;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2072; Match(WS);
                                                }
                                            }

                                            State = 2075; Match(LEQ);
                                            State = 2077;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2076; Match(WS);
                                                }
                                            }

                                            State = 2079; valueStmt(21);
                                        }
                                        break;

                                    case 5:
                                        {
                                            _localctx = new VsGtContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 2080;
                                            if (!(Precpred(_ctx, 19))) throw new FailedPredicateException(this, "Precpred(_ctx, 19)");
                                            State = 2082;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2081; Match(WS);
                                                }
                                            }

                                            State = 2084; Match(GT);
                                            State = 2086;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2085; Match(WS);
                                                }
                                            }

                                            State = 2088; valueStmt(20);
                                        }
                                        break;

                                    case 6:
                                        {
                                            _localctx = new VsLtContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 2089;
                                            if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
                                            State = 2091;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2090; Match(WS);
                                                }
                                            }

                                            State = 2093; Match(LT);
                                            State = 2095;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2094; Match(WS);
                                                }
                                            }

                                            State = 2097; valueStmt(19);
                                        }
                                        break;

                                    case 7:
                                        {
                                            _localctx = new VsNeqContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 2098;
                                            if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
                                            State = 2100;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2099; Match(WS);
                                                }
                                            }

                                            State = 2102; Match(NEQ);
                                            State = 2104;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2103; Match(WS);
                                                }
                                            }

                                            State = 2106; valueStmt(18);
                                        }
                                        break;

                                    case 8:
                                        {
                                            _localctx = new VsEqContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 2107;
                                            if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
                                            State = 2109;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2108; Match(WS);
                                                }
                                            }

                                            State = 2111; Match(EQ);
                                            State = 2113;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2112; Match(WS);
                                                }
                                            }

                                            State = 2115; valueStmt(17);
                                        }
                                        break;

                                    case 9:
                                        {
                                            _localctx = new VsAmpContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 2116;
                                            if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
                                            State = 2118;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2117; Match(WS);
                                                }
                                            }

                                            State = 2120; Match(AMPERSAND);
                                            State = 2122;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2121; Match(WS);
                                                }
                                            }

                                            State = 2124; valueStmt(16);
                                        }
                                        break;

                                    case 10:
                                        {
                                            _localctx = new VsAddContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 2125;
                                            if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
                                            State = 2127;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2126; Match(WS);
                                                }
                                            }

                                            State = 2129; Match(PLUS);
                                            State = 2131;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2130; Match(WS);
                                                }
                                            }

                                            State = 2133; valueStmt(13);
                                        }
                                        break;

                                    case 11:
                                        {
                                            _localctx = new VsModContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 2134;
                                            if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
                                            State = 2136;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2135; Match(WS);
                                                }
                                            }

                                            State = 2138; Match(MOD);
                                            State = 2140;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2139; Match(WS);
                                                }
                                            }

                                            State = 2142; valueStmt(12);
                                        }
                                        break;

                                    case 12:
                                        {
                                            _localctx = new VsDivContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 2143;
                                            if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
                                            State = 2145;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2144; Match(WS);
                                                }
                                            }

                                            State = 2147; Match(DIV);
                                            State = 2149;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2148; Match(WS);
                                                }
                                            }

                                            State = 2151; valueStmt(11);
                                        }
                                        break;

                                    case 13:
                                        {
                                            _localctx = new VsMultContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 2152;
                                            if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
                                            State = 2154;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2153; Match(WS);
                                                }
                                            }

                                            State = 2156; Match(MULT);
                                            State = 2158;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2157; Match(WS);
                                                }
                                            }

                                            State = 2160; valueStmt(10);
                                        }
                                        break;

                                    case 14:
                                        {
                                            _localctx = new VsMinusContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 2161;
                                            if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
                                            State = 2163;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2162; Match(WS);
                                                }
                                            }

                                            State = 2165; Match(MINUS);
                                            State = 2167;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2166; Match(WS);
                                                }
                                            }

                                            State = 2169; valueStmt(9);
                                        }
                                        break;

                                    case 15:
                                        {
                                            _localctx = new VsPowContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 2170;
                                            if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
                                            State = 2172;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2171; Match(WS);
                                                }
                                            }

                                            State = 2174; Match(POW);
                                            State = 2176;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2175; Match(WS);
                                                }
                                            }

                                            State = 2178; valueStmt(8);
                                        }
                                        break;

                                    case 16:
                                        {
                                            _localctx = new VsImpContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 2179;
                                            if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
                                            State = 2181;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2180; Match(WS);
                                                }
                                            }

                                            State = 2183; Match(IMP);
                                            State = 2185;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2184; Match(WS);
                                                }
                                            }

                                            State = 2187; valueStmt(7);
                                        }
                                        break;

                                    case 17:
                                        {
                                            _localctx = new VsEqvContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 2188;
                                            if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
                                            State = 2190;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2189; Match(WS);
                                                }
                                            }

                                            State = 2192; Match(EQV);
                                            State = 2194;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2193; Match(WS);
                                                }
                                            }

                                            State = 2196; valueStmt(6);
                                        }
                                        break;

                                    case 18:
                                        {
                                            _localctx = new VsXorContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 2197;
                                            if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
                                            State = 2199;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2198; Match(WS);
                                                }
                                            }

                                            State = 2201; Match(XOR);
                                            State = 2203;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2202; Match(WS);
                                                }
                                            }

                                            State = 2205; valueStmt(5);
                                        }
                                        break;

                                    case 19:
                                        {
                                            _localctx = new VsOrContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 2206;
                                            if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
                                            State = 2208;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2207; Match(WS);
                                                }
                                            }

                                            State = 2210; Match(OR);
                                            State = 2212;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2211; Match(WS);
                                                }
                                            }

                                            State = 2214; valueStmt(4);
                                        }
                                        break;

                                    case 20:
                                        {
                                            _localctx = new VsAndContext(new ValueStmtContext(_parentctx, _parentState));
                                            PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
                                            State = 2215;
                                            if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
                                            State = 2217;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2216; Match(WS);
                                                }
                                            }

                                            State = 2219; Match(AND);
                                            State = 2221;
                                            _la = _input.La(1);
                                            if (_la == WS)
                                            {
                                                {
                                                    State = 2220; Match(WS);
                                                }
                                            }

                                            State = 2223; valueStmt(3);
                                        }
                                        break;
                                }
                            }
                        }
                        State = 2228;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 361, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                UnrollRecursionContexts(_parentctx);
            }
            return _localctx;
        }

        public partial class VariableStmtContext : ParserRuleContext
        {
            public VariableListStmtContext variableListStmt()
            {
                return GetRuleContext<VariableListStmtContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
            public VisibilityContext visibility()
            {
                return GetRuleContext<VisibilityContext>(0);
            }
            public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
            public VariableStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_variableStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVariableStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVariableStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public VariableStmtContext variableStmt()
        {
            VariableStmtContext _localctx = new VariableStmtContext(_ctx, State);
            EnterRule(_localctx, 200, RULE_variableStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2232;
                    switch (_input.La(1))
                    {
                        case DIM:
                            {
                                State = 2229; Match(DIM);
                            }
                            break;
                        case STATIC:
                            {
                                State = 2230; Match(STATIC);
                            }
                            break;
                        case FRIEND:
                        case GLOBAL:
                        case PRIVATE:
                        case PUBLIC:
                            {
                                State = 2231; visibility();
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    State = 2234; Match(WS);
                    State = 2237;
                    switch (Interpreter.AdaptivePredict(_input, 363, _ctx))
                    {
                        case 1:
                            {
                                State = 2235; Match(WITHEVENTS);
                                State = 2236; Match(WS);
                            }
                            break;
                    }
                    State = 2239; variableListStmt();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class VariableListStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<VariableSubStmtContext> variableSubStmt()
            {
                return GetRuleContexts<VariableSubStmtContext>();
            }
            public VariableSubStmtContext variableSubStmt(int i)
            {
                return GetRuleContext<VariableSubStmtContext>(i);
            }
            public VariableListStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_variableListStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVariableListStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVariableListStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public VariableListStmtContext variableListStmt()
        {
            VariableListStmtContext _localctx = new VariableListStmtContext(_ctx, State);
            EnterRule(_localctx, 202, RULE_variableListStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2241; variableSubStmt();
                    State = 2252;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 366, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2243;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2242; Match(WS);
                                        }
                                    }

                                    State = 2245; Match(T__1);
                                    State = 2247;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2246; Match(WS);
                                        }
                                    }

                                    State = 2249; variableSubStmt();
                                }
                            }
                        }
                        State = 2254;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 366, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class VariableSubStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public SubscriptsContext subscripts()
            {
                return GetRuleContext<SubscriptsContext>(0);
            }
            public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_variableSubStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVariableSubStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVariableSubStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public VariableSubStmtContext variableSubStmt()
        {
            VariableSubStmtContext _localctx = new VariableSubStmtContext(_ctx, State);
            EnterRule(_localctx, 204, RULE_variableSubStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2255; ambiguousIdentifier();
                    State = 2273;
                    switch (Interpreter.AdaptivePredict(_input, 372, _ctx))
                    {
                        case 1:
                            {
                                State = 2257;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2256; Match(WS);
                                    }
                                }

                                State = 2259; Match(LPAREN);
                                State = 2261;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2260; Match(WS);
                                    }
                                }

                                State = 2267;
                                _la = _input.La(1);
                                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (LPAREN - 194)) | (1L << (MINUS - 194)) | (1L << (PLUS - 194)) | (1L << (STRINGLITERAL - 194)) | (1L << (OCTLITERAL - 194)) | (1L << (HEXLITERAL - 194)) | (1L << (SHORTLITERAL - 194)) | (1L << (INTEGERLITERAL - 194)) | (1L << (DOUBLELITERAL - 194)) | (1L << (DATELITERAL - 194)) | (1L << (IDENTIFIER - 194)))) != 0))
                                {
                                    {
                                        State = 2263; subscripts();
                                        State = 2265;
                                        _la = _input.La(1);
                                        if (_la == WS)
                                        {
                                            {
                                                State = 2264; Match(WS);
                                            }
                                        }

                                    }
                                }

                                State = 2269; Match(RPAREN);
                                State = 2271;
                                switch (Interpreter.AdaptivePredict(_input, 371, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 2270; Match(WS);
                                        }
                                        break;
                                }
                            }
                            break;
                    }
                    State = 2276;
                    switch (Interpreter.AdaptivePredict(_input, 373, _ctx))
                    {
                        case 1:
                            {
                                State = 2275; typeHint();
                            }
                            break;
                    }
                    State = 2280;
                    switch (Interpreter.AdaptivePredict(_input, 374, _ctx))
                    {
                        case 1:
                            {
                                State = 2278; Match(WS);
                                State = 2279; asTypeClause();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class WhileWendStmtContext : ParserRuleContext
        {
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public BlockContext block(int i)
            {
                return GetRuleContext<BlockContext>(i);
            }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
            public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
            public IReadOnlyList<BlockContext> block()
            {
                return GetRuleContexts<BlockContext>();
            }
            public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_whileWendStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterWhileWendStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitWhileWendStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public WhileWendStmtContext whileWendStmt()
        {
            WhileWendStmtContext _localctx = new WhileWendStmtContext(_ctx, State);
            EnterRule(_localctx, 206, RULE_whileWendStmt);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2282; Match(WHILE);
                    State = 2283; Match(WS);
                    State = 2284; valueStmt(0);
                    State = 2286;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 2285; Match(NEWLINE);
                            }
                        }
                        State = 2288;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == NEWLINE);
                    State = 2295;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 376, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2290; block();
                                    State = 2291; Match(NEWLINE);
                                }
                            }
                        }
                        State = 2297;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 376, _ctx);
                    }
                    State = 2298; Match(WEND);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class WidthStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public WidthStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_widthStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterWidthStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitWidthStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public WidthStmtContext widthStmt()
        {
            WidthStmtContext _localctx = new WidthStmtContext(_ctx, State);
            EnterRule(_localctx, 208, RULE_widthStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2300; Match(WIDTH);
                    State = 2301; Match(WS);
                    State = 2302; fileNumber();
                    State = 2304;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2303; Match(WS);
                        }
                    }

                    State = 2306; Match(T__1);
                    State = 2308;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2307; Match(WS);
                        }
                    }

                    State = 2310; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class WithStmtContext : ParserRuleContext
        {
            public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode END_WITH() { return GetToken(VBAParser.END_WITH, 0); }
            public IReadOnlyList<ITerminalNode> NEWLINE() { return GetTokens(VBAParser.NEWLINE); }
            public ITerminalNode NEWLINE(int i)
            {
                return GetToken(VBAParser.NEWLINE, i);
            }
            public TypeContext type()
            {
                return GetRuleContext<TypeContext>(0);
            }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public BlockContext block()
            {
                return GetRuleContext<BlockContext>(0);
            }
            public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
            public WithStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_withStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterWithStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitWithStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public WithStmtContext withStmt()
        {
            WithStmtContext _localctx = new WithStmtContext(_ctx, State);
            EnterRule(_localctx, 210, RULE_withStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2312; Match(WITH);
                    State = 2313; Match(WS);
                    State = 2318;
                    switch (Interpreter.AdaptivePredict(_input, 379, _ctx))
                    {
                        case 1:
                            {
                                State = 2314; implicitCallStmt_InStmt();
                            }
                            break;

                        case 2:
                            {
                                {
                                    State = 2315; Match(NEW);
                                    State = 2316; Match(WS);
                                    State = 2317; type();
                                }
                            }
                            break;
                    }
                    State = 2321;
                    _errHandler.Sync(this);
                    _la = _input.La(1);
                    do
                    {
                        {
                            {
                                State = 2320; Match(NEWLINE);
                            }
                        }
                        State = 2323;
                        _errHandler.Sync(this);
                        _la = _input.La(1);
                    } while (_la == NEWLINE);
                    State = 2331;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (EXIT_DO - 64)) | (1L << (EXIT_FOR - 64)) | (1L << (EXIT_FUNCTION - 64)) | (1L << (EXIT_PROPERTY - 64)) | (1L << (EXIT_SUB - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (ON_LOCAL_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la == IDENTIFIER)
                    {
                        {
                            State = 2325; block();
                            State = 2327;
                            _errHandler.Sync(this);
                            _la = _input.La(1);
                            do
                            {
                                {
                                    {
                                        State = 2326; Match(NEWLINE);
                                    }
                                }
                                State = 2329;
                                _errHandler.Sync(this);
                                _la = _input.La(1);
                            } while (_la == NEWLINE);
                        }
                    }

                    State = 2333; Match(END_WITH);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class WriteStmtContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public OutputListContext outputList()
            {
                return GetRuleContext<OutputListContext>(0);
            }
            public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
            public FileNumberContext fileNumber()
            {
                return GetRuleContext<FileNumberContext>(0);
            }
            public WriteStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_writeStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterWriteStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitWriteStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public WriteStmtContext writeStmt()
        {
            WriteStmtContext _localctx = new WriteStmtContext(_ctx, State);
            EnterRule(_localctx, 212, RULE_writeStmt);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2335; Match(WRITE);
                    State = 2336; Match(WS);
                    State = 2337; fileNumber();
                    State = 2339;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2338; Match(WS);
                        }
                    }

                    State = 2341; Match(T__1);
                    State = 2346;
                    switch (Interpreter.AdaptivePredict(_input, 385, _ctx))
                    {
                        case 1:
                            {
                                State = 2343;
                                switch (Interpreter.AdaptivePredict(_input, 384, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 2342; Match(WS);
                                        }
                                        break;
                                }
                                State = 2345; outputList();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class FileNumberContext : ParserRuleContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public FileNumberContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_fileNumber; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterFileNumber(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitFileNumber(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFileNumber(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public FileNumberContext fileNumber()
        {
            FileNumberContext _localctx = new FileNumberContext(_ctx, State);
            EnterRule(_localctx, 214, RULE_fileNumber);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2349;
                    _la = _input.La(1);
                    if (_la == T__6)
                    {
                        {
                            State = 2348; Match(T__6);
                        }
                    }

                    State = 2351; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ExplicitCallStmtContext : ParserRuleContext
        {
            public ECS_ProcedureCallContext eCS_ProcedureCall()
            {
                return GetRuleContext<ECS_ProcedureCallContext>(0);
            }
            public ECS_MemberProcedureCallContext eCS_MemberProcedureCall()
            {
                return GetRuleContext<ECS_MemberProcedureCallContext>(0);
            }
            public ExplicitCallStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_explicitCallStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterExplicitCallStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitExplicitCallStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitExplicitCallStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ExplicitCallStmtContext explicitCallStmt()
        {
            ExplicitCallStmtContext _localctx = new ExplicitCallStmtContext(_ctx, State);
            EnterRule(_localctx, 216, RULE_explicitCallStmt);
            try
            {
                State = 2355;
                switch (Interpreter.AdaptivePredict(_input, 387, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 2353; eCS_ProcedureCall();
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 2354; eCS_MemberProcedureCall();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ECS_ProcedureCallContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode RPAREN(int i)
            {
                return GetToken(VBAParser.RPAREN, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
            public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
            public IReadOnlyList<SubscriptsContext> subscripts()
            {
                return GetRuleContexts<SubscriptsContext>();
            }
            public SubscriptsContext subscripts(int i)
            {
                return GetRuleContext<SubscriptsContext>(i);
            }
            public ITerminalNode LPAREN(int i)
            {
                return GetToken(VBAParser.LPAREN, i);
            }
            public ECS_ProcedureCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_eCS_ProcedureCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterECS_ProcedureCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitECS_ProcedureCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitECS_ProcedureCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ECS_ProcedureCallContext eCS_ProcedureCall()
        {
            ECS_ProcedureCallContext _localctx = new ECS_ProcedureCallContext(_ctx, State);
            EnterRule(_localctx, 218, RULE_eCS_ProcedureCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2357; Match(CALL);
                    State = 2358; Match(WS);
                    State = 2359; ambiguousIdentifier();
                    State = 2361;
                    switch (Interpreter.AdaptivePredict(_input, 388, _ctx))
                    {
                        case 1:
                            {
                                State = 2360; typeHint();
                            }
                            break;
                    }
                    State = 2376;
                    switch (Interpreter.AdaptivePredict(_input, 392, _ctx))
                    {
                        case 1:
                            {
                                State = 2364;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2363; Match(WS);
                                    }
                                }

                                State = 2366; Match(LPAREN);
                                State = 2368;
                                switch (Interpreter.AdaptivePredict(_input, 390, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 2367; Match(WS);
                                        }
                                        break;
                                }
                                State = 2370; argsCall();
                                State = 2372;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2371; Match(WS);
                                    }
                                }

                                State = 2374; Match(RPAREN);
                            }
                            break;
                    }
                    State = 2387;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 394, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2379;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2378; Match(WS);
                                        }
                                    }

                                    State = 2381; Match(LPAREN);
                                    State = 2382; subscripts();
                                    State = 2383; Match(RPAREN);
                                }
                            }
                        }
                        State = 2389;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 394, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ECS_MemberProcedureCallContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public SubscriptsContext subscripts(int i)
            {
                return GetRuleContext<SubscriptsContext>(i);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode RPAREN(int i)
            {
                return GetToken(VBAParser.RPAREN, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public IReadOnlyList<SubscriptsContext> subscripts()
            {
                return GetRuleContexts<SubscriptsContext>();
            }
            public ITerminalNode LPAREN(int i)
            {
                return GetToken(VBAParser.LPAREN, i);
            }
            public ECS_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_eCS_MemberProcedureCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterECS_MemberProcedureCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitECS_MemberProcedureCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitECS_MemberProcedureCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ECS_MemberProcedureCallContext eCS_MemberProcedureCall()
        {
            ECS_MemberProcedureCallContext _localctx = new ECS_MemberProcedureCallContext(_ctx, State);
            EnterRule(_localctx, 220, RULE_eCS_MemberProcedureCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2390; Match(CALL);
                    State = 2391; Match(WS);
                    State = 2393;
                    switch (Interpreter.AdaptivePredict(_input, 395, _ctx))
                    {
                        case 1:
                            {
                                State = 2392; implicitCallStmt_InStmt();
                            }
                            break;
                    }
                    State = 2395; Match(T__0);
                    State = 2396; ambiguousIdentifier();
                    State = 2398;
                    switch (Interpreter.AdaptivePredict(_input, 396, _ctx))
                    {
                        case 1:
                            {
                                State = 2397; typeHint();
                            }
                            break;
                    }
                    State = 2413;
                    switch (Interpreter.AdaptivePredict(_input, 400, _ctx))
                    {
                        case 1:
                            {
                                State = 2401;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2400; Match(WS);
                                    }
                                }

                                State = 2403; Match(LPAREN);
                                State = 2405;
                                switch (Interpreter.AdaptivePredict(_input, 398, _ctx))
                                {
                                    case 1:
                                        {
                                            State = 2404; Match(WS);
                                        }
                                        break;
                                }
                                State = 2407; argsCall();
                                State = 2409;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2408; Match(WS);
                                    }
                                }

                                State = 2411; Match(RPAREN);
                            }
                            break;
                    }
                    State = 2424;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 402, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2416;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2415; Match(WS);
                                        }
                                    }

                                    State = 2418; Match(LPAREN);
                                    State = 2419; subscripts();
                                    State = 2420; Match(RPAREN);
                                }
                            }
                        }
                        State = 2426;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 402, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ImplicitCallStmt_InBlockContext : ParserRuleContext
        {
            public ICS_B_ProcedureCallContext iCS_B_ProcedureCall()
            {
                return GetRuleContext<ICS_B_ProcedureCallContext>(0);
            }
            public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall()
            {
                return GetRuleContext<ICS_B_MemberProcedureCallContext>(0);
            }
            public ImplicitCallStmt_InBlockContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_implicitCallStmt_InBlock; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterImplicitCallStmt_InBlock(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitImplicitCallStmt_InBlock(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InBlock(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock()
        {
            ImplicitCallStmt_InBlockContext _localctx = new ImplicitCallStmt_InBlockContext(_ctx, State);
            EnterRule(_localctx, 222, RULE_implicitCallStmt_InBlock);
            try
            {
                State = 2429;
                switch (Interpreter.AdaptivePredict(_input, 403, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 2427; iCS_B_MemberProcedureCall();
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 2428; iCS_B_ProcedureCall();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ICS_B_MemberProcedureCallContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
            public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
            {
                return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
            }
            public SubscriptsContext subscripts(int i)
            {
                return GetRuleContext<SubscriptsContext>(i);
            }
            public DictionaryCallStmtContext dictionaryCallStmt()
            {
                return GetRuleContext<DictionaryCallStmtContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode RPAREN(int i)
            {
                return GetToken(VBAParser.RPAREN, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public IReadOnlyList<SubscriptsContext> subscripts()
            {
                return GetRuleContexts<SubscriptsContext>();
            }
            public ITerminalNode LPAREN(int i)
            {
                return GetToken(VBAParser.LPAREN, i);
            }
            public ICS_B_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iCS_B_MemberProcedureCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterICS_B_MemberProcedureCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitICS_B_MemberProcedureCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitICS_B_MemberProcedureCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall()
        {
            ICS_B_MemberProcedureCallContext _localctx = new ICS_B_MemberProcedureCallContext(_ctx, State);
            EnterRule(_localctx, 224, RULE_iCS_B_MemberProcedureCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2432;
                    switch (Interpreter.AdaptivePredict(_input, 404, _ctx))
                    {
                        case 1:
                            {
                                State = 2431; implicitCallStmt_InStmt();
                            }
                            break;
                    }
                    State = 2434; Match(T__0);
                    State = 2435; ambiguousIdentifier();
                    State = 2437;
                    switch (Interpreter.AdaptivePredict(_input, 405, _ctx))
                    {
                        case 1:
                            {
                                State = 2436; typeHint();
                            }
                            break;
                    }
                    State = 2441;
                    switch (Interpreter.AdaptivePredict(_input, 406, _ctx))
                    {
                        case 1:
                            {
                                State = 2439; Match(WS);
                                State = 2440; argsCall();
                            }
                            break;
                    }
                    State = 2444;
                    switch (Interpreter.AdaptivePredict(_input, 407, _ctx))
                    {
                        case 1:
                            {
                                State = 2443; dictionaryCallStmt();
                            }
                            break;
                    }
                    State = 2455;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 409, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2447;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2446; Match(WS);
                                        }
                                    }

                                    State = 2449; Match(LPAREN);
                                    State = 2450; subscripts();
                                    State = 2451; Match(RPAREN);
                                }
                            }
                        }
                        State = 2457;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 409, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ICS_B_ProcedureCallContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode RPAREN(int i)
            {
                return GetToken(VBAParser.RPAREN, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
            public CertainIdentifierContext certainIdentifier()
            {
                return GetRuleContext<CertainIdentifierContext>(0);
            }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
            public IReadOnlyList<SubscriptsContext> subscripts()
            {
                return GetRuleContexts<SubscriptsContext>();
            }
            public SubscriptsContext subscripts(int i)
            {
                return GetRuleContext<SubscriptsContext>(i);
            }
            public ITerminalNode LPAREN(int i)
            {
                return GetToken(VBAParser.LPAREN, i);
            }
            public ICS_B_ProcedureCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iCS_B_ProcedureCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterICS_B_ProcedureCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitICS_B_ProcedureCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitICS_B_ProcedureCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ICS_B_ProcedureCallContext iCS_B_ProcedureCall()
        {
            ICS_B_ProcedureCallContext _localctx = new ICS_B_ProcedureCallContext(_ctx, State);
            EnterRule(_localctx, 226, RULE_iCS_B_ProcedureCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2458; certainIdentifier();
                    State = 2461;
                    switch (Interpreter.AdaptivePredict(_input, 410, _ctx))
                    {
                        case 1:
                            {
                                State = 2459; Match(WS);
                                State = 2460; argsCall();
                            }
                            break;
                    }
                    State = 2472;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 412, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2464;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2463; Match(WS);
                                        }
                                    }

                                    State = 2466; Match(LPAREN);
                                    State = 2467; subscripts();
                                    State = 2468; Match(RPAREN);
                                }
                            }
                        }
                        State = 2474;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 412, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ImplicitCallStmt_InStmtContext : ParserRuleContext
        {
            public ICS_S_MembersCallContext iCS_S_MembersCall()
            {
                return GetRuleContext<ICS_S_MembersCallContext>(0);
            }
            public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall()
            {
                return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
            }
            public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall()
            {
                return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
            }
            public ICS_S_DictionaryCallContext iCS_S_DictionaryCall()
            {
                return GetRuleContext<ICS_S_DictionaryCallContext>(0);
            }
            public ImplicitCallStmt_InStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_implicitCallStmt_InStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterImplicitCallStmt_InStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitImplicitCallStmt_InStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt()
        {
            ImplicitCallStmt_InStmtContext _localctx = new ImplicitCallStmt_InStmtContext(_ctx, State);
            EnterRule(_localctx, 228, RULE_implicitCallStmt_InStmt);
            try
            {
                State = 2479;
                switch (Interpreter.AdaptivePredict(_input, 413, _ctx))
                {
                    case 1:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 2475; iCS_S_MembersCall();
                        }
                        break;

                    case 2:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 2476; iCS_S_VariableOrProcedureCall();
                        }
                        break;

                    case 3:
                        EnterOuterAlt(_localctx, 3);
                        {
                            State = 2477; iCS_S_ProcedureOrArrayCall();
                        }
                        break;

                    case 4:
                        EnterOuterAlt(_localctx, 4);
                        {
                            State = 2478; iCS_S_DictionaryCall();
                        }
                        break;
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ICS_S_VariableOrProcedureCallContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode RPAREN(int i)
            {
                return GetToken(VBAParser.RPAREN, i);
            }
            public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
            public IReadOnlyList<SubscriptsContext> subscripts()
            {
                return GetRuleContexts<SubscriptsContext>();
            }
            public SubscriptsContext subscripts(int i)
            {
                return GetRuleContext<SubscriptsContext>(i);
            }
            public DictionaryCallStmtContext dictionaryCallStmt()
            {
                return GetRuleContext<DictionaryCallStmtContext>(0);
            }
            public ITerminalNode LPAREN(int i)
            {
                return GetToken(VBAParser.LPAREN, i);
            }
            public ICS_S_VariableOrProcedureCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall()
        {
            ICS_S_VariableOrProcedureCallContext _localctx = new ICS_S_VariableOrProcedureCallContext(_ctx, State);
            EnterRule(_localctx, 230, RULE_iCS_S_VariableOrProcedureCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2481; ambiguousIdentifier();
                    State = 2483;
                    switch (Interpreter.AdaptivePredict(_input, 414, _ctx))
                    {
                        case 1:
                            {
                                State = 2482; typeHint();
                            }
                            break;
                    }
                    State = 2486;
                    switch (Interpreter.AdaptivePredict(_input, 415, _ctx))
                    {
                        case 1:
                            {
                                State = 2485; dictionaryCallStmt();
                            }
                            break;
                    }
                    State = 2497;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 417, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2489;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2488; Match(WS);
                                        }
                                    }

                                    State = 2491; Match(LPAREN);
                                    State = 2492; subscripts();
                                    State = 2493; Match(RPAREN);
                                }
                            }
                        }
                        State = 2499;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 417, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ICS_S_ProcedureOrArrayCallContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
            public ArgsCallContext argsCall()
            {
                return GetRuleContext<ArgsCallContext>(0);
            }
            public BaseTypeContext baseType()
            {
                return GetRuleContext<BaseTypeContext>(0);
            }
            public SubscriptsContext subscripts(int i)
            {
                return GetRuleContext<SubscriptsContext>(i);
            }
            public DictionaryCallStmtContext dictionaryCallStmt()
            {
                return GetRuleContext<DictionaryCallStmtContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode RPAREN(int i)
            {
                return GetToken(VBAParser.RPAREN, i);
            }
            public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public IReadOnlyList<SubscriptsContext> subscripts()
            {
                return GetRuleContexts<SubscriptsContext>();
            }
            public ITerminalNode LPAREN(int i)
            {
                return GetToken(VBAParser.LPAREN, i);
            }
            public ICS_S_ProcedureOrArrayCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall()
        {
            ICS_S_ProcedureOrArrayCallContext _localctx = new ICS_S_ProcedureOrArrayCallContext(_ctx, State);
            EnterRule(_localctx, 232, RULE_iCS_S_ProcedureOrArrayCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2502;
                    switch (Interpreter.AdaptivePredict(_input, 418, _ctx))
                    {
                        case 1:
                            {
                                State = 2500; ambiguousIdentifier();
                            }
                            break;

                        case 2:
                            {
                                State = 2501; baseType();
                            }
                            break;
                    }
                    State = 2505;
                    _la = _input.La(1);
                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4))) != 0) || _la == AMPERSAND)
                    {
                        {
                            State = 2504; typeHint();
                        }
                    }

                    State = 2508;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2507; Match(WS);
                        }
                    }

                    State = 2510; Match(LPAREN);
                    State = 2512;
                    switch (Interpreter.AdaptivePredict(_input, 421, _ctx))
                    {
                        case 1:
                            {
                                State = 2511; Match(WS);
                            }
                            break;
                    }
                    State = 2518;
                    switch (Interpreter.AdaptivePredict(_input, 423, _ctx))
                    {
                        case 1:
                            {
                                State = 2514; argsCall();
                                State = 2516;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2515; Match(WS);
                                    }
                                }

                            }
                            break;
                    }
                    State = 2520; Match(RPAREN);
                    State = 2522;
                    switch (Interpreter.AdaptivePredict(_input, 424, _ctx))
                    {
                        case 1:
                            {
                                State = 2521; dictionaryCallStmt();
                            }
                            break;
                    }
                    State = 2533;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 426, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2525;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2524; Match(WS);
                                        }
                                    }

                                    State = 2527; Match(LPAREN);
                                    State = 2528; subscripts();
                                    State = 2529; Match(RPAREN);
                                }
                            }
                        }
                        State = 2535;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 426, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ICS_S_MembersCallContext : ParserRuleContext
        {
            public ICS_S_MemberCallContext iCS_S_MemberCall(int i)
            {
                return GetRuleContext<ICS_S_MemberCallContext>(i);
            }
            public IReadOnlyList<ITerminalNode> RPAREN() { return GetTokens(VBAParser.RPAREN); }
            public SubscriptsContext subscripts(int i)
            {
                return GetRuleContext<SubscriptsContext>(i);
            }
            public IReadOnlyList<ICS_S_MemberCallContext> iCS_S_MemberCall()
            {
                return GetRuleContexts<ICS_S_MemberCallContext>();
            }
            public DictionaryCallStmtContext dictionaryCallStmt()
            {
                return GetRuleContext<DictionaryCallStmtContext>(0);
            }
            public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall()
            {
                return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
            }
            public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall()
            {
                return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode RPAREN(int i)
            {
                return GetToken(VBAParser.RPAREN, i);
            }
            public IReadOnlyList<ITerminalNode> LPAREN() { return GetTokens(VBAParser.LPAREN); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<SubscriptsContext> subscripts()
            {
                return GetRuleContexts<SubscriptsContext>();
            }
            public ITerminalNode LPAREN(int i)
            {
                return GetToken(VBAParser.LPAREN, i);
            }
            public ICS_S_MembersCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iCS_S_MembersCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterICS_S_MembersCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitICS_S_MembersCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitICS_S_MembersCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ICS_S_MembersCallContext iCS_S_MembersCall()
        {
            ICS_S_MembersCallContext _localctx = new ICS_S_MembersCallContext(_ctx, State);
            EnterRule(_localctx, 234, RULE_iCS_S_MembersCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2538;
                    switch (Interpreter.AdaptivePredict(_input, 427, _ctx))
                    {
                        case 1:
                            {
                                State = 2536; iCS_S_VariableOrProcedureCall();
                            }
                            break;

                        case 2:
                            {
                                State = 2537; iCS_S_ProcedureOrArrayCall();
                            }
                            break;
                    }
                    State = 2541;
                    _errHandler.Sync(this);
                    _alt = 1;
                    do
                    {
                        switch (_alt)
                        {
                            case 1:
                                {
                                    {
                                        State = 2540; iCS_S_MemberCall();
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 2543;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 428, _ctx);
                    } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                    State = 2546;
                    switch (Interpreter.AdaptivePredict(_input, 429, _ctx))
                    {
                        case 1:
                            {
                                State = 2545; dictionaryCallStmt();
                            }
                            break;
                    }
                    State = 2557;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 431, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2549;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2548; Match(WS);
                                        }
                                    }

                                    State = 2551; Match(LPAREN);
                                    State = 2552; subscripts();
                                    State = 2553; Match(RPAREN);
                                }
                            }
                        }
                        State = 2559;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 431, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ICS_S_MemberCallContext : ParserRuleContext
        {
            public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall()
            {
                return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
            }
            public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall()
            {
                return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
            }
            public ICS_S_MemberCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iCS_S_MemberCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterICS_S_MemberCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitICS_S_MemberCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitICS_S_MemberCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ICS_S_MemberCallContext iCS_S_MemberCall()
        {
            ICS_S_MemberCallContext _localctx = new ICS_S_MemberCallContext(_ctx, State);
            EnterRule(_localctx, 236, RULE_iCS_S_MemberCall);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2560;
                    _la = _input.La(1);
                    if (!(_la == T__7 || _la == T__0))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                    State = 2563;
                    switch (Interpreter.AdaptivePredict(_input, 432, _ctx))
                    {
                        case 1:
                            {
                                State = 2561; iCS_S_VariableOrProcedureCall();
                            }
                            break;

                        case 2:
                            {
                                State = 2562; iCS_S_ProcedureOrArrayCall();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ICS_S_DictionaryCallContext : ParserRuleContext
        {
            public DictionaryCallStmtContext dictionaryCallStmt()
            {
                return GetRuleContext<DictionaryCallStmtContext>(0);
            }
            public ICS_S_DictionaryCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_iCS_S_DictionaryCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterICS_S_DictionaryCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitICS_S_DictionaryCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitICS_S_DictionaryCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ICS_S_DictionaryCallContext iCS_S_DictionaryCall()
        {
            ICS_S_DictionaryCallContext _localctx = new ICS_S_DictionaryCallContext(_ctx, State);
            EnterRule(_localctx, 238, RULE_iCS_S_DictionaryCall);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2565; dictionaryCallStmt();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ArgsCallContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ArgCallContext> argCall()
            {
                return GetRuleContexts<ArgCallContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ArgCallContext argCall(int i)
            {
                return GetRuleContext<ArgCallContext>(i);
            }
            public ArgsCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_argsCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterArgsCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitArgsCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArgsCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ArgsCallContext argsCall()
        {
            ArgsCallContext _localctx = new ArgsCallContext(_ctx, State);
            EnterRule(_localctx, 240, RULE_argsCall);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2579;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 436, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2568;
                                    _la = _input.La(1);
                                    if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__0) | (1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (LPAREN - 194)) | (1L << (MINUS - 194)) | (1L << (PLUS - 194)) | (1L << (RPAREN - 194)) | (1L << (STRINGLITERAL - 194)) | (1L << (OCTLITERAL - 194)) | (1L << (HEXLITERAL - 194)) | (1L << (SHORTLITERAL - 194)) | (1L << (INTEGERLITERAL - 194)) | (1L << (DOUBLELITERAL - 194)) | (1L << (DATELITERAL - 194)) | (1L << (IDENTIFIER - 194)))) != 0))
                                    {
                                        {
                                            State = 2567; argCall();
                                        }
                                    }

                                    State = 2571;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2570; Match(WS);
                                        }
                                    }

                                    State = 2573;
                                    _la = _input.La(1);
                                    if (!(_la == T__2 || _la == T__1))
                                    {
                                        _errHandler.RecoverInline(this);
                                    }
                                    Consume();
                                    State = 2575;
                                    switch (Interpreter.AdaptivePredict(_input, 435, _ctx))
                                    {
                                        case 1:
                                            {
                                                State = 2574; Match(WS);
                                            }
                                            break;
                                    }
                                }
                            }
                        }
                        State = 2581;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 436, _ctx);
                    }
                    State = 2582; argCall();
                    State = 2595;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 440, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2584;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2583; Match(WS);
                                        }
                                    }

                                    State = 2586;
                                    _la = _input.La(1);
                                    if (!(_la == T__2 || _la == T__1))
                                    {
                                        _errHandler.RecoverInline(this);
                                    }
                                    Consume();
                                    State = 2588;
                                    switch (Interpreter.AdaptivePredict(_input, 438, _ctx))
                                    {
                                        case 1:
                                            {
                                                State = 2587; Match(WS);
                                            }
                                            break;
                                    }
                                    State = 2591;
                                    switch (Interpreter.AdaptivePredict(_input, 439, _ctx))
                                    {
                                        case 1:
                                            {
                                                State = 2590; argCall();
                                            }
                                            break;
                                    }
                                }
                            }
                        }
                        State = 2597;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 440, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ArgCallContext : ParserRuleContext
        {
            public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
            public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
            public ArgCallContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_argCall; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterArgCall(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitArgCall(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArgCall(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ArgCallContext argCall()
        {
            ArgCallContext _localctx = new ArgCallContext(_ctx, State);
            EnterRule(_localctx, 242, RULE_argCall);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2599;
                    switch (Interpreter.AdaptivePredict(_input, 441, _ctx))
                    {
                        case 1:
                            {
                                State = 2598; Match(LPAREN);
                            }
                            break;
                    }
                    State = 2603;
                    switch (Interpreter.AdaptivePredict(_input, 442, _ctx))
                    {
                        case 1:
                            {
                                State = 2601;
                                _la = _input.La(1);
                                if (!(_la == BYVAL || _la == BYREF || _la == PARAMARRAY))
                                {
                                    _errHandler.RecoverInline(this);
                                }
                                Consume();
                                State = 2602; Match(WS);
                            }
                            break;
                    }
                    State = 2606;
                    _la = _input.La(1);
                    if (_la == RPAREN)
                    {
                        {
                            State = 2605; Match(RPAREN);
                        }
                    }

                    State = 2608; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class DictionaryCallStmtContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public TypeHintContext typeHint()
            {
                return GetRuleContext<TypeHintContext>(0);
            }
            public DictionaryCallStmtContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_dictionaryCallStmt; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterDictionaryCallStmt(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitDictionaryCallStmt(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitDictionaryCallStmt(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public DictionaryCallStmtContext dictionaryCallStmt()
        {
            DictionaryCallStmtContext _localctx = new DictionaryCallStmtContext(_ctx, State);
            EnterRule(_localctx, 244, RULE_dictionaryCallStmt);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2610; Match(T__7);
                    State = 2611; ambiguousIdentifier();
                    State = 2613;
                    switch (Interpreter.AdaptivePredict(_input, 444, _ctx))
                    {
                        case 1:
                            {
                                State = 2612; typeHint();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ArgListContext : ParserRuleContext
        {
            public ArgContext arg(int i)
            {
                return GetRuleContext<ArgContext>(i);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public IReadOnlyList<ArgContext> arg()
            {
                return GetRuleContexts<ArgContext>();
            }
            public ArgListContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_argList; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterArgList(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitArgList(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArgList(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ArgListContext argList()
        {
            ArgListContext _localctx = new ArgListContext(_ctx, State);
            EnterRule(_localctx, 246, RULE_argList);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2615; Match(LPAREN);
                    State = 2633;
                    switch (Interpreter.AdaptivePredict(_input, 449, _ctx))
                    {
                        case 1:
                            {
                                State = 2617;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2616; Match(WS);
                                    }
                                }

                                State = 2619; arg();
                                State = 2630;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 448, _ctx);
                                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                                {
                                    if (_alt == 1)
                                    {
                                        {
                                            {
                                                State = 2621;
                                                _la = _input.La(1);
                                                if (_la == WS)
                                                {
                                                    {
                                                        State = 2620; Match(WS);
                                                    }
                                                }

                                                State = 2623; Match(T__1);
                                                State = 2625;
                                                _la = _input.La(1);
                                                if (_la == WS)
                                                {
                                                    {
                                                        State = 2624; Match(WS);
                                                    }
                                                }

                                                State = 2627; arg();
                                            }
                                        }
                                    }
                                    State = 2632;
                                    _errHandler.Sync(this);
                                    _alt = Interpreter.AdaptivePredict(_input, 448, _ctx);
                                }
                            }
                            break;
                    }
                    State = 2636;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2635; Match(WS);
                        }
                    }

                    State = 2638; Match(RPAREN);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ArgContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ArgDefaultValueContext argDefaultValue()
            {
                return GetRuleContext<ArgDefaultValueContext>(0);
            }
            public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
            public AsTypeClauseContext asTypeClause()
            {
                return GetRuleContext<AsTypeClauseContext>(0);
            }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
            public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
            public ArgContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_arg; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterArg(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitArg(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArg(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ArgContext arg()
        {
            ArgContext _localctx = new ArgContext(_ctx, State);
            EnterRule(_localctx, 248, RULE_arg);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2642;
                    switch (Interpreter.AdaptivePredict(_input, 451, _ctx))
                    {
                        case 1:
                            {
                                State = 2640; Match(OPTIONAL);
                                State = 2641; Match(WS);
                            }
                            break;
                    }
                    State = 2646;
                    switch (Interpreter.AdaptivePredict(_input, 452, _ctx))
                    {
                        case 1:
                            {
                                State = 2644;
                                _la = _input.La(1);
                                if (!(_la == BYVAL || _la == BYREF))
                                {
                                    _errHandler.RecoverInline(this);
                                }
                                Consume();
                                State = 2645; Match(WS);
                            }
                            break;
                    }
                    State = 2650;
                    switch (Interpreter.AdaptivePredict(_input, 453, _ctx))
                    {
                        case 1:
                            {
                                State = 2648; Match(PARAMARRAY);
                                State = 2649; Match(WS);
                            }
                            break;
                    }
                    State = 2652; ambiguousIdentifier();
                    State = 2661;
                    switch (Interpreter.AdaptivePredict(_input, 456, _ctx))
                    {
                        case 1:
                            {
                                State = 2654;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2653; Match(WS);
                                    }
                                }

                                State = 2656; Match(LPAREN);
                                State = 2658;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2657; Match(WS);
                                    }
                                }

                                State = 2660; Match(RPAREN);
                            }
                            break;
                    }
                    State = 2667;
                    switch (Interpreter.AdaptivePredict(_input, 458, _ctx))
                    {
                        case 1:
                            {
                                State = 2664;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2663; Match(WS);
                                    }
                                }

                                State = 2666; asTypeClause();
                            }
                            break;
                    }
                    State = 2673;
                    switch (Interpreter.AdaptivePredict(_input, 460, _ctx))
                    {
                        case 1:
                            {
                                State = 2670;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2669; Match(WS);
                                    }
                                }

                                State = 2672; argDefaultValue();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ArgDefaultValueContext : ParserRuleContext
        {
            public ValueStmtContext valueStmt()
            {
                return GetRuleContext<ValueStmtContext>(0);
            }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_argDefaultValue; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterArgDefaultValue(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitArgDefaultValue(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ArgDefaultValueContext argDefaultValue()
        {
            ArgDefaultValueContext _localctx = new ArgDefaultValueContext(_ctx, State);
            EnterRule(_localctx, 250, RULE_argDefaultValue);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2675; Match(EQ);
                    State = 2677;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2676; Match(WS);
                        }
                    }

                    State = 2679; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SubscriptsContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<SubscriptContext> subscript()
            {
                return GetRuleContexts<SubscriptContext>();
            }
            public SubscriptContext subscript(int i)
            {
                return GetRuleContext<SubscriptContext>(i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public SubscriptsContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_subscripts; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSubscripts(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSubscripts(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SubscriptsContext subscripts()
        {
            SubscriptsContext _localctx = new SubscriptsContext(_ctx, State);
            EnterRule(_localctx, 252, RULE_subscripts);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2681; subscript();
                    State = 2692;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 464, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2683;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2682; Match(WS);
                                        }
                                    }

                                    State = 2685; Match(T__1);
                                    State = 2687;
                                    _la = _input.La(1);
                                    if (_la == WS)
                                    {
                                        {
                                            State = 2686; Match(WS);
                                        }
                                    }

                                    State = 2689; subscript();
                                }
                            }
                        }
                        State = 2694;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 464, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class SubscriptContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ValueStmtContext> valueStmt()
            {
                return GetRuleContexts<ValueStmtContext>();
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
            public ValueStmtContext valueStmt(int i)
            {
                return GetRuleContext<ValueStmtContext>(i);
            }
            public SubscriptContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_subscript; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterSubscript(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitSubscript(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public SubscriptContext subscript()
        {
            SubscriptContext _localctx = new SubscriptContext(_ctx, State);
            EnterRule(_localctx, 254, RULE_subscript);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2700;
                    switch (Interpreter.AdaptivePredict(_input, 465, _ctx))
                    {
                        case 1:
                            {
                                State = 2695; valueStmt(0);
                                State = 2696; Match(WS);
                                State = 2697; Match(TO);
                                State = 2698; Match(WS);
                            }
                            break;
                    }
                    State = 2702; valueStmt(0);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class AmbiguousIdentifierContext : ParserRuleContext
        {
            public AmbiguousKeywordContext ambiguousKeyword(int i)
            {
                return GetRuleContext<AmbiguousKeywordContext>(i);
            }
            public ITerminalNode IDENTIFIER(int i)
            {
                return GetToken(VBAParser.IDENTIFIER, i);
            }
            public IReadOnlyList<AmbiguousKeywordContext> ambiguousKeyword()
            {
                return GetRuleContexts<AmbiguousKeywordContext>();
            }
            public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(VBAParser.IDENTIFIER); }
            public AmbiguousIdentifierContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ambiguousIdentifier; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterAmbiguousIdentifier(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitAmbiguousIdentifier(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAmbiguousIdentifier(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public AmbiguousIdentifierContext ambiguousIdentifier()
        {
            AmbiguousIdentifierContext _localctx = new AmbiguousIdentifierContext(_ctx, State);
            EnterRule(_localctx, 256, RULE_ambiguousIdentifier);
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2706;
                    _errHandler.Sync(this);
                    _alt = 1;
                    do
                    {
                        switch (_alt)
                        {
                            case 1:
                                {
                                    State = 2706;
                                    switch (_input.La(1))
                                    {
                                        case IDENTIFIER:
                                            {
                                                State = 2704; Match(IDENTIFIER);
                                            }
                                            break;
                                        case ACCESS:
                                        case ADDRESSOF:
                                        case ALIAS:
                                        case AND:
                                        case ATTRIBUTE:
                                        case APPACTIVATE:
                                        case APPEND:
                                        case AS:
                                        case BEGIN:
                                        case BEEP:
                                        case BINARY:
                                        case BOOLEAN:
                                        case BYVAL:
                                        case BYREF:
                                        case BYTE:
                                        case CALL:
                                        case CASE:
                                        case CHDIR:
                                        case CHDRIVE:
                                        case CLASS:
                                        case CLOSE:
                                        case COLLECTION:
                                        case CONST:
                                        case DATABASE:
                                        case DATE:
                                        case DECLARE:
                                        case DEFBOOL:
                                        case DEFBYTE:
                                        case DEFDATE:
                                        case DEFDBL:
                                        case DEFDEC:
                                        case DEFCUR:
                                        case DEFINT:
                                        case DEFLNG:
                                        case DEFOBJ:
                                        case DEFSNG:
                                        case DEFSTR:
                                        case DEFVAR:
                                        case DELETESETTING:
                                        case DIM:
                                        case DO:
                                        case DOUBLE:
                                        case EACH:
                                        case ELSE:
                                        case ELSEIF:
                                        case END:
                                        case ENUM:
                                        case EQV:
                                        case ERASE:
                                        case ERROR:
                                        case EVENT:
                                        case FALSE:
                                        case FILECOPY:
                                        case FRIEND:
                                        case FOR:
                                        case FUNCTION:
                                        case GET:
                                        case GLOBAL:
                                        case GOSUB:
                                        case GOTO:
                                        case IF:
                                        case IMP:
                                        case IMPLEMENTS:
                                        case IN:
                                        case INPUT:
                                        case IS:
                                        case INTEGER:
                                        case KILL:
                                        case LOAD:
                                        case LOCK:
                                        case LONG:
                                        case LOOP:
                                        case LEN:
                                        case LET:
                                        case LIB:
                                        case LIKE:
                                        case LSET:
                                        case ME:
                                        case MID:
                                        case MKDIR:
                                        case MOD:
                                        case NAME:
                                        case NEXT:
                                        case NEW:
                                        case NOT:
                                        case NOTHING:
                                        case NULL:
                                        case ON:
                                        case OPEN:
                                        case OPTIONAL:
                                        case OR:
                                        case OUTPUT:
                                        case PARAMARRAY:
                                        case PRESERVE:
                                        case PRINT:
                                        case PRIVATE:
                                        case PUBLIC:
                                        case PUT:
                                        case RANDOM:
                                        case RANDOMIZE:
                                        case RAISEEVENT:
                                        case READ:
                                        case REDIM:
                                        case REM:
                                        case RESET:
                                        case RESUME:
                                        case RETURN:
                                        case RMDIR:
                                        case RSET:
                                        case SAVEPICTURE:
                                        case SAVESETTING:
                                        case SEEK:
                                        case SELECT:
                                        case SENDKEYS:
                                        case SET:
                                        case SETATTR:
                                        case SHARED:
                                        case SINGLE:
                                        case SPC:
                                        case STATIC:
                                        case STEP:
                                        case STOP:
                                        case STRING:
                                        case SUB:
                                        case TAB:
                                        case TEXT:
                                        case THEN:
                                        case TIME:
                                        case TO:
                                        case TRUE:
                                        case TYPE:
                                        case TYPEOF:
                                        case UNLOAD:
                                        case UNLOCK:
                                        case UNTIL:
                                        case VARIANT:
                                        case VERSION:
                                        case WEND:
                                        case WHILE:
                                        case WIDTH:
                                        case WITH:
                                        case WITHEVENTS:
                                        case WRITE:
                                        case XOR:
                                            {
                                                State = 2705; ambiguousKeyword();
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException(this);
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 2708;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 467, _ctx);
                    } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class AsTypeClauseContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public TypeContext type()
            {
                return GetRuleContext<TypeContext>(0);
            }
            public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
            public FieldLengthContext fieldLength()
            {
                return GetRuleContext<FieldLengthContext>(0);
            }
            public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
            public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_asTypeClause; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterAsTypeClause(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitAsTypeClause(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public AsTypeClauseContext asTypeClause()
        {
            AsTypeClauseContext _localctx = new AsTypeClauseContext(_ctx, State);
            EnterRule(_localctx, 258, RULE_asTypeClause);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2710; Match(AS);
                    State = 2712;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2711; Match(WS);
                        }
                    }

                    State = 2716;
                    switch (Interpreter.AdaptivePredict(_input, 469, _ctx))
                    {
                        case 1:
                            {
                                State = 2714; Match(NEW);
                                State = 2715; Match(WS);
                            }
                            break;
                    }
                    State = 2718; type();
                    State = 2723;
                    switch (Interpreter.AdaptivePredict(_input, 471, _ctx))
                    {
                        case 1:
                            {
                                State = 2720;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2719; Match(WS);
                                    }
                                }

                                State = 2722; fieldLength();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class BaseTypeContext : ParserRuleContext
        {
            public ITerminalNode COLLECTION() { return GetToken(VBAParser.COLLECTION, 0); }
            public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
            public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
            public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
            public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
            public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
            public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
            public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
            public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
            public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
            public BaseTypeContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_baseType; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterBaseType(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitBaseType(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public BaseTypeContext baseType()
        {
            BaseTypeContext _localctx = new BaseTypeContext(_ctx, State);
            EnterRule(_localctx, 260, RULE_baseType);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2725;
                    _la = _input.La(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << COLLECTION) | (1L << DATE) | (1L << DOUBLE))) != 0) || _la == INTEGER || _la == LONG || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & ((1L << (SINGLE - 160)) | (1L << (STRING - 160)) | (1L << (VARIANT - 160)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class CertainIdentifierContext : ParserRuleContext
        {
            public AmbiguousKeywordContext ambiguousKeyword(int i)
            {
                return GetRuleContext<AmbiguousKeywordContext>(i);
            }
            public ITerminalNode IDENTIFIER(int i)
            {
                return GetToken(VBAParser.IDENTIFIER, i);
            }
            public IReadOnlyList<AmbiguousKeywordContext> ambiguousKeyword()
            {
                return GetRuleContexts<AmbiguousKeywordContext>();
            }
            public IReadOnlyList<ITerminalNode> IDENTIFIER() { return GetTokens(VBAParser.IDENTIFIER); }
            public CertainIdentifierContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_certainIdentifier; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterCertainIdentifier(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitCertainIdentifier(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitCertainIdentifier(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public CertainIdentifierContext certainIdentifier()
        {
            CertainIdentifierContext _localctx = new CertainIdentifierContext(_ctx, State);
            EnterRule(_localctx, 262, RULE_certainIdentifier);
            try
            {
                int _alt;
                State = 2742;
                switch (_input.La(1))
                {
                    case IDENTIFIER:
                        EnterOuterAlt(_localctx, 1);
                        {
                            State = 2727; Match(IDENTIFIER);
                            State = 2732;
                            _errHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(_input, 473, _ctx);
                            while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                            {
                                if (_alt == 1)
                                {
                                    {
                                        State = 2730;
                                        switch (_input.La(1))
                                        {
                                            case ACCESS:
                                            case ADDRESSOF:
                                            case ALIAS:
                                            case AND:
                                            case ATTRIBUTE:
                                            case APPACTIVATE:
                                            case APPEND:
                                            case AS:
                                            case BEGIN:
                                            case BEEP:
                                            case BINARY:
                                            case BOOLEAN:
                                            case BYVAL:
                                            case BYREF:
                                            case BYTE:
                                            case CALL:
                                            case CASE:
                                            case CHDIR:
                                            case CHDRIVE:
                                            case CLASS:
                                            case CLOSE:
                                            case COLLECTION:
                                            case CONST:
                                            case DATABASE:
                                            case DATE:
                                            case DECLARE:
                                            case DEFBOOL:
                                            case DEFBYTE:
                                            case DEFDATE:
                                            case DEFDBL:
                                            case DEFDEC:
                                            case DEFCUR:
                                            case DEFINT:
                                            case DEFLNG:
                                            case DEFOBJ:
                                            case DEFSNG:
                                            case DEFSTR:
                                            case DEFVAR:
                                            case DELETESETTING:
                                            case DIM:
                                            case DO:
                                            case DOUBLE:
                                            case EACH:
                                            case ELSE:
                                            case ELSEIF:
                                            case END:
                                            case ENUM:
                                            case EQV:
                                            case ERASE:
                                            case ERROR:
                                            case EVENT:
                                            case FALSE:
                                            case FILECOPY:
                                            case FRIEND:
                                            case FOR:
                                            case FUNCTION:
                                            case GET:
                                            case GLOBAL:
                                            case GOSUB:
                                            case GOTO:
                                            case IF:
                                            case IMP:
                                            case IMPLEMENTS:
                                            case IN:
                                            case INPUT:
                                            case IS:
                                            case INTEGER:
                                            case KILL:
                                            case LOAD:
                                            case LOCK:
                                            case LONG:
                                            case LOOP:
                                            case LEN:
                                            case LET:
                                            case LIB:
                                            case LIKE:
                                            case LSET:
                                            case ME:
                                            case MID:
                                            case MKDIR:
                                            case MOD:
                                            case NAME:
                                            case NEXT:
                                            case NEW:
                                            case NOT:
                                            case NOTHING:
                                            case NULL:
                                            case ON:
                                            case OPEN:
                                            case OPTIONAL:
                                            case OR:
                                            case OUTPUT:
                                            case PARAMARRAY:
                                            case PRESERVE:
                                            case PRINT:
                                            case PRIVATE:
                                            case PUBLIC:
                                            case PUT:
                                            case RANDOM:
                                            case RANDOMIZE:
                                            case RAISEEVENT:
                                            case READ:
                                            case REDIM:
                                            case REM:
                                            case RESET:
                                            case RESUME:
                                            case RETURN:
                                            case RMDIR:
                                            case RSET:
                                            case SAVEPICTURE:
                                            case SAVESETTING:
                                            case SEEK:
                                            case SELECT:
                                            case SENDKEYS:
                                            case SET:
                                            case SETATTR:
                                            case SHARED:
                                            case SINGLE:
                                            case SPC:
                                            case STATIC:
                                            case STEP:
                                            case STOP:
                                            case STRING:
                                            case SUB:
                                            case TAB:
                                            case TEXT:
                                            case THEN:
                                            case TIME:
                                            case TO:
                                            case TRUE:
                                            case TYPE:
                                            case TYPEOF:
                                            case UNLOAD:
                                            case UNLOCK:
                                            case UNTIL:
                                            case VARIANT:
                                            case VERSION:
                                            case WEND:
                                            case WHILE:
                                            case WIDTH:
                                            case WITH:
                                            case WITHEVENTS:
                                            case WRITE:
                                            case XOR:
                                                {
                                                    State = 2728; ambiguousKeyword();
                                                }
                                                break;
                                            case IDENTIFIER:
                                                {
                                                    State = 2729; Match(IDENTIFIER);
                                                }
                                                break;
                                            default:
                                                throw new NoViableAltException(this);
                                        }
                                    }
                                }
                                State = 2734;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 473, _ctx);
                            }
                        }
                        break;
                    case ACCESS:
                    case ADDRESSOF:
                    case ALIAS:
                    case AND:
                    case ATTRIBUTE:
                    case APPACTIVATE:
                    case APPEND:
                    case AS:
                    case BEGIN:
                    case BEEP:
                    case BINARY:
                    case BOOLEAN:
                    case BYVAL:
                    case BYREF:
                    case BYTE:
                    case CALL:
                    case CASE:
                    case CHDIR:
                    case CHDRIVE:
                    case CLASS:
                    case CLOSE:
                    case COLLECTION:
                    case CONST:
                    case DATABASE:
                    case DATE:
                    case DECLARE:
                    case DEFBOOL:
                    case DEFBYTE:
                    case DEFDATE:
                    case DEFDBL:
                    case DEFDEC:
                    case DEFCUR:
                    case DEFINT:
                    case DEFLNG:
                    case DEFOBJ:
                    case DEFSNG:
                    case DEFSTR:
                    case DEFVAR:
                    case DELETESETTING:
                    case DIM:
                    case DO:
                    case DOUBLE:
                    case EACH:
                    case ELSE:
                    case ELSEIF:
                    case END:
                    case ENUM:
                    case EQV:
                    case ERASE:
                    case ERROR:
                    case EVENT:
                    case FALSE:
                    case FILECOPY:
                    case FRIEND:
                    case FOR:
                    case FUNCTION:
                    case GET:
                    case GLOBAL:
                    case GOSUB:
                    case GOTO:
                    case IF:
                    case IMP:
                    case IMPLEMENTS:
                    case IN:
                    case INPUT:
                    case IS:
                    case INTEGER:
                    case KILL:
                    case LOAD:
                    case LOCK:
                    case LONG:
                    case LOOP:
                    case LEN:
                    case LET:
                    case LIB:
                    case LIKE:
                    case LSET:
                    case ME:
                    case MID:
                    case MKDIR:
                    case MOD:
                    case NAME:
                    case NEXT:
                    case NEW:
                    case NOT:
                    case NOTHING:
                    case NULL:
                    case ON:
                    case OPEN:
                    case OPTIONAL:
                    case OR:
                    case OUTPUT:
                    case PARAMARRAY:
                    case PRESERVE:
                    case PRINT:
                    case PRIVATE:
                    case PUBLIC:
                    case PUT:
                    case RANDOM:
                    case RANDOMIZE:
                    case RAISEEVENT:
                    case READ:
                    case REDIM:
                    case REM:
                    case RESET:
                    case RESUME:
                    case RETURN:
                    case RMDIR:
                    case RSET:
                    case SAVEPICTURE:
                    case SAVESETTING:
                    case SEEK:
                    case SELECT:
                    case SENDKEYS:
                    case SET:
                    case SETATTR:
                    case SHARED:
                    case SINGLE:
                    case SPC:
                    case STATIC:
                    case STEP:
                    case STOP:
                    case STRING:
                    case SUB:
                    case TAB:
                    case TEXT:
                    case THEN:
                    case TIME:
                    case TO:
                    case TRUE:
                    case TYPE:
                    case TYPEOF:
                    case UNLOAD:
                    case UNLOCK:
                    case UNTIL:
                    case VARIANT:
                    case VERSION:
                    case WEND:
                    case WHILE:
                    case WIDTH:
                    case WITH:
                    case WITHEVENTS:
                    case WRITE:
                    case XOR:
                        EnterOuterAlt(_localctx, 2);
                        {
                            State = 2735; ambiguousKeyword();
                            State = 2738;
                            _errHandler.Sync(this);
                            _alt = 1;
                            do
                            {
                                switch (_alt)
                                {
                                    case 1:
                                        {
                                            State = 2738;
                                            switch (_input.La(1))
                                            {
                                                case ACCESS:
                                                case ADDRESSOF:
                                                case ALIAS:
                                                case AND:
                                                case ATTRIBUTE:
                                                case APPACTIVATE:
                                                case APPEND:
                                                case AS:
                                                case BEGIN:
                                                case BEEP:
                                                case BINARY:
                                                case BOOLEAN:
                                                case BYVAL:
                                                case BYREF:
                                                case BYTE:
                                                case CALL:
                                                case CASE:
                                                case CHDIR:
                                                case CHDRIVE:
                                                case CLASS:
                                                case CLOSE:
                                                case COLLECTION:
                                                case CONST:
                                                case DATABASE:
                                                case DATE:
                                                case DECLARE:
                                                case DEFBOOL:
                                                case DEFBYTE:
                                                case DEFDATE:
                                                case DEFDBL:
                                                case DEFDEC:
                                                case DEFCUR:
                                                case DEFINT:
                                                case DEFLNG:
                                                case DEFOBJ:
                                                case DEFSNG:
                                                case DEFSTR:
                                                case DEFVAR:
                                                case DELETESETTING:
                                                case DIM:
                                                case DO:
                                                case DOUBLE:
                                                case EACH:
                                                case ELSE:
                                                case ELSEIF:
                                                case END:
                                                case ENUM:
                                                case EQV:
                                                case ERASE:
                                                case ERROR:
                                                case EVENT:
                                                case FALSE:
                                                case FILECOPY:
                                                case FRIEND:
                                                case FOR:
                                                case FUNCTION:
                                                case GET:
                                                case GLOBAL:
                                                case GOSUB:
                                                case GOTO:
                                                case IF:
                                                case IMP:
                                                case IMPLEMENTS:
                                                case IN:
                                                case INPUT:
                                                case IS:
                                                case INTEGER:
                                                case KILL:
                                                case LOAD:
                                                case LOCK:
                                                case LONG:
                                                case LOOP:
                                                case LEN:
                                                case LET:
                                                case LIB:
                                                case LIKE:
                                                case LSET:
                                                case ME:
                                                case MID:
                                                case MKDIR:
                                                case MOD:
                                                case NAME:
                                                case NEXT:
                                                case NEW:
                                                case NOT:
                                                case NOTHING:
                                                case NULL:
                                                case ON:
                                                case OPEN:
                                                case OPTIONAL:
                                                case OR:
                                                case OUTPUT:
                                                case PARAMARRAY:
                                                case PRESERVE:
                                                case PRINT:
                                                case PRIVATE:
                                                case PUBLIC:
                                                case PUT:
                                                case RANDOM:
                                                case RANDOMIZE:
                                                case RAISEEVENT:
                                                case READ:
                                                case REDIM:
                                                case REM:
                                                case RESET:
                                                case RESUME:
                                                case RETURN:
                                                case RMDIR:
                                                case RSET:
                                                case SAVEPICTURE:
                                                case SAVESETTING:
                                                case SEEK:
                                                case SELECT:
                                                case SENDKEYS:
                                                case SET:
                                                case SETATTR:
                                                case SHARED:
                                                case SINGLE:
                                                case SPC:
                                                case STATIC:
                                                case STEP:
                                                case STOP:
                                                case STRING:
                                                case SUB:
                                                case TAB:
                                                case TEXT:
                                                case THEN:
                                                case TIME:
                                                case TO:
                                                case TRUE:
                                                case TYPE:
                                                case TYPEOF:
                                                case UNLOAD:
                                                case UNLOCK:
                                                case UNTIL:
                                                case VARIANT:
                                                case VERSION:
                                                case WEND:
                                                case WHILE:
                                                case WIDTH:
                                                case WITH:
                                                case WITHEVENTS:
                                                case WRITE:
                                                case XOR:
                                                    {
                                                        State = 2736; ambiguousKeyword();
                                                    }
                                                    break;
                                                case IDENTIFIER:
                                                    {
                                                        State = 2737; Match(IDENTIFIER);
                                                    }
                                                    break;
                                                default:
                                                    throw new NoViableAltException(this);
                                            }
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                                State = 2740;
                                _errHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(_input, 475, _ctx);
                            } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ComparisonOperatorContext : ParserRuleContext
        {
            public ITerminalNode GEQ() { return GetToken(VBAParser.GEQ, 0); }
            public ITerminalNode NEQ() { return GetToken(VBAParser.NEQ, 0); }
            public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
            public ITerminalNode LEQ() { return GetToken(VBAParser.LEQ, 0); }
            public ITerminalNode LT() { return GetToken(VBAParser.LT, 0); }
            public ITerminalNode GT() { return GetToken(VBAParser.GT, 0); }
            public ITerminalNode EQ() { return GetToken(VBAParser.EQ, 0); }
            public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
            public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_comparisonOperator; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterComparisonOperator(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitComparisonOperator(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ComparisonOperatorContext comparisonOperator()
        {
            ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, State);
            EnterRule(_localctx, 264, RULE_comparisonOperator);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2744;
                    _la = _input.La(1);
                    if (!(_la == IS || _la == LIKE || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (EQ - 190)) | (1L << (GEQ - 190)) | (1L << (GT - 190)) | (1L << (LEQ - 190)) | (1L << (LT - 190)) | (1L << (NEQ - 190)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class ComplexTypeContext : ParserRuleContext
        {
            public IReadOnlyList<AmbiguousIdentifierContext> ambiguousIdentifier()
            {
                return GetRuleContexts<AmbiguousIdentifierContext>();
            }
            public AmbiguousIdentifierContext ambiguousIdentifier(int i)
            {
                return GetRuleContext<AmbiguousIdentifierContext>(i);
            }
            public ComplexTypeContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_complexType; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterComplexType(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitComplexType(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public ComplexTypeContext complexType()
        {
            ComplexTypeContext _localctx = new ComplexTypeContext(_ctx, State);
            EnterRule(_localctx, 266, RULE_complexType);
            int _la;
            try
            {
                int _alt;
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2746; ambiguousIdentifier();
                    State = 2751;
                    _errHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(_input, 477, _ctx);
                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber)
                    {
                        if (_alt == 1)
                        {
                            {
                                {
                                    State = 2747;
                                    _la = _input.La(1);
                                    if (!(_la == T__7 || _la == T__0))
                                    {
                                        _errHandler.RecoverInline(this);
                                    }
                                    Consume();
                                    State = 2748; ambiguousIdentifier();
                                }
                            }
                        }
                        State = 2753;
                        _errHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(_input, 477, _ctx);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class FieldLengthContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
            public ITerminalNode MULT() { return GetToken(VBAParser.MULT, 0); }
            public ITerminalNode WS() { return GetToken(VBAParser.WS, 0); }
            public FieldLengthContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_fieldLength; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterFieldLength(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitFieldLength(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public FieldLengthContext fieldLength()
        {
            FieldLengthContext _localctx = new FieldLengthContext(_ctx, State);
            EnterRule(_localctx, 268, RULE_fieldLength);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2754; Match(MULT);
                    State = 2756;
                    _la = _input.La(1);
                    if (_la == WS)
                    {
                        {
                            State = 2755; Match(WS);
                        }
                    }

                    State = 2760;
                    switch (_input.La(1))
                    {
                        case INTEGERLITERAL:
                            {
                                State = 2758; Match(INTEGERLITERAL);
                            }
                            break;
                        case ACCESS:
                        case ADDRESSOF:
                        case ALIAS:
                        case AND:
                        case ATTRIBUTE:
                        case APPACTIVATE:
                        case APPEND:
                        case AS:
                        case BEGIN:
                        case BEEP:
                        case BINARY:
                        case BOOLEAN:
                        case BYVAL:
                        case BYREF:
                        case BYTE:
                        case CALL:
                        case CASE:
                        case CHDIR:
                        case CHDRIVE:
                        case CLASS:
                        case CLOSE:
                        case COLLECTION:
                        case CONST:
                        case DATABASE:
                        case DATE:
                        case DECLARE:
                        case DEFBOOL:
                        case DEFBYTE:
                        case DEFDATE:
                        case DEFDBL:
                        case DEFDEC:
                        case DEFCUR:
                        case DEFINT:
                        case DEFLNG:
                        case DEFOBJ:
                        case DEFSNG:
                        case DEFSTR:
                        case DEFVAR:
                        case DELETESETTING:
                        case DIM:
                        case DO:
                        case DOUBLE:
                        case EACH:
                        case ELSE:
                        case ELSEIF:
                        case END:
                        case ENUM:
                        case EQV:
                        case ERASE:
                        case ERROR:
                        case EVENT:
                        case FALSE:
                        case FILECOPY:
                        case FRIEND:
                        case FOR:
                        case FUNCTION:
                        case GET:
                        case GLOBAL:
                        case GOSUB:
                        case GOTO:
                        case IF:
                        case IMP:
                        case IMPLEMENTS:
                        case IN:
                        case INPUT:
                        case IS:
                        case INTEGER:
                        case KILL:
                        case LOAD:
                        case LOCK:
                        case LONG:
                        case LOOP:
                        case LEN:
                        case LET:
                        case LIB:
                        case LIKE:
                        case LSET:
                        case ME:
                        case MID:
                        case MKDIR:
                        case MOD:
                        case NAME:
                        case NEXT:
                        case NEW:
                        case NOT:
                        case NOTHING:
                        case NULL:
                        case ON:
                        case OPEN:
                        case OPTIONAL:
                        case OR:
                        case OUTPUT:
                        case PARAMARRAY:
                        case PRESERVE:
                        case PRINT:
                        case PRIVATE:
                        case PUBLIC:
                        case PUT:
                        case RANDOM:
                        case RANDOMIZE:
                        case RAISEEVENT:
                        case READ:
                        case REDIM:
                        case REM:
                        case RESET:
                        case RESUME:
                        case RETURN:
                        case RMDIR:
                        case RSET:
                        case SAVEPICTURE:
                        case SAVESETTING:
                        case SEEK:
                        case SELECT:
                        case SENDKEYS:
                        case SET:
                        case SETATTR:
                        case SHARED:
                        case SINGLE:
                        case SPC:
                        case STATIC:
                        case STEP:
                        case STOP:
                        case STRING:
                        case SUB:
                        case TAB:
                        case TEXT:
                        case THEN:
                        case TIME:
                        case TO:
                        case TRUE:
                        case TYPE:
                        case TYPEOF:
                        case UNLOAD:
                        case UNLOCK:
                        case UNTIL:
                        case VARIANT:
                        case VERSION:
                        case WEND:
                        case WHILE:
                        case WIDTH:
                        case WITH:
                        case WITHEVENTS:
                        case WRITE:
                        case XOR:
                        case IDENTIFIER:
                            {
                                State = 2759; ambiguousIdentifier();
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LetterrangeContext : ParserRuleContext
        {
            public CertainIdentifierContext certainIdentifier(int i)
            {
                return GetRuleContext<CertainIdentifierContext>(i);
            }
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public IReadOnlyList<CertainIdentifierContext> certainIdentifier()
            {
                return GetRuleContexts<CertainIdentifierContext>();
            }
            public ITerminalNode MINUS() { return GetToken(VBAParser.MINUS, 0); }
            public LetterrangeContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_letterrange; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLetterrange(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLetterrange(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLetterrange(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LetterrangeContext letterrange()
        {
            LetterrangeContext _localctx = new LetterrangeContext(_ctx, State);
            EnterRule(_localctx, 270, RULE_letterrange);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2762; certainIdentifier();
                    State = 2771;
                    switch (Interpreter.AdaptivePredict(_input, 482, _ctx))
                    {
                        case 1:
                            {
                                State = 2764;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2763; Match(WS);
                                    }
                                }

                                State = 2766; Match(MINUS);
                                State = 2768;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2767; Match(WS);
                                    }
                                }

                                State = 2770; certainIdentifier();
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LineLabelContext : ParserRuleContext
        {
            public AmbiguousIdentifierContext ambiguousIdentifier()
            {
                return GetRuleContext<AmbiguousIdentifierContext>(0);
            }
            public LineLabelContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_lineLabel; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLineLabel(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLineLabel(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLineLabel(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LineLabelContext lineLabel()
        {
            LineLabelContext _localctx = new LineLabelContext(_ctx, State);
            EnterRule(_localctx, 272, RULE_lineLabel);
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2773; ambiguousIdentifier();
                    State = 2774; Match(T__3);
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class LiteralContext : ParserRuleContext
        {
            public ITerminalNode INTEGERLITERAL() { return GetToken(VBAParser.INTEGERLITERAL, 0); }
            public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
            public ITerminalNode STRINGLITERAL() { return GetToken(VBAParser.STRINGLITERAL, 0); }
            public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
            public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
            public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
            public ITerminalNode DATELITERAL() { return GetToken(VBAParser.DATELITERAL, 0); }
            public ITerminalNode HEXLITERAL() { return GetToken(VBAParser.HEXLITERAL, 0); }
            public ITerminalNode DOUBLELITERAL() { return GetToken(VBAParser.DOUBLELITERAL, 0); }
            public ITerminalNode SHORTLITERAL() { return GetToken(VBAParser.SHORTLITERAL, 0); }
            public ITerminalNode OCTLITERAL() { return GetToken(VBAParser.OCTLITERAL, 0); }
            public LiteralContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_literal; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterLiteral(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitLiteral(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public LiteralContext literal()
        {
            LiteralContext _localctx = new LiteralContext(_ctx, State);
            EnterRule(_localctx, 274, RULE_literal);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2776;
                    _la = _input.La(1);
                    if (!(((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (FALSE - 74)) | (1L << (NOTHING - 74)) | (1L << (NULL - 74)))) != 0) || ((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & ((1L << (TRUE - 172)) | (1L << (STRINGLITERAL - 172)) | (1L << (OCTLITERAL - 172)) | (1L << (HEXLITERAL - 172)) | (1L << (SHORTLITERAL - 172)) | (1L << (INTEGERLITERAL - 172)) | (1L << (DOUBLELITERAL - 172)) | (1L << (DATELITERAL - 172)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TypeContext : ParserRuleContext
        {
            public ITerminalNode WS(int i)
            {
                return GetToken(VBAParser.WS, i);
            }
            public ITerminalNode LPAREN() { return GetToken(VBAParser.LPAREN, 0); }
            public IReadOnlyList<ITerminalNode> WS() { return GetTokens(VBAParser.WS); }
            public ITerminalNode RPAREN() { return GetToken(VBAParser.RPAREN, 0); }
            public BaseTypeContext baseType()
            {
                return GetRuleContext<BaseTypeContext>(0);
            }
            public ComplexTypeContext complexType()
            {
                return GetRuleContext<ComplexTypeContext>(0);
            }
            public TypeContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_type; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterType(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitType(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitType(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public TypeContext type()
        {
            TypeContext _localctx = new TypeContext(_ctx, State);
            EnterRule(_localctx, 276, RULE_type);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2780;
                    switch (Interpreter.AdaptivePredict(_input, 483, _ctx))
                    {
                        case 1:
                            {
                                State = 2778; baseType();
                            }
                            break;

                        case 2:
                            {
                                State = 2779; complexType();
                            }
                            break;
                    }
                    State = 2790;
                    switch (Interpreter.AdaptivePredict(_input, 486, _ctx))
                    {
                        case 1:
                            {
                                State = 2783;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2782; Match(WS);
                                    }
                                }

                                State = 2785; Match(LPAREN);
                                State = 2787;
                                _la = _input.La(1);
                                if (_la == WS)
                                {
                                    {
                                        State = 2786; Match(WS);
                                    }
                                }

                                State = 2789; Match(RPAREN);
                            }
                            break;
                    }
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class TypeHintContext : ParserRuleContext
        {
            public TypeHintContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_typeHint; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterTypeHint(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitTypeHint(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public TypeHintContext typeHint()
        {
            TypeHintContext _localctx = new TypeHintContext(_ctx, State);
            EnterRule(_localctx, 278, RULE_typeHint);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2792;
                    _la = _input.La(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__7) | (1L << T__6) | (1L << T__5) | (1L << T__4))) != 0) || _la == AMPERSAND))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class VisibilityContext : ParserRuleContext
        {
            public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
            public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
            public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
            public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
            public VisibilityContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_visibility; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterVisibility(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitVisibility(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public VisibilityContext visibility()
        {
            VisibilityContext _localctx = new VisibilityContext(_ctx, State);
            EnterRule(_localctx, 280, RULE_visibility);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2794;
                    _la = _input.La(1);
                    if (!(((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (FRIEND - 76)) | (1L << (GLOBAL - 76)) | (1L << (PRIVATE - 76)) | (1L << (PUBLIC - 76)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public partial class AmbiguousKeywordContext : ParserRuleContext
        {
            public ITerminalNode CASE() { return GetToken(VBAParser.CASE, 0); }
            public ITerminalNode APPACTIVATE() { return GetToken(VBAParser.APPACTIVATE, 0); }
            public ITerminalNode DEFOBJ() { return GetToken(VBAParser.DEFOBJ, 0); }
            public ITerminalNode ELSE() { return GetToken(VBAParser.ELSE, 0); }
            public ITerminalNode IF() { return GetToken(VBAParser.IF, 0); }
            public ITerminalNode RESET() { return GetToken(VBAParser.RESET, 0); }
            public ITerminalNode XOR() { return GetToken(VBAParser.XOR, 0); }
            public ITerminalNode TIME() { return GetToken(VBAParser.TIME, 0); }
            public ITerminalNode RAISEEVENT() { return GetToken(VBAParser.RAISEEVENT, 0); }
            public ITerminalNode LOAD() { return GetToken(VBAParser.LOAD, 0); }
            public ITerminalNode BYREF() { return GetToken(VBAParser.BYREF, 0); }
            public ITerminalNode DEFSNG() { return GetToken(VBAParser.DEFSNG, 0); }
            public ITerminalNode GOSUB() { return GetToken(VBAParser.GOSUB, 0); }
            public ITerminalNode ENUM() { return GetToken(VBAParser.ENUM, 0); }
            public ITerminalNode GLOBAL() { return GetToken(VBAParser.GLOBAL, 0); }
            public ITerminalNode PARAMARRAY() { return GetToken(VBAParser.PARAMARRAY, 0); }
            public ITerminalNode ME() { return GetToken(VBAParser.ME, 0); }
            public ITerminalNode SUB() { return GetToken(VBAParser.SUB, 0); }
            public ITerminalNode FOR() { return GetToken(VBAParser.FOR, 0); }
            public ITerminalNode LSET() { return GetToken(VBAParser.LSET, 0); }
            public ITerminalNode WIDTH() { return GetToken(VBAParser.WIDTH, 0); }
            public ITerminalNode STRING() { return GetToken(VBAParser.STRING, 0); }
            public ITerminalNode MOD() { return GetToken(VBAParser.MOD, 0); }
            public ITerminalNode OR() { return GetToken(VBAParser.OR, 0); }
            public ITerminalNode DOUBLE() { return GetToken(VBAParser.DOUBLE, 0); }
            public ITerminalNode BYVAL() { return GetToken(VBAParser.BYVAL, 0); }
            public ITerminalNode IN() { return GetToken(VBAParser.IN, 0); }
            public ITerminalNode BINARY() { return GetToken(VBAParser.BINARY, 0); }
            public ITerminalNode SAVESETTING() { return GetToken(VBAParser.SAVESETTING, 0); }
            public ITerminalNode TEXT() { return GetToken(VBAParser.TEXT, 0); }
            public ITerminalNode SENDKEYS() { return GetToken(VBAParser.SENDKEYS, 0); }
            public ITerminalNode PUBLIC() { return GetToken(VBAParser.PUBLIC, 0); }
            public ITerminalNode PUT() { return GetToken(VBAParser.PUT, 0); }
            public ITerminalNode MKDIR() { return GetToken(VBAParser.MKDIR, 0); }
            public ITerminalNode SINGLE() { return GetToken(VBAParser.SINGLE, 0); }
            public ITerminalNode ERROR() { return GetToken(VBAParser.ERROR, 0); }
            public ITerminalNode TYPE() { return GetToken(VBAParser.TYPE, 0); }
            public ITerminalNode CALL() { return GetToken(VBAParser.CALL, 0); }
            public ITerminalNode RMDIR() { return GetToken(VBAParser.RMDIR, 0); }
            public ITerminalNode SPC() { return GetToken(VBAParser.SPC, 0); }
            public ITerminalNode AS() { return GetToken(VBAParser.AS, 0); }
            public ITerminalNode NOT() { return GetToken(VBAParser.NOT, 0); }
            public ITerminalNode BEEP() { return GetToken(VBAParser.BEEP, 0); }
            public ITerminalNode STATIC() { return GetToken(VBAParser.STATIC, 0); }
            public ITerminalNode DO() { return GetToken(VBAParser.DO, 0); }
            public ITerminalNode DIM() { return GetToken(VBAParser.DIM, 0); }
            public ITerminalNode OUTPUT() { return GetToken(VBAParser.OUTPUT, 0); }
            public ITerminalNode KILL() { return GetToken(VBAParser.KILL, 0); }
            public ITerminalNode IMPLEMENTS() { return GetToken(VBAParser.IMPLEMENTS, 0); }
            public ITerminalNode VERSION() { return GetToken(VBAParser.VERSION, 0); }
            public ITerminalNode ACCESS() { return GetToken(VBAParser.ACCESS, 0); }
            public ITerminalNode COLLECTION() { return GetToken(VBAParser.COLLECTION, 0); }
            public ITerminalNode DECLARE() { return GetToken(VBAParser.DECLARE, 0); }
            public ITerminalNode TRUE() { return GetToken(VBAParser.TRUE, 0); }
            public ITerminalNode RESUME() { return GetToken(VBAParser.RESUME, 0); }
            public ITerminalNode VARIANT() { return GetToken(VBAParser.VARIANT, 0); }
            public ITerminalNode BOOLEAN() { return GetToken(VBAParser.BOOLEAN, 0); }
            public ITerminalNode WHILE() { return GetToken(VBAParser.WHILE, 0); }
            public ITerminalNode DEFDBL() { return GetToken(VBAParser.DEFDBL, 0); }
            public ITerminalNode FUNCTION() { return GetToken(VBAParser.FUNCTION, 0); }
            public ITerminalNode LONG() { return GetToken(VBAParser.LONG, 0); }
            public ITerminalNode REM() { return GetToken(VBAParser.REM, 0); }
            public ITerminalNode RSET() { return GetToken(VBAParser.RSET, 0); }
            public ITerminalNode ADDRESSOF() { return GetToken(VBAParser.ADDRESSOF, 0); }
            public ITerminalNode GOTO() { return GetToken(VBAParser.GOTO, 0); }
            public ITerminalNode ATTRIBUTE() { return GetToken(VBAParser.ATTRIBUTE, 0); }
            public ITerminalNode TYPEOF() { return GetToken(VBAParser.TYPEOF, 0); }
            public ITerminalNode SELECT() { return GetToken(VBAParser.SELECT, 0); }
            public ITerminalNode UNLOCK() { return GetToken(VBAParser.UNLOCK, 0); }
            public ITerminalNode SET() { return GetToken(VBAParser.SET, 0); }
            public ITerminalNode ERASE() { return GetToken(VBAParser.ERASE, 0); }
            public ITerminalNode INTEGER() { return GetToken(VBAParser.INTEGER, 0); }
            public ITerminalNode FALSE() { return GetToken(VBAParser.FALSE, 0); }
            public ITerminalNode PRESERVE() { return GetToken(VBAParser.PRESERVE, 0); }
            public ITerminalNode STOP() { return GetToken(VBAParser.STOP, 0); }
            public ITerminalNode SHARED() { return GetToken(VBAParser.SHARED, 0); }
            public ITerminalNode APPEND() { return GetToken(VBAParser.APPEND, 0); }
            public ITerminalNode CHDIR() { return GetToken(VBAParser.CHDIR, 0); }
            public ITerminalNode PRIVATE() { return GetToken(VBAParser.PRIVATE, 0); }
            public ITerminalNode UNLOAD() { return GetToken(VBAParser.UNLOAD, 0); }
            public ITerminalNode DEFBYTE() { return GetToken(VBAParser.DEFBYTE, 0); }
            public ITerminalNode RETURN() { return GetToken(VBAParser.RETURN, 0); }
            public ITerminalNode NULL() { return GetToken(VBAParser.NULL, 0); }
            public ITerminalNode NAME() { return GetToken(VBAParser.NAME, 0); }
            public ITerminalNode BEGIN() { return GetToken(VBAParser.BEGIN, 0); }
            public ITerminalNode LOCK() { return GetToken(VBAParser.LOCK, 0); }
            public ITerminalNode WEND() { return GetToken(VBAParser.WEND, 0); }
            public ITerminalNode DEFSTR() { return GetToken(VBAParser.DEFSTR, 0); }
            public ITerminalNode IMP() { return GetToken(VBAParser.IMP, 0); }
            public ITerminalNode DEFVAR() { return GetToken(VBAParser.DEFVAR, 0); }
            public ITerminalNode CHDRIVE() { return GetToken(VBAParser.CHDRIVE, 0); }
            public ITerminalNode EVENT() { return GetToken(VBAParser.EVENT, 0); }
            public ITerminalNode CONST() { return GetToken(VBAParser.CONST, 0); }
            public ITerminalNode ELSEIF() { return GetToken(VBAParser.ELSEIF, 0); }
            public ITerminalNode PRINT() { return GetToken(VBAParser.PRINT, 0); }
            public ITerminalNode DEFINT() { return GetToken(VBAParser.DEFINT, 0); }
            public ITerminalNode NOTHING() { return GetToken(VBAParser.NOTHING, 0); }
            public ITerminalNode THEN() { return GetToken(VBAParser.THEN, 0); }
            public ITerminalNode DATABASE() { return GetToken(VBAParser.DATABASE, 0); }
            public ITerminalNode BYTE() { return GetToken(VBAParser.BYTE, 0); }
            public ITerminalNode INPUT() { return GetToken(VBAParser.INPUT, 0); }
            public ITerminalNode STEP() { return GetToken(VBAParser.STEP, 0); }
            public ITerminalNode SAVEPICTURE() { return GetToken(VBAParser.SAVEPICTURE, 0); }
            public ITerminalNode SEEK() { return GetToken(VBAParser.SEEK, 0); }
            public ITerminalNode TAB() { return GetToken(VBAParser.TAB, 0); }
            public ITerminalNode RANDOM() { return GetToken(VBAParser.RANDOM, 0); }
            public ITerminalNode IS() { return GetToken(VBAParser.IS, 0); }
            public ITerminalNode LOOP() { return GetToken(VBAParser.LOOP, 0); }
            public ITerminalNode DEFCUR() { return GetToken(VBAParser.DEFCUR, 0); }
            public ITerminalNode ALIAS() { return GetToken(VBAParser.ALIAS, 0); }
            public ITerminalNode DATE() { return GetToken(VBAParser.DATE, 0); }
            public ITerminalNode DEFDATE() { return GetToken(VBAParser.DEFDATE, 0); }
            public ITerminalNode CLASS() { return GetToken(VBAParser.CLASS, 0); }
            public ITerminalNode LET() { return GetToken(VBAParser.LET, 0); }
            public ITerminalNode FRIEND() { return GetToken(VBAParser.FRIEND, 0); }
            public ITerminalNode EQV() { return GetToken(VBAParser.EQV, 0); }
            public ITerminalNode READ() { return GetToken(VBAParser.READ, 0); }
            public ITerminalNode TO() { return GetToken(VBAParser.TO, 0); }
            public ITerminalNode DEFBOOL() { return GetToken(VBAParser.DEFBOOL, 0); }
            public ITerminalNode OPEN() { return GetToken(VBAParser.OPEN, 0); }
            public ITerminalNode DELETESETTING() { return GetToken(VBAParser.DELETESETTING, 0); }
            public ITerminalNode CLOSE() { return GetToken(VBAParser.CLOSE, 0); }
            public ITerminalNode AND() { return GetToken(VBAParser.AND, 0); }
            public ITerminalNode DEFLNG() { return GetToken(VBAParser.DEFLNG, 0); }
            public ITerminalNode MID() { return GetToken(VBAParser.MID, 0); }
            public ITerminalNode ON() { return GetToken(VBAParser.ON, 0); }
            public ITerminalNode WITH() { return GetToken(VBAParser.WITH, 0); }
            public ITerminalNode DEFDEC() { return GetToken(VBAParser.DEFDEC, 0); }
            public ITerminalNode SETATTR() { return GetToken(VBAParser.SETATTR, 0); }
            public ITerminalNode WRITE() { return GetToken(VBAParser.WRITE, 0); }
            public ITerminalNode LEN() { return GetToken(VBAParser.LEN, 0); }
            public ITerminalNode EACH() { return GetToken(VBAParser.EACH, 0); }
            public ITerminalNode NEW() { return GetToken(VBAParser.NEW, 0); }
            public ITerminalNode GET() { return GetToken(VBAParser.GET, 0); }
            public ITerminalNode FILECOPY() { return GetToken(VBAParser.FILECOPY, 0); }
            public ITerminalNode LIB() { return GetToken(VBAParser.LIB, 0); }
            public ITerminalNode NEXT() { return GetToken(VBAParser.NEXT, 0); }
            public ITerminalNode OPTIONAL() { return GetToken(VBAParser.OPTIONAL, 0); }
            public ITerminalNode REDIM() { return GetToken(VBAParser.REDIM, 0); }
            public ITerminalNode END() { return GetToken(VBAParser.END, 0); }
            public ITerminalNode UNTIL() { return GetToken(VBAParser.UNTIL, 0); }
            public ITerminalNode LIKE() { return GetToken(VBAParser.LIKE, 0); }
            public ITerminalNode RANDOMIZE() { return GetToken(VBAParser.RANDOMIZE, 0); }
            public ITerminalNode WITHEVENTS() { return GetToken(VBAParser.WITHEVENTS, 0); }
            public AmbiguousKeywordContext(ParserRuleContext parent, int invokingState)
                : base(parent, invokingState)
            {
            }
            public override int RuleIndex { get { return RULE_ambiguousKeyword; } }
            public override void EnterRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.EnterAmbiguousKeyword(this);
            }
            public override void ExitRule(IParseTreeListener listener)
            {
                IVBAListener typedListener = listener as IVBAListener;
                if (typedListener != null) typedListener.ExitAmbiguousKeyword(this);
            }
            public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor)
            {
                IVBAVisitor<TResult> typedVisitor = visitor as IVBAVisitor<TResult>;
                if (typedVisitor != null) return typedVisitor.VisitAmbiguousKeyword(this);
                else return visitor.VisitChildren(this);
            }
        }

        [RuleVersion(0)]
        public AmbiguousKeywordContext ambiguousKeyword()
        {
            AmbiguousKeywordContext _localctx = new AmbiguousKeywordContext(_ctx, State);
            EnterRule(_localctx, 282, RULE_ambiguousKeyword);
            int _la;
            try
            {
                EnterOuterAlt(_localctx, 1);
                {
                    State = 2796;
                    _la = _input.La(1);
                    if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATABASE) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ENUM - 64)) | (1L << (EQV - 64)) | (1L << (ERASE - 64)) | (1L << (ERROR - 64)) | (1L << (EVENT - 64)) | (1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (OR - 128)) | (1L << (OUTPUT - 128)) | (1L << (PARAMARRAY - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRINT - 128)) | (1L << (PRIVATE - 128)) | (1L << (PUBLIC - 128)) | (1L << (PUT - 128)) | (1L << (RANDOM - 128)) | (1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0)))
                    {
                        _errHandler.RecoverInline(this);
                    }
                    Consume();
                }
            }
            catch (RecognitionException re)
            {
                _localctx.exception = re;
                _errHandler.ReportError(this, re);
                _errHandler.Recover(this, re);
            }
            finally
            {
                ExitRule();
            }
            return _localctx;
        }

        public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex)
        {
            switch (ruleIndex)
            {
                case 99: return valueStmt_sempred((ValueStmtContext)_localctx, predIndex);
            }
            return true;
        }
        private bool valueStmt_sempred(ValueStmtContext _localctx, int predIndex)
        {
            switch (predIndex)
            {
                case 0: return Precpred(_ctx, 23);

                case 1: return Precpred(_ctx, 22);

                case 2: return Precpred(_ctx, 21);

                case 3: return Precpred(_ctx, 20);

                case 4: return Precpred(_ctx, 19);

                case 5: return Precpred(_ctx, 18);

                case 6: return Precpred(_ctx, 17);

                case 7: return Precpred(_ctx, 16);

                case 8: return Precpred(_ctx, 15);

                case 9: return Precpred(_ctx, 12);

                case 10: return Precpred(_ctx, 11);

                case 11: return Precpred(_ctx, 10);

                case 12: return Precpred(_ctx, 9);

                case 13: return Precpred(_ctx, 8);

                case 14: return Precpred(_ctx, 7);

                case 15: return Precpred(_ctx, 6);

                case 16: return Precpred(_ctx, 5);

                case 17: return Precpred(_ctx, 4);

                case 18: return Precpred(_ctx, 3);

                case 19: return Precpred(_ctx, 2);
            }
            return true;
        }

        public static readonly string _serializedATN =
            "\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xDB\xAF1\x4\x2" +
            "\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4" +
            "\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10" +
            "\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15" +
            "\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B" +
            "\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!" +
            "\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t" +
            "*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32" +
            "\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37" +
            "\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4" +
            "@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45" +
            "\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN" +
            "\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t" +
            "X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61" +
            "\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g" +
            "\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4" +
            "q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4" +
            "{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82" +
            "\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87" +
            "\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D" +
            "\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x3\x2\x3\x2\x3\x2\x3\x3\x5\x3\x123\n" +
            "\x3\x3\x3\a\x3\x126\n\x3\f\x3\xE\x3\x129\v\x3\x3\x3\x3\x3\x6\x3\x12D\n" +
            "\x3\r\x3\xE\x3\x12E\x5\x3\x131\n\x3\x3\x3\x5\x3\x134\n\x3\x3\x3\a\x3\x137" +
            "\n\x3\f\x3\xE\x3\x13A\v\x3\x3\x3\x5\x3\x13D\n\x3\x3\x3\a\x3\x140\n\x3" +
            "\f\x3\xE\x3\x143\v\x3\x3\x3\x5\x3\x146\n\x3\x3\x3\a\x3\x149\n\x3\f\x3" +
            "\xE\x3\x14C\v\x3\x3\x3\x5\x3\x14F\n\x3\x3\x3\a\x3\x152\n\x3\f\x3\xE\x3" +
            "\x155\v\x3\x3\x3\x5\x3\x158\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3" +
            "\x5\x3\x5\x6\x5\x162\n\x5\r\x5\xE\x5\x163\x3\x5\x6\x5\x167\n\x5\r\x5\xE" +
            "\x5\x168\x3\x5\x3\x5\x6\x5\x16D\n\x5\r\x5\xE\x5\x16E\x3\x6\x3\x6\x5\x6" +
            "\x173\n\x6\x3\x6\x3\x6\x5\x6\x177\n\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x6" +
            "\a\x17E\n\a\r\a\xE\a\x17F\x6\a\x182\n\a\r\a\xE\a\x183\x3\b\x3\b\x6\b\x188" +
            "\n\b\r\b\xE\b\x189\x3\b\a\b\x18D\n\b\f\b\xE\b\x190\v\b\x3\t\x3\t\x5\t" +
            "\x194\n\t\x3\t\x3\t\x3\t\x5\t\x199\n\t\x3\t\x3\t\x3\t\x5\t\x19E\n\t\x3" +
            "\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x1AA\n\n\x3\v\x3" +
            "\v\x6\v\x1AE\n\v\r\v\xE\v\x1AF\x3\v\a\v\x1B3\n\v\f\v\xE\v\x1B6\v\v\x3" +
            "\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x1BF\n\f\x3\r\x3\r\x3\r\x3\r\x5" +
            "\r\x1C5\n\r\x3\r\x3\r\x5\r\x1C9\n\r\x3\r\x3\r\x5\r\x1CD\n\r\x3\r\x3\r" +
            "\x5\r\x1D1\n\r\x3\r\a\r\x1D4\n\r\f\r\xE\r\x1D7\v\r\x3\xE\x3\xE\a\xE\x1DB" +
            "\n\xE\f\xE\xE\xE\x1DE\v\xE\x3\xE\a\xE\x1E1\n\xE\f\xE\xE\xE\x1E4\v\xE\x3" +
            "\xE\x5\xE\x1E7\n\xE\x3\xE\a\xE\x1EA\n\xE\f\xE\xE\xE\x1ED\v\xE\x3\xE\x5" +
            "\xE\x1F0\n\xE\x3\xE\a\xE\x1F3\n\xE\f\xE\xE\xE\x1F6\v\xE\x3\xF\x3\xF\x3" +
            "\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF" +
            "\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3" +
            "\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF" +
            "\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3" +
            "\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF" +
            "\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x23B\n\xF\x3\x10\x3\x10" +
            "\x3\x10\x3\x10\x5\x10\x241\n\x10\x3\x10\x3\x10\x5\x10\x245\n\x10\x3\x10" +
            "\x5\x10\x248\n\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3" +
            "\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x258\n\x14\x3\x14" +
            "\x3\x14\x5\x14\x25C\n\x14\x3\x14\a\x14\x25F\n\x14\f\x14\xE\x14\x262\v" +
            "\x14\x5\x14\x264\n\x14\x3\x15\x3\x15\x3\x15\x5\x15\x269\n\x15\x3\x15\x3" +
            "\x15\x3\x15\x3\x15\x5\x15\x26F\n\x15\x3\x15\x3\x15\x5\x15\x273\n\x15\x3" +
            "\x15\a\x15\x276\n\x15\f\x15\xE\x15\x279\v\x15\x3\x16\x3\x16\x5\x16\x27D" +
            "\n\x16\x3\x16\x3\x16\x5\x16\x281\n\x16\x3\x16\x5\x16\x284\n\x16\x3\x16" +
            "\x3\x16\x5\x16\x288\n\x16\x3\x16\x3\x16\x3\x17\x3\x17\x5\x17\x28E\n\x17" +
            "\x3\x17\x3\x17\x5\x17\x292\n\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x5" +
            "\x18\x299\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x29F\n\x18\x3\x18\x3" +
            "\x18\x5\x18\x2A3\n\x18\x3\x18\x5\x18\x2A6\n\x18\x3\x18\x3\x18\x3\x18\x5" +
            "\x18\x2AB\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18" +
            "\x5\x18\x2B5\n\x18\x3\x18\x5\x18\x2B8\n\x18\x3\x18\x5\x18\x2BB\n\x18\x3" +
            "\x18\x3\x18\x5\x18\x2BF\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x2C5" +
            "\n\x19\x3\x19\x3\x19\x5\x19\x2C9\n\x19\x3\x19\a\x19\x2CC\n\x19\f\x19\xE" +
            "\x19\x2CF\v\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2D5\n\x1A\x3\x1A\x3" +
            "\x1A\x5\x1A\x2D9\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2DD\n\x1A\x3\x1A\x3\x1A\x5" +
            "\x1A\x2E1\n\x1A\x3\x1A\x5\x1A\x2E4\n\x1A\x3\x1B\x3\x1B\x6\x1B\x2E8\n\x1B" +
            "\r\x1B\xE\x1B\x2E9\x3\x1B\x3\x1B\x6\x1B\x2EE\n\x1B\r\x1B\xE\x1B\x2EF\x5" +
            "\x1B\x2F2\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x6\x1B" +
            "\x2FB\n\x1B\r\x1B\xE\x1B\x2FC\x3\x1B\x3\x1B\x6\x1B\x301\n\x1B\r\x1B\xE" +
            "\x1B\x302\x5\x1B\x305\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x6\x1B\x30B\n" +
            "\x1B\r\x1B\xE\x1B\x30C\x3\x1B\x3\x1B\x6\x1B\x311\n\x1B\r\x1B\xE\x1B\x312" +
            "\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x31B\n\x1B\x3\x1C\x3" +
            "\x1C\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x322\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D" +
            "\x6\x1D\x328\n\x1D\r\x1D\xE\x1D\x329\x3\x1D\a\x1D\x32D\n\x1D\f\x1D\xE" +
            "\x1D\x330\v\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x5\x1E\x336\n\x1E\x3\x1E\x3" +
            "\x1E\x5\x1E\x33A\n\x1E\x3\x1E\x5\x1E\x33D\n\x1E\x3\x1E\x6\x1E\x340\n\x1E" +
            "\r\x1E\xE\x1E\x341\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3!\x3" +
            "!\x3!\x5!\x34F\n!\x3!\x3!\x3!\x3!\x5!\x355\n!\x3!\x3!\x3\"\x3\"\x3#\x3" +
            "#\x3#\x3#\x5#\x35F\n#\x3#\x3#\x5#\x363\n#\x3#\x3#\x3$\x3$\x3$\x3$\x3$" +
            "\x3$\x5$\x36D\n$\x3$\x3$\x3$\x3$\x3$\x6$\x374\n$\r$\xE$\x375\x3$\x3$\x6" +
            "$\x37A\n$\r$\xE$\x37B\x5$\x37E\n$\x3$\x3$\x3$\x5$\x383\n$\x3%\x3%\x3%" +
            "\x3%\x5%\x389\n%\x3%\x3%\x5%\x38D\n%\x3%\x5%\x390\n%\x3%\x3%\x5%\x394" +
            "\n%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x5%\x39F\n%\x3%\x6%\x3A2\n%\r" +
            "%\xE%\x3A3\x3%\x3%\x6%\x3A8\n%\r%\xE%\x3A9\x5%\x3AC\n%\x3%\x3%\x3%\x5" +
            "%\x3B1\n%\x3&\x3&\x3&\x5&\x3B6\n&\x3&\x3&\x5&\x3BA\n&\x3&\x3&\x5&\x3BE" +
            "\n&\x3&\x3&\x5&\x3C2\n&\x3&\x5&\x3C5\n&\x3&\x5&\x3C8\n&\x3&\x5&\x3CB\n" +
            "&\x3&\x5&\x3CE\n&\x3&\x6&\x3D1\n&\r&\xE&\x3D2\x3&\x3&\x6&\x3D7\n&\r&\xE" +
            "&\x3D8\x5&\x3DB\n&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x5\'\x3E3\n\'\x3\'\x3\'" +
            "\x5\'\x3E7\n\'\x3\'\x5\'\x3EA\n\'\x3\'\x5\'\x3ED\n\'\x3\'\x3\'\x5\'\x3F1" +
            "\n\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x3*\x3*\x3" +
            "*\x3*\x3*\x3*\x3*\x3*\x5*\x408\n*\x3*\x3*\a*\x40C\n*\f*\xE*\x40F\v*\x3" +
            "*\x5*\x412\n*\x3*\x3*\x5*\x416\n*\x3+\x3+\x3+\x3+\x3+\x3+\x6+\x41E\n+" +
            "\r+\xE+\x41F\x3+\x3+\x6+\x424\n+\r+\xE+\x425\x5+\x428\n+\x3,\x3,\x3-\x3" +
            "-\x3-\x3-\x3-\x3-\x6-\x432\n-\r-\xE-\x433\x3-\x3-\x6-\x438\n-\r-\xE-\x439" +
            "\x5-\x43C\n-\x3.\x3.\x6.\x440\n.\r.\xE.\x441\x3.\x3.\x6.\x446\n.\r.\xE" +
            ".\x447\x5.\x44A\n.\x3/\x3/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30" +
            "\x454\n\x30\x3\x30\x3\x30\x5\x30\x458\n\x30\x3\x30\x6\x30\x45B\n\x30\r" +
            "\x30\xE\x30\x45C\x3\x31\x3\x31\x3\x31\x3\x31\x3\x32\x3\x32\x5\x32\x465" +
            "\n\x32\x3\x32\x3\x32\x5\x32\x469\n\x32\x3\x32\x3\x32\x5\x32\x46D\n\x32" +
            "\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x33\x5\x33\x475\n\x33\x3\x33\x3" +
            "\x33\x5\x33\x479\n\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x35" +
            "\x3\x35\x3\x35\x3\x35\x5\x35\x485\n\x35\x3\x35\x3\x35\x5\x35\x489\n\x35" +
            "\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x490\n\x35\x5\x35\x492\n\x35" +
            "\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x498\n\x36\x3\x36\x3\x36\x5\x36\x49C" +
            "\n\x36\x3\x36\x3\x36\x3\x37\x3\x37\x5\x37\x4A2\n\x37\x3\x37\x3\x37\x5" +
            "\x37\x4A6\n\x37\x3\x37\x3\x37\x5\x37\x4AA\n\x37\x3\x37\x3\x37\x3\x38\x3" +
            "\x38\a\x38\x4B0\n\x38\f\x38\xE\x38\x4B3\v\x38\x3\x38\x5\x38\x4B6\n\x38" +
            "\x3\x38\x3\x38\x3\x39\x3\x39\x5\x39\x4BC\n\x39\x3\x39\x3\x39\x3\x39\x3" +
            "\x39\a\x39\x4C2\n\x39\f\x39\xE\x39\x4C5\v\x39\x3\x39\x3\x39\x3\x39\x5" +
            "\x39\x4CA\n\x39\x3\x39\a\x39\x4CD\n\x39\f\x39\xE\x39\x4D0\v\x39\a\x39" +
            "\x4D2\n\x39\f\x39\xE\x39\x4D5\v\x39\x3:\x3:\x5:\x4D9\n:\x3:\x3:\x3:\x3" +
            ":\a:\x4DF\n:\f:\xE:\x4E2\v:\x3:\x3:\x3:\x5:\x4E7\n:\x3:\a:\x4EA\n:\f:" +
            "\xE:\x4ED\v:\a:\x4EF\n:\f:\xE:\x4F2\v:\x3;\x3;\a;\x4F6\n;\f;\xE;\x4F9" +
            "\v;\x3;\x3;\x3;\x5;\x4FE\n;\x3;\a;\x501\n;\f;\xE;\x504\v;\a;\x506\n;\f" +
            ";\xE;\x509\v;\x3<\x3<\x5<\x50D\n<\x3<\x3<\x5<\x511\n<\x3<\x3<\x5<\x515" +
            "\n<\x3<\x3<\x3=\x3=\x3=\x3=\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3?\x3?\x3" +
            "?\x3?\x3?\x3?\x3?\x3?\x3?\x5?\x52E\n?\x5?\x530\n?\x3@\x3@\x3@\x3@\x3@" +
            "\x3@\x3@\x3@\x5@\x53A\n@\x3@\x3@\x5@\x53E\n@\x3@\a@\x541\n@\f@\xE@\x544" +
            "\v@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x54E" +
            "\n\x41\x3\x41\x3\x41\x5\x41\x552\n\x41\x3\x41\a\x41\x555\n\x41\f\x41\xE" +
            "\x41\x558\v\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42" +
            "\x3\x42\x3\x42\x3\x42\x5\x42\x565\n\x42\x3\x42\x3\x42\x5\x42\x569\n\x42" +
            "\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x572\n\x42\x3" +
            "\x42\x3\x42\x5\x42\x576\n\x42\x3\x42\x5\x42\x579\n\x42\x3\x43\x3\x43\x5" +
            "\x43\x57D\n\x43\x3\x43\x3\x43\x5\x43\x581\n\x43\x3\x43\x5\x43\x584\n\x43" +
            "\a\x43\x586\n\x43\f\x43\xE\x43\x589\v\x43\x3\x43\x5\x43\x58C\n\x43\x3" +
            "\x43\x5\x43\x58F\n\x43\x3\x43\x3\x43\x5\x43\x593\n\x43\x3\x43\x5\x43\x596" +
            "\n\x43\x6\x43\x598\n\x43\r\x43\xE\x43\x599\x5\x43\x59C\n\x43\x3\x44\x3" +
            "\x44\x3\x44\x5\x44\x5A1\n\x44\x3\x44\x3\x44\x5\x44\x5A5\n\x44\x3\x44\x3" +
            "\x44\x5\x44\x5A9\n\x44\x3\x44\x3\x44\x5\x44\x5AD\n\x44\x5\x44\x5AF\n\x44" +
            "\x3\x45\x3\x45\x3\x45\x3\x45\x5\x45\x5B5\n\x45\x3\x45\x3\x45\x5\x45\x5B9" +
            "\n\x45\x3\x45\x5\x45\x5BC\n\x45\x3\x46\x3\x46\x3\x46\x5\x46\x5C1\n\x46" +
            "\x3\x46\x3\x46\x5\x46\x5C5\n\x46\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x5CB" +
            "\n\x46\x3\x46\x5\x46\x5CE\n\x46\x3\x46\x5\x46\x5D1\n\x46\x3\x46\x3\x46" +
            "\x5\x46\x5D5\n\x46\x3\x46\x6\x46\x5D8\n\x46\r\x46\xE\x46\x5D9\x3\x46\x3" +
            "\x46\x6\x46\x5DE\n\x46\r\x46\xE\x46\x5DF\x5\x46\x5E2\n\x46\x3\x46\x3\x46" +
            "\x3G\x3G\x3G\x5G\x5E9\nG\x3G\x3G\x5G\x5ED\nG\x3G\x3G\x3G\x3G\x5G\x5F3" +
            "\nG\x3G\x5G\x5F6\nG\x3G\x6G\x5F9\nG\rG\xEG\x5FA\x3G\x3G\x6G\x5FF\nG\r" +
            "G\xEG\x600\x5G\x603\nG\x3G\x3G\x3H\x3H\x3H\x5H\x60A\nH\x3H\x3H\x5H\x60E" +
            "\nH\x3H\x3H\x3H\x3H\x5H\x614\nH\x3H\x5H\x617\nH\x3H\x6H\x61A\nH\rH\xE" +
            "H\x61B\x3H\x3H\x6H\x620\nH\rH\xEH\x621\x5H\x624\nH\x3H\x3H\x3I\x3I\x3" +
            "I\x3I\x5I\x62C\nI\x3I\x3I\x5I\x630\nI\x3I\x5I\x633\nI\x3I\x5I\x636\nI" +
            "\x3I\x3I\x5I\x63A\nI\x3I\x3I\x3J\x3J\x3J\x3J\x5J\x642\nJ\x3J\x3J\x5J\x646" +
            "\nJ\x3J\x3J\x5J\x64A\nJ\x5J\x64C\nJ\x3J\x5J\x64F\nJ\x3K\x3K\x3K\x5K\x654" +
            "\nK\x3L\x3L\x3L\x3L\x5L\x65A\nL\x3L\x3L\x5L\x65E\nL\x3L\x3L\x5L\x662\n" +
            "L\x3L\aL\x665\nL\fL\xEL\x668\vL\x3M\x3M\x5M\x66C\nM\x3M\x3M\x5M\x670\n" +
            "M\x3M\x3M\x5M\x674\nM\x3M\x3M\x3M\x5M\x679\nM\x3N\x3N\x3O\x3O\x3O\x3O" +
            "\x5O\x681\nO\x5O\x683\nO\x3P\x3P\x3Q\x3Q\x3Q\x3Q\x3R\x3R\x3R\x3R\x5R\x68F" +
            "\nR\x3R\x3R\x5R\x693\nR\x3R\x3R\x3S\x3S\x3S\x3S\x5S\x69B\nS\x3S\x3S\x5" +
            "S\x69F\nS\x3S\x3S\x3T\x3T\x3T\x3T\x5T\x6A7\nT\x3T\x3T\x5T\x6AB\nT\x3T" +
            "\x3T\x5T\x6AF\nT\x3T\x3T\x5T\x6B3\nT\x3T\x3T\x5T\x6B7\nT\x3T\x3T\x5T\x6BB" +
            "\nT\x3T\x3T\x3U\x3U\x3U\x3U\x5U\x6C3\nU\x3U\x3U\x5U\x6C7\nU\x3U\x3U\x3" +
            "V\x3V\x3V\x3V\x3V\x3V\x6V\x6D1\nV\rV\xEV\x6D2\x3V\aV\x6D6\nV\fV\xEV\x6D9" +
            "\vV\x3V\x5V\x6DC\nV\x3V\x3V\x3W\x3W\x5W\x6E2\nW\x3W\x3W\x5W\x6E6\nW\x3" +
            "W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x5W\x6F1\nW\x3X\x3X\x3X\x3X\x5X\x6F7" +
            "\nX\x3X\x5X\x6FA\nX\x3X\aX\x6FD\nX\fX\xEX\x700\vX\x3X\x3X\x6X\x704\nX" +
            "\rX\xEX\x705\aX\x708\nX\fX\xEX\x70B\vX\x3Y\x3Y\x3Y\x5Y\x710\nY\x3Y\x3" +
            "Y\x5Y\x714\nY\x3Y\aY\x717\nY\fY\xEY\x71A\vY\x5Y\x71C\nY\x3Z\x3Z\x3Z\x3" +
            "Z\x5Z\x722\nZ\x3Z\x3Z\x5Z\x726\nZ\x3Z\x5Z\x729\nZ\x3[\x3[\x3[\x3[\x5[" +
            "\x72F\n[\x3[\x3[\x5[\x733\n[\x3[\x3[\x3\\\x3\\\x3\\\x3\\\x5\\\x73B\n\\" +
            "\x3\\\x3\\\x5\\\x73F\n\\\x3\\\x3\\\x3]\x3]\x3^\x3^\x3^\x5^\x748\n^\x3" +
            "^\x3^\x5^\x74C\n^\x3^\x3^\x5^\x750\n^\x3^\x3^\x5^\x754\n^\x3^\x5^\x757" +
            "\n^\x3^\x6^\x75A\n^\r^\xE^\x75B\x3^\x3^\x6^\x760\n^\r^\xE^\x761\x5^\x764" +
            "\n^\x3^\x3^\x3_\x3_\x5_\x76A\n_\x3_\x3_\x5_\x76E\n_\x3_\x3_\x3`\x3`\x3" +
            "`\x5`\x775\n`\x3`\x3`\x3`\x3`\x6`\x77B\n`\r`\xE`\x77C\x3`\a`\x780\n`\f" +
            "`\xE`\x783\v`\x3`\x3`\x3\x61\x3\x61\x5\x61\x789\n\x61\x3\x61\x3\x61\x5" +
            "\x61\x78D\n\x61\x3\x61\x5\x61\x790\n\x61\x3\x61\x5\x61\x793\n\x61\x3\x61" +
            "\x5\x61\x796\n\x61\x3\x61\x3\x61\x5\x61\x79A\n\x61\x3\x61\x6\x61\x79D" +
            "\n\x61\r\x61\xE\x61\x79E\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\x3" +
            "\x62\x5\x62\x7A8\n\x62\x3\x63\x3\x63\x3\x63\x3\x63\x3\x64\x3\x64\x3\x64" +
            "\x3\x64\x5\x64\x7B2\n\x64\x3\x64\x3\x64\x5\x64\x7B6\n\x64\x3\x64\x3\x64" +
            "\x3\x64\x3\x64\x3\x64\x5\x64\x7BD\n\x64\x5\x64\x7BF\n\x64\x3\x65\x3\x65" +
            "\x3\x65\x5\x65\x7C4\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x7C9\n\x65\x3\x65" +
            "\x3\x65\x3\x65\x5\x65\x7CE\n\x65\x3\x65\x3\x65\x5\x65\x7D2\n\x65\x3\x65" +
            "\x3\x65\x3\x65\x3\x65\x5\x65\x7D8\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x7DD" +
            "\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x7E2\n\x65\x3\x65\x3\x65\x3\x65\x3" +
            "\x65\x3\x65\x5\x65\x7E9\n\x65\x3\x65\x3\x65\x5\x65\x7ED\n\x65\x3\x65\x3" +
            "\x65\x5\x65\x7F1\n\x65\x3\x65\a\x65\x7F4\n\x65\f\x65\xE\x65\x7F7\v\x65" +
            "\x3\x65\x3\x65\x3\x65\x3\x65\x5\x65\x7FD\n\x65\x3\x65\x3\x65\x5\x65\x801" +
            "\n\x65\x3\x65\x3\x65\x5\x65\x805\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x80A" +
            "\n\x65\x3\x65\x3\x65\x5\x65\x80E\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x813" +
            "\n\x65\x3\x65\x3\x65\x5\x65\x817\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x81C" +
            "\n\x65\x3\x65\x3\x65\x5\x65\x820\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x825" +
            "\n\x65\x3\x65\x3\x65\x5\x65\x829\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x82E" +
            "\n\x65\x3\x65\x3\x65\x5\x65\x832\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x837" +
            "\n\x65\x3\x65\x3\x65\x5\x65\x83B\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x840" +
            "\n\x65\x3\x65\x3\x65\x5\x65\x844\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x849" +
            "\n\x65\x3\x65\x3\x65\x5\x65\x84D\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x852" +
            "\n\x65\x3\x65\x3\x65\x5\x65\x856\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x85B" +
            "\n\x65\x3\x65\x3\x65\x5\x65\x85F\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x864" +
            "\n\x65\x3\x65\x3\x65\x5\x65\x868\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x86D" +
            "\n\x65\x3\x65\x3\x65\x5\x65\x871\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x876" +
            "\n\x65\x3\x65\x3\x65\x5\x65\x87A\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x87F" +
            "\n\x65\x3\x65\x3\x65\x5\x65\x883\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x888" +
            "\n\x65\x3\x65\x3\x65\x5\x65\x88C\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x891" +
            "\n\x65\x3\x65\x3\x65\x5\x65\x895\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x89A" +
            "\n\x65\x3\x65\x3\x65\x5\x65\x89E\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x8A3" +
            "\n\x65\x3\x65\x3\x65\x5\x65\x8A7\n\x65\x3\x65\x3\x65\x3\x65\x5\x65\x8AC" +
            "\n\x65\x3\x65\x3\x65\x5\x65\x8B0\n\x65\x3\x65\a\x65\x8B3\n\x65\f\x65\xE" +
            "\x65\x8B6\v\x65\x3\x66\x3\x66\x3\x66\x5\x66\x8BB\n\x66\x3\x66\x3\x66\x3" +
            "\x66\x5\x66\x8C0\n\x66\x3\x66\x3\x66\x3g\x3g\x5g\x8C6\ng\x3g\x3g\x5g\x8CA" +
            "\ng\x3g\ag\x8CD\ng\fg\xEg\x8D0\vg\x3h\x3h\x5h\x8D4\nh\x3h\x3h\x5h\x8D8" +
            "\nh\x3h\x3h\x5h\x8DC\nh\x5h\x8DE\nh\x3h\x3h\x5h\x8E2\nh\x5h\x8E4\nh\x3" +
            "h\x5h\x8E7\nh\x3h\x3h\x5h\x8EB\nh\x3i\x3i\x3i\x3i\x6i\x8F1\ni\ri\xEi\x8F2" +
            "\x3i\x3i\x3i\ai\x8F8\ni\fi\xEi\x8FB\vi\x3i\x3i\x3j\x3j\x3j\x3j\x5j\x903" +
            "\nj\x3j\x3j\x5j\x907\nj\x3j\x3j\x3k\x3k\x3k\x3k\x3k\x3k\x5k\x911\nk\x3" +
            "k\x6k\x914\nk\rk\xEk\x915\x3k\x3k\x6k\x91A\nk\rk\xEk\x91B\x5k\x91E\nk" +
            "\x3k\x3k\x3l\x3l\x3l\x3l\x5l\x926\nl\x3l\x3l\x5l\x92A\nl\x3l\x5l\x92D" +
            "\nl\x3m\x5m\x930\nm\x3m\x3m\x3n\x3n\x5n\x936\nn\x3o\x3o\x3o\x3o\x5o\x93C" +
            "\no\x3o\x5o\x93F\no\x3o\x3o\x5o\x943\no\x3o\x3o\x5o\x947\no\x3o\x3o\x5" +
            "o\x94B\no\x3o\x5o\x94E\no\x3o\x3o\x3o\x3o\ao\x954\no\fo\xEo\x957\vo\x3" +
            "p\x3p\x3p\x5p\x95C\np\x3p\x3p\x3p\x5p\x961\np\x3p\x5p\x964\np\x3p\x3p" +
            "\x5p\x968\np\x3p\x3p\x5p\x96C\np\x3p\x3p\x5p\x970\np\x3p\x5p\x973\np\x3" +
            "p\x3p\x3p\x3p\ap\x979\np\fp\xEp\x97C\vp\x3q\x3q\x5q\x980\nq\x3r\x5r\x983" +
            "\nr\x3r\x3r\x3r\x5r\x988\nr\x3r\x3r\x5r\x98C\nr\x3r\x5r\x98F\nr\x3r\x5" +
            "r\x992\nr\x3r\x3r\x3r\x3r\ar\x998\nr\fr\xEr\x99B\vr\x3s\x3s\x3s\x5s\x9A0" +
            "\ns\x3s\x5s\x9A3\ns\x3s\x3s\x3s\x3s\as\x9A9\ns\fs\xEs\x9AC\vs\x3t\x3t" +
            "\x3t\x3t\x5t\x9B2\nt\x3u\x3u\x5u\x9B6\nu\x3u\x5u\x9B9\nu\x3u\x5u\x9BC" +
            "\nu\x3u\x3u\x3u\x3u\au\x9C2\nu\fu\xEu\x9C5\vu\x3v\x3v\x5v\x9C9\nv\x3v" +
            "\x5v\x9CC\nv\x3v\x5v\x9CF\nv\x3v\x3v\x5v\x9D3\nv\x3v\x3v\x5v\x9D7\nv\x5" +
            "v\x9D9\nv\x3v\x3v\x5v\x9DD\nv\x3v\x5v\x9E0\nv\x3v\x3v\x3v\x3v\av\x9E6" +
            "\nv\fv\xEv\x9E9\vv\x3w\x3w\x5w\x9ED\nw\x3w\x6w\x9F0\nw\rw\xEw\x9F1\x3" +
            "w\x5w\x9F5\nw\x3w\x5w\x9F8\nw\x3w\x3w\x3w\x3w\aw\x9FE\nw\fw\xEw\xA01\v" +
            "w\x3x\x3x\x3x\x5x\xA06\nx\x3y\x3y\x3z\x5z\xA0B\nz\x3z\x5z\xA0E\nz\x3z" +
            "\x3z\x5z\xA12\nz\az\xA14\nz\fz\xEz\xA17\vz\x3z\x3z\x5z\xA1B\nz\x3z\x3" +
            "z\x5z\xA1F\nz\x3z\x5z\xA22\nz\az\xA24\nz\fz\xEz\xA27\vz\x3{\x5{\xA2A\n" +
            "{\x3{\x3{\x5{\xA2E\n{\x3{\x5{\xA31\n{\x3{\x3{\x3|\x3|\x3|\x5|\xA38\n|" +
            "\x3}\x3}\x5}\xA3C\n}\x3}\x3}\x5}\xA40\n}\x3}\x3}\x5}\xA44\n}\x3}\a}\xA47" +
            "\n}\f}\xE}\xA4A\v}\x5}\xA4C\n}\x3}\x5}\xA4F\n}\x3}\x3}\x3~\x3~\x5~\xA55" +
            "\n~\x3~\x3~\x5~\xA59\n~\x3~\x3~\x5~\xA5D\n~\x3~\x3~\x5~\xA61\n~\x3~\x3" +
            "~\x5~\xA65\n~\x3~\x5~\xA68\n~\x3~\x5~\xA6B\n~\x3~\x5~\xA6E\n~\x3~\x5~" +
            "\xA71\n~\x3~\x5~\xA74\n~\x3\x7F\x3\x7F\x5\x7F\xA78\n\x7F\x3\x7F\x3\x7F" +
            "\x3\x80\x3\x80\x5\x80\xA7E\n\x80\x3\x80\x3\x80\x5\x80\xA82\n\x80\x3\x80" +
            "\a\x80\xA85\n\x80\f\x80\xE\x80\xA88\v\x80\x3\x81\x3\x81\x3\x81\x3\x81" +
            "\x3\x81\x5\x81\xA8F\n\x81\x3\x81\x3\x81\x3\x82\x3\x82\x6\x82\xA95\n\x82" +
            "\r\x82\xE\x82\xA96\x3\x83\x3\x83\x5\x83\xA9B\n\x83\x3\x83\x3\x83\x5\x83" +
            "\xA9F\n\x83\x3\x83\x3\x83\x5\x83\xAA3\n\x83\x3\x83\x5\x83\xAA6\n\x83\x3" +
            "\x84\x3\x84\x3\x85\x3\x85\x3\x85\a\x85\xAAD\n\x85\f\x85\xE\x85\xAB0\v" +
            "\x85\x3\x85\x3\x85\x3\x85\x6\x85\xAB5\n\x85\r\x85\xE\x85\xAB6\x5\x85\xAB9" +
            "\n\x85\x3\x86\x3\x86\x3\x87\x3\x87\x3\x87\a\x87\xAC0\n\x87\f\x87\xE\x87" +
            "\xAC3\v\x87\x3\x88\x3\x88\x5\x88\xAC7\n\x88\x3\x88\x3\x88\x5\x88\xACB" +
            "\n\x88\x3\x89\x3\x89\x5\x89\xACF\n\x89\x3\x89\x3\x89\x5\x89\xAD3\n\x89" +
            "\x3\x89\x5\x89\xAD6\n\x89\x3\x8A\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3\x8C\x3" +
            "\x8C\x5\x8C\xADF\n\x8C\x3\x8C\x5\x8C\xAE2\n\x8C\x3\x8C\x3\x8C\x5\x8C\xAE6" +
            "\n\x8C\x3\x8C\x5\x8C\xAE9\n\x8C\x3\x8D\x3\x8D\x3\x8E\x3\x8E\x3\x8F\x3" +
            "\x8F\x3\x8F\x2\x2\x3\xC8\x90\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10" +
            "\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2" +
            "(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42" +
            "\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2" +
            "\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2" +
            "\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2" +
            "\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2" +
            "\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2" +
            "\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2" +
            "\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2" +
            "\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2" +
            "\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104\x2\x106\x2\x108\x2\x10A" +
            "\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116\x2\x118\x2\x11A\x2\x11C" +
            "\x2\x2\x15\x5\x2\x16\x16##\xAA\xAA\x3\x2&\x31\x4\x2\xB3\xB3\xB7\xB7\x3" +
            "\x2GK\x5\x2\xC0\xC0\xC7\xC7\xCB\xCB\a\x2\x12\x12\x16\x16YY\x83\x83\x8E" +
            "\x8E\x4\x2\x91\x92\xBB\xBB\x4\x2\x66h\xA1\xA1\x3\x2\t\n\x4\x2\xA3\xA3" +
            "\xA9\xA9\x4\x2\x4\x4\v\v\x4\x2\x18\x19\x84\x84\x3\x2\x18\x19\f\x2\x17" +
            "\x17\x1A\x1A!!$$\x35\x35[[__\xA2\xA2\xA7\xA7\xB4\xB4\a\x2ZZ\x64\x64\xC0" +
            "\xC3\xC5\xC5\xC9\xC9\x6\x2LLwx\xAE\xAE\xD0\xD6\x4\x2\x3\a\xBD\xBD\x6\x2" +
            "NNRR\x87\x87\x8C\x8C\v\x2\f\x38\x41\x46L\x64iioy|}\x82\x87\x8C\x91\x93" +
            "\xBC\xCBD\x2\x11E\x3\x2\x2\x2\x4\x122\x3\x2\x2\x2\x6\x159\x3\x2\x2\x2" +
            "\b\x15F\x3\x2\x2\x2\n\x170\x3\x2\x2\x2\f\x181\x3\x2\x2\x2\xE\x185\x3\x2" +
            "\x2\x2\x10\x19D\x3\x2\x2\x2\x12\x1A9\x3\x2\x2\x2\x14\x1AB\x3\x2\x2\x2" +
            "\x16\x1BE\x3\x2\x2\x2\x18\x1C0\x3\x2\x2\x2\x1A\x1D8\x3\x2\x2\x2\x1C\x23A" +
            "\x3\x2\x2\x2\x1E\x23C\x3\x2\x2\x2 \x249\x3\x2\x2\x2\"\x24B\x3\x2\x2\x2" +
            "$\x24F\x3\x2\x2\x2&\x253\x3\x2\x2\x2(\x268\x3\x2\x2\x2*\x27A\x3\x2\x2" +
            "\x2,\x28B\x3\x2\x2\x2.\x298\x3\x2\x2\x2\x30\x2C0\x3\x2\x2\x2\x32\x2D0" +
            "\x3\x2\x2\x2\x34\x31A\x3\x2\x2\x2\x36\x31C\x3\x2\x2\x2\x38\x321\x3\x2" +
            "\x2\x2:\x333\x3\x2\x2\x2<\x343\x3\x2\x2\x2>\x347\x3\x2\x2\x2@\x34E\x3" +
            "\x2\x2\x2\x42\x358\x3\x2\x2\x2\x44\x35A\x3\x2\x2\x2\x46\x366\x3\x2\x2" +
            "\x2H\x384\x3\x2\x2\x2J\x3B5\x3\x2\x2\x2L\x3DE\x3\x2\x2\x2N\x3F4\x3\x2" +
            "\x2\x2P\x3F8\x3\x2\x2\x2R\x415\x3\x2\x2\x2T\x417\x3\x2\x2\x2V\x429\x3" +
            "\x2\x2\x2X\x42B\x3\x2\x2\x2Z\x43D\x3\x2\x2\x2\\\x44B\x3\x2\x2\x2^\x44F" +
            "\x3\x2\x2\x2`\x45E\x3\x2\x2\x2\x62\x464\x3\x2\x2\x2\x64\x470\x3\x2\x2" +
            "\x2\x66\x47C\x3\x2\x2\x2h\x480\x3\x2\x2\x2j\x493\x3\x2\x2\x2l\x49F\x3" +
            "\x2\x2\x2n\x4AD\x3\x2\x2\x2p\x4B9\x3\x2\x2\x2r\x4D6\x3\x2\x2\x2t\x4F3" +
            "\x3\x2\x2\x2v\x50A\x3\x2\x2\x2x\x518\x3\x2\x2\x2z\x51C\x3\x2\x2\x2|\x52F" +
            "\x3\x2\x2\x2~\x531\x3\x2\x2\x2\x80\x545\x3\x2\x2\x2\x82\x559\x3\x2\x2" +
            "\x2\x84\x59B\x3\x2\x2\x2\x86\x5AE\x3\x2\x2\x2\x88\x5B0\x3\x2\x2\x2\x8A" +
            "\x5C0\x3\x2\x2\x2\x8C\x5E8\x3\x2\x2\x2\x8E\x609\x3\x2\x2\x2\x90\x627\x3" +
            "\x2\x2\x2\x92\x63D\x3\x2\x2\x2\x94\x650\x3\x2\x2\x2\x96\x655\x3\x2\x2" +
            "\x2\x98\x669\x3\x2\x2\x2\x9A\x67A\x3\x2\x2\x2\x9C\x67C\x3\x2\x2\x2\x9E" +
            "\x684\x3\x2\x2\x2\xA0\x686\x3\x2\x2\x2\xA2\x68A\x3\x2\x2\x2\xA4\x696\x3" +
            "\x2\x2\x2\xA6\x6A2\x3\x2\x2\x2\xA8\x6BE\x3\x2\x2\x2\xAA\x6CA\x3\x2\x2" +
            "\x2\xAC\x6F0\x3\x2\x2\x2\xAE\x6F2\x3\x2\x2\x2\xB0\x71B\x3\x2\x2\x2\xB2" +
            "\x71D\x3\x2\x2\x2\xB4\x72A\x3\x2\x2\x2\xB6\x736\x3\x2\x2\x2\xB8\x742\x3" +
            "\x2\x2\x2\xBA\x747\x3\x2\x2\x2\xBC\x767\x3\x2\x2\x2\xBE\x774\x3\x2\x2" +
            "\x2\xC0\x786\x3\x2\x2\x2\xC2\x7A0\x3\x2\x2\x2\xC4\x7A9\x3\x2\x2\x2\xC6" +
            "\x7AD\x3\x2\x2\x2\xC8\x7FC\x3\x2\x2\x2\xCA\x8BA\x3\x2\x2\x2\xCC\x8C3\x3" +
            "\x2\x2\x2\xCE\x8D1\x3\x2\x2\x2\xD0\x8EC\x3\x2\x2\x2\xD2\x8FE\x3\x2\x2" +
            "\x2\xD4\x90A\x3\x2\x2\x2\xD6\x921\x3\x2\x2\x2\xD8\x92F\x3\x2\x2\x2\xDA" +
            "\x935\x3\x2\x2\x2\xDC\x937\x3\x2\x2\x2\xDE\x958\x3\x2\x2\x2\xE0\x97F\x3" +
            "\x2\x2\x2\xE2\x982\x3\x2\x2\x2\xE4\x99C\x3\x2\x2\x2\xE6\x9B1\x3\x2\x2" +
            "\x2\xE8\x9B3\x3\x2\x2\x2\xEA\x9C8\x3\x2\x2\x2\xEC\x9EC\x3\x2\x2\x2\xEE" +
            "\xA02\x3\x2\x2\x2\xF0\xA07\x3\x2\x2\x2\xF2\xA15\x3\x2\x2\x2\xF4\xA29\x3" +
            "\x2\x2\x2\xF6\xA34\x3\x2\x2\x2\xF8\xA39\x3\x2\x2\x2\xFA\xA54\x3\x2\x2" +
            "\x2\xFC\xA75\x3\x2\x2\x2\xFE\xA7B\x3\x2\x2\x2\x100\xA8E\x3\x2\x2\x2\x102" +
            "\xA94\x3\x2\x2\x2\x104\xA98\x3\x2\x2\x2\x106\xAA7\x3\x2\x2\x2\x108\xAB8" +
            "\x3\x2\x2\x2\x10A\xABA\x3\x2\x2\x2\x10C\xABC\x3\x2\x2\x2\x10E\xAC4\x3" +
            "\x2\x2\x2\x110\xACC\x3\x2\x2\x2\x112\xAD7\x3\x2\x2\x2\x114\xADA\x3\x2" +
            "\x2\x2\x116\xADE\x3\x2\x2\x2\x118\xAEA\x3\x2\x2\x2\x11A\xAEC\x3\x2\x2" +
            "\x2\x11C\xAEE\x3\x2\x2\x2\x11E\x11F\x5\x4\x3\x2\x11F\x120\a\x2\x2\x3\x120" +
            "\x3\x3\x2\x2\x2\x121\x123\a\xDA\x2\x2\x122\x121\x3\x2\x2\x2\x122\x123" +
            "\x3\x2\x2\x2\x123\x127\x3\x2\x2\x2\x124\x126\a\xD8\x2\x2\x125\x124\x3" +
            "\x2\x2\x2\x126\x129\x3\x2\x2\x2\x127\x125\x3\x2\x2\x2\x127\x128\x3\x2" +
            "\x2\x2\x128\x130\x3\x2\x2\x2\x129\x127\x3\x2\x2\x2\x12A\x12C\x5\x6\x4" +
            "\x2\x12B\x12D\a\xD8\x2\x2\x12C\x12B\x3\x2\x2\x2\x12D\x12E\x3\x2\x2\x2" +
            "\x12E\x12C\x3\x2\x2\x2\x12E\x12F\x3\x2\x2\x2\x12F\x131\x3\x2\x2\x2\x130" +
            "\x12A\x3\x2\x2\x2\x130\x131\x3\x2\x2\x2\x131\x133\x3\x2\x2\x2\x132\x134" +
            "\x5\b\x5\x2\x133\x132\x3\x2\x2\x2\x133\x134\x3\x2\x2\x2\x134\x138\x3\x2" +
            "\x2\x2\x135\x137\a\xD8\x2\x2\x136\x135\x3\x2\x2\x2\x137\x13A\x3\x2\x2" +
            "\x2\x138\x136\x3\x2\x2\x2\x138\x139\x3\x2\x2\x2\x139\x13C\x3\x2\x2\x2" +
            "\x13A\x138\x3\x2\x2\x2\x13B\x13D\x5\f\a\x2\x13C\x13B\x3\x2\x2\x2\x13C" +
            "\x13D\x3\x2\x2\x2\x13D\x141\x3\x2\x2\x2\x13E\x140\a\xD8\x2\x2\x13F\x13E" +
            "\x3\x2\x2\x2\x140\x143\x3\x2\x2\x2\x141\x13F\x3\x2\x2\x2\x141\x142\x3" +
            "\x2\x2\x2\x142\x145\x3\x2\x2\x2\x143\x141\x3\x2\x2\x2\x144\x146\x5\xE" +
            "\b\x2\x145\x144\x3\x2\x2\x2\x145\x146\x3\x2\x2\x2\x146\x14A\x3\x2\x2\x2" +
            "\x147\x149\a\xD8\x2\x2\x148\x147\x3\x2\x2\x2\x149\x14C\x3\x2\x2\x2\x14A" +
            "\x148\x3\x2\x2\x2\x14A\x14B\x3\x2\x2\x2\x14B\x14E\x3\x2\x2\x2\x14C\x14A" +
            "\x3\x2\x2\x2\x14D\x14F\x5\x14\v\x2\x14E\x14D\x3\x2\x2\x2\x14E\x14F\x3" +
            "\x2\x2\x2\x14F\x153\x3\x2\x2\x2\x150\x152\a\xD8\x2\x2\x151\x150\x3\x2" +
            "\x2\x2\x152\x155\x3\x2\x2\x2\x153\x151\x3\x2\x2\x2\x153\x154\x3\x2\x2" +
            "\x2\x154\x157\x3\x2\x2\x2\x155\x153\x3\x2\x2\x2\x156\x158\a\xDA\x2\x2" +
            "\x157\x156\x3\x2\x2\x2\x157\x158\x3\x2\x2\x2\x158\x5\x3\x2\x2\x2\x159" +
            "\x15A\a\xB5\x2\x2\x15A\x15B\a\xDA\x2\x2\x15B\x15C\a\xD5\x2\x2\x15C\x15D" +
            "\a\xDA\x2\x2\x15D\x15E\a\x1F\x2\x2\x15E\a\x3\x2\x2\x2\x15F\x161\a\x14" +
            "\x2\x2\x160\x162\a\xD8\x2\x2\x161\x160\x3\x2\x2\x2\x162\x163\x3\x2\x2" +
            "\x2\x163\x161\x3\x2\x2\x2\x163\x164\x3\x2\x2\x2\x164\x166\x3\x2\x2\x2" +
            "\x165\x167\x5\n\x6\x2\x166\x165\x3\x2\x2\x2\x167\x168\x3\x2\x2\x2\x168" +
            "\x166\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2\x169\x16A\x3\x2\x2\x2\x16A\x16C" +
            "\a\x41\x2\x2\x16B\x16D\a\xD8\x2\x2\x16C\x16B\x3\x2\x2\x2\x16D\x16E\x3" +
            "\x2\x2\x2\x16E\x16C\x3\x2\x2\x2\x16E\x16F\x3\x2\x2\x2\x16F\t\x3\x2\x2" +
            "\x2\x170\x172\x5\x102\x82\x2\x171\x173\a\xDA\x2\x2\x172\x171\x3\x2\x2" +
            "\x2\x172\x173\x3\x2\x2\x2\x173\x174\x3\x2\x2\x2\x174\x176\a\xC0\x2\x2" +
            "\x175\x177\a\xDA\x2\x2\x176\x175\x3\x2\x2\x2\x176\x177\x3\x2\x2\x2\x177" +
            "\x178\x3\x2\x2\x2\x178\x179\x5\x114\x8B\x2\x179\x17A\a\xD8\x2\x2\x17A" +
            "\v\x3\x2\x2\x2\x17B\x17D\x5\x18\r\x2\x17C\x17E\a\xD8\x2\x2\x17D\x17C\x3" +
            "\x2\x2\x2\x17E\x17F\x3\x2\x2\x2\x17F\x17D\x3\x2\x2\x2\x17F\x180\x3\x2" +
            "\x2\x2\x180\x182\x3\x2\x2\x2\x181\x17B\x3\x2\x2\x2\x182\x183\x3\x2\x2" +
            "\x2\x183\x181\x3\x2\x2\x2\x183\x184\x3\x2\x2\x2\x184\r\x3\x2\x2\x2\x185" +
            "\x18E\x5\x12\n\x2\x186\x188\a\xD8\x2\x2\x187\x186\x3\x2\x2\x2\x188\x189" +
            "\x3\x2\x2\x2\x189\x187\x3\x2\x2\x2\x189\x18A\x3\x2\x2\x2\x18A\x18B\x3" +
            "\x2\x2\x2\x18B\x18D\x5\x12\n\x2\x18C\x187\x3\x2\x2\x2\x18D\x190\x3\x2" +
            "\x2\x2\x18E\x18C\x3\x2\x2\x2\x18E\x18F\x3\x2\x2\x2\x18F\xF\x3\x2\x2\x2" +
            "\x190\x18E\x3\x2\x2\x2\x191\x193\a~\x2\x2\x192\x194\a\xDA\x2\x2\x193\x192" +
            "\x3\x2\x2\x2\x193\x194\x3\x2\x2\x2\x194\x195\x3\x2\x2\x2\x195\x19E\a\xD3" +
            "\x2\x2\x196\x198\a\x80\x2\x2\x197\x199\a\xDA\x2\x2\x198\x197\x3\x2\x2" +
            "\x2\x198\x199\x3\x2\x2\x2\x199\x19A\x3\x2\x2\x2\x19A\x19E\t\x2\x2\x2\x19B" +
            "\x19E\a\x7F\x2\x2\x19C\x19E\a\x81\x2\x2\x19D\x191\x3\x2\x2\x2\x19D\x196" +
            "\x3\x2\x2\x2\x19D\x19B\x3\x2\x2\x2\x19D\x19C\x3\x2\x2\x2\x19E\x11\x3\x2" +
            "\x2\x2\x19F\x1AA\x5.\x18\x2\x1A0\x1AA\x5\x38\x1D\x2\x1A1\x1AA\x5@!\x2" +
            "\x1A2\x1AA\x5(\x15\x2\x1A3\x1AA\x5\\/\x2\x1A4\x1AA\x5\xCA\x66\x2\x1A5" +
            "\x1AA\x5l\x37\x2\x1A6\x1AA\x5n\x38\x2\x1A7\x1AA\x5\x10\t\x2\x1A8\x1AA" +
            "\x5\xBE`\x2\x1A9\x19F\x3\x2\x2\x2\x1A9\x1A0\x3\x2\x2\x2\x1A9\x1A1\x3\x2" +
            "\x2\x2\x1A9\x1A2\x3\x2\x2\x2\x1A9\x1A3\x3\x2\x2\x2\x1A9\x1A4\x3\x2\x2" +
            "\x2\x1A9\x1A5\x3\x2\x2\x2\x1A9\x1A6\x3\x2\x2\x2\x1A9\x1A7\x3\x2\x2\x2" +
            "\x1A9\x1A8\x3\x2\x2\x2\x1AA\x13\x3\x2\x2\x2\x1AB\x1B4\x5\x16\f\x2\x1AC" +
            "\x1AE\a\xD8\x2\x2\x1AD\x1AC\x3\x2\x2\x2\x1AE\x1AF\x3\x2\x2\x2\x1AF\x1AD" +
            "\x3\x2\x2\x2\x1AF\x1B0\x3\x2\x2\x2\x1B0\x1B1\x3\x2\x2\x2\x1B1\x1B3\x5" +
            "\x16\f\x2\x1B2\x1AD\x3\x2\x2\x2\x1B3\x1B6\x3\x2\x2\x2\x1B4\x1B2\x3\x2" +
            "\x2\x2\x1B4\x1B5\x3\x2\x2\x2\x1B5\x15\x3\x2\x2\x2\x1B6\x1B4\x3\x2\x2\x2" +
            "\x1B7\x1BF\x5J&\x2\x1B8\x1BF\x5n\x38\x2\x1B9\x1BF\x5l\x37\x2\x1BA\x1BF" +
            "\x5\x8A\x46\x2\x1BB\x1BF\x5\x8CG\x2\x1BC\x1BF\x5\x8EH\x2\x1BD\x1BF\x5" +
            "\xBA^\x2\x1BE\x1B7\x3\x2\x2\x2\x1BE\x1B8\x3\x2\x2\x2\x1BE\x1B9\x3\x2\x2" +
            "\x2\x1BE\x1BA\x3\x2\x2\x2\x1BE\x1BB\x3\x2\x2\x2\x1BE\x1BC\x3\x2\x2\x2" +
            "\x1BE\x1BD\x3\x2\x2\x2\x1BF\x17\x3\x2\x2\x2\x1C0\x1C1\a\x10\x2\x2\x1C1" +
            "\x1C2\a\xDA\x2\x2\x1C2\x1C4\x5\xE6t\x2\x1C3\x1C5\a\xDA\x2\x2\x1C4\x1C3" +
            "\x3\x2\x2\x2\x1C4\x1C5\x3\x2\x2\x2\x1C5\x1C6\x3\x2\x2\x2\x1C6\x1C8\a\xC0" +
            "\x2\x2\x1C7\x1C9\a\xDA\x2\x2\x1C8\x1C7\x3\x2\x2\x2\x1C8\x1C9\x3\x2\x2" +
            "\x2\x1C9\x1CA\x3\x2\x2\x2\x1CA\x1D5\x5\x114\x8B\x2\x1CB\x1CD\a\xDA\x2" +
            "\x2\x1CC\x1CB\x3\x2\x2\x2\x1CC\x1CD\x3\x2\x2\x2\x1CD\x1CE\x3\x2\x2\x2" +
            "\x1CE\x1D0\a\n\x2\x2\x1CF\x1D1\a\xDA\x2\x2\x1D0\x1CF\x3\x2\x2\x2\x1D0" +
            "\x1D1\x3\x2\x2\x2\x1D1\x1D2\x3\x2\x2\x2\x1D2\x1D4\x5\x114\x8B\x2\x1D3" +
            "\x1CC\x3\x2\x2\x2\x1D4\x1D7\x3\x2\x2\x2\x1D5\x1D3\x3\x2\x2\x2\x1D5\x1D6" +
            "\x3\x2\x2\x2\x1D6\x19\x3\x2\x2\x2\x1D7\x1D5\x3\x2\x2\x2\x1D8\x1DC\x5\x1C" +
            "\xF\x2\x1D9\x1DB\a\xDA\x2\x2\x1DA\x1D9\x3\x2\x2\x2\x1DB\x1DE\x3\x2\x2" +
            "\x2\x1DC\x1DA\x3\x2\x2\x2\x1DC\x1DD\x3\x2\x2\x2\x1DD\x1EB\x3\x2\x2\x2" +
            "\x1DE\x1DC\x3\x2\x2\x2\x1DF\x1E1\a\xD8\x2\x2\x1E0\x1DF\x3\x2\x2\x2\x1E1" +
            "\x1E4\x3\x2\x2\x2\x1E2\x1E0\x3\x2\x2\x2\x1E2\x1E3\x3\x2\x2\x2\x1E3\x1E6" +
            "\x3\x2\x2\x2\x1E4\x1E2\x3\x2\x2\x2\x1E5\x1E7\a\xDA\x2\x2\x1E6\x1E5\x3" +
            "\x2\x2\x2\x1E6\x1E7\x3\x2\x2\x2\x1E7\x1E8\x3\x2\x2\x2\x1E8\x1EA\x5\x1C" +
            "\xF\x2\x1E9\x1E2\x3\x2\x2\x2\x1EA\x1ED\x3\x2\x2\x2\x1EB\x1E9\x3\x2\x2" +
            "\x2\x1EB\x1EC\x3\x2\x2\x2\x1EC\x1EF\x3\x2\x2\x2\x1ED\x1EB\x3\x2\x2\x2" +
            "\x1EE\x1F0\a\xDA\x2\x2\x1EF\x1EE\x3\x2\x2\x2\x1EF\x1F0\x3\x2\x2\x2\x1F0" +
            "\x1F4\x3\x2\x2\x2\x1F1\x1F3\a\xD8\x2\x2\x1F2\x1F1\x3\x2\x2\x2\x1F3\x1F6" +
            "\x3\x2\x2\x2\x1F4\x1F2\x3\x2\x2\x2\x1F4\x1F5\x3\x2\x2\x2\x1F5\x1B\x3\x2" +
            "\x2\x2\x1F6\x1F4\x3\x2\x2\x2\x1F7\x23B\x5\x112\x8A\x2\x1F8\x23B\x5\x1E" +
            "\x10\x2\x1F9\x23B\x5\x18\r\x2\x1FA\x23B\x5 \x11\x2\x1FB\x23B\x5\"\x12" +
            "\x2\x1FC\x23B\x5$\x13\x2\x1FD\x23B\x5&\x14\x2\x1FE\x23B\x5(\x15\x2\x1FF" +
            "\x23B\x5,\x17\x2\x200\x23B\x5\x32\x1A\x2\x201\x23B\x5\x30\x19\x2\x202" +
            "\x23B\x5\x34\x1B\x2\x203\x23B\x5\x36\x1C\x2\x204\x23B\x5<\x1F\x2\x205" +
            "\x23B\x5> \x2\x206\x23B\x5\x42\"\x2\x207\x23B\x5\xDAn\x2\x208\x23B\x5" +
            "\x44#\x2\x209\x23B\x5\x46$\x2\x20A\x23B\x5H%\x2\x20B\x23B\x5L\'\x2\x20C" +
            "\x23B\x5N(\x2\x20D\x23B\x5P)\x2\x20E\x23B\x5R*\x2\x20F\x23B\x5\\/\x2\x210" +
            "\x23B\x5^\x30\x2\x211\x23B\x5`\x31\x2\x212\x23B\x5\x62\x32\x2\x213\x23B" +
            "\x5\x64\x33\x2\x214\x23B\x5\x66\x34\x2\x215\x23B\x5h\x35\x2\x216\x23B" +
            "\x5j\x36\x2\x217\x23B\x5n\x38\x2\x218\x23B\x5v<\x2\x219\x23B\x5x=\x2\x21A" +
            "\x23B\x5z>\x2\x21B\x23B\x5|?\x2\x21C\x23B\x5~@\x2\x21D\x23B\x5\x80\x41" +
            "\x2\x21E\x23B\x5\x82\x42\x2\x21F\x23B\x5\x88\x45\x2\x220\x23B\x5\x90I" +
            "\x2\x221\x23B\x5\x92J\x2\x222\x23B\x5\x94K\x2\x223\x23B\x5\x96L\x2\x224" +
            "\x23B\x5\x9AN\x2\x225\x23B\x5\x9CO\x2\x226\x23B\x5\x9EP\x2\x227\x23B\x5" +
            "\xA0Q\x2\x228\x23B\x5\xA2R\x2\x229\x23B\x5\xA4S\x2\x22A\x23B\x5\xA6T\x2" +
            "\x22B\x23B\x5\xA8U\x2\x22C\x23B\x5\xAAV\x2\x22D\x23B\x5\xB2Z\x2\x22E\x23B" +
            "\x5\xB4[\x2\x22F\x23B\x5\xB6\\\x2\x230\x23B\x5\xB8]\x2\x231\x23B\x5\xBC" +
            "_\x2\x232\x23B\x5\xC4\x63\x2\x233\x23B\x5\xC6\x64\x2\x234\x23B\x5\xCA" +
            "\x66\x2\x235\x23B\x5\xD0i\x2\x236\x23B\x5\xD2j\x2\x237\x23B\x5\xD4k\x2" +
            "\x238\x23B\x5\xD6l\x2\x239\x23B\x5\xE0q\x2\x23A\x1F7\x3\x2\x2\x2\x23A" +
            "\x1F8\x3\x2\x2\x2\x23A\x1F9\x3\x2\x2\x2\x23A\x1FA\x3\x2\x2\x2\x23A\x1FB" +
            "\x3\x2\x2\x2\x23A\x1FC\x3\x2\x2\x2\x23A\x1FD\x3\x2\x2\x2\x23A\x1FE\x3" +
            "\x2\x2\x2\x23A\x1FF\x3\x2\x2\x2\x23A\x200\x3\x2\x2\x2\x23A\x201\x3\x2" +
            "\x2\x2\x23A\x202\x3\x2\x2\x2\x23A\x203\x3\x2\x2\x2\x23A\x204\x3\x2\x2" +
            "\x2\x23A\x205\x3\x2\x2\x2\x23A\x206\x3\x2\x2\x2\x23A\x207\x3\x2\x2\x2" +
            "\x23A\x208\x3\x2\x2\x2\x23A\x209\x3\x2\x2\x2\x23A\x20A\x3\x2\x2\x2\x23A" +
            "\x20B\x3\x2\x2\x2\x23A\x20C\x3\x2\x2\x2\x23A\x20D\x3\x2\x2\x2\x23A\x20E" +
            "\x3\x2\x2\x2\x23A\x20F\x3\x2\x2\x2\x23A\x210\x3\x2\x2\x2\x23A\x211\x3" +
            "\x2\x2\x2\x23A\x212\x3\x2\x2\x2\x23A\x213\x3\x2\x2\x2\x23A\x214\x3\x2" +
            "\x2\x2\x23A\x215\x3\x2\x2\x2\x23A\x216\x3\x2\x2\x2\x23A\x217\x3\x2\x2" +
            "\x2\x23A\x218\x3\x2\x2\x2\x23A\x219\x3\x2\x2\x2\x23A\x21A\x3\x2\x2\x2" +
            "\x23A\x21B\x3\x2\x2\x2\x23A\x21C\x3\x2\x2\x2\x23A\x21D\x3\x2\x2\x2\x23A" +
            "\x21E\x3\x2\x2\x2\x23A\x21F\x3\x2\x2\x2\x23A\x220\x3\x2\x2\x2\x23A\x221" +
            "\x3\x2\x2\x2\x23A\x222\x3\x2\x2\x2\x23A\x223\x3\x2\x2\x2\x23A\x224\x3" +
            "\x2\x2\x2\x23A\x225\x3\x2\x2\x2\x23A\x226\x3\x2\x2\x2\x23A\x227\x3\x2" +
            "\x2\x2\x23A\x228\x3\x2\x2\x2\x23A\x229\x3\x2\x2\x2\x23A\x22A\x3\x2\x2" +
            "\x2\x23A\x22B\x3\x2\x2\x2\x23A\x22C\x3\x2\x2\x2\x23A\x22D\x3\x2\x2\x2" +
            "\x23A\x22E\x3\x2\x2\x2\x23A\x22F\x3\x2\x2\x2\x23A\x230\x3\x2\x2\x2\x23A" +
            "\x231\x3\x2\x2\x2\x23A\x232\x3\x2\x2\x2\x23A\x233\x3\x2\x2\x2\x23A\x234" +
            "\x3\x2\x2\x2\x23A\x235\x3\x2\x2\x2\x23A\x236\x3\x2\x2\x2\x23A\x237\x3" +
            "\x2\x2\x2\x23A\x238\x3\x2\x2\x2\x23A\x239\x3\x2\x2\x2\x23B\x1D\x3\x2\x2" +
            "\x2\x23C\x23D\a\x11\x2\x2\x23D\x23E\a\xDA\x2\x2\x23E\x247\x5\xC8\x65\x2" +
            "\x23F\x241\a\xDA\x2\x2\x240\x23F\x3\x2\x2\x2\x240\x241\x3\x2\x2\x2\x241" +
            "\x242\x3\x2\x2\x2\x242\x244\a\n\x2\x2\x243\x245\a\xDA\x2\x2\x244\x243" +
            "\x3\x2\x2\x2\x244\x245\x3\x2\x2\x2\x245\x246\x3\x2\x2\x2\x246\x248\x5" +
            "\xC8\x65\x2\x247\x240\x3\x2\x2\x2\x247\x248\x3\x2\x2\x2\x248\x1F\x3\x2" +
            "\x2\x2\x249\x24A\a\x15\x2\x2\x24A!\x3\x2\x2\x2\x24B\x24C\a\x1D\x2\x2\x24C" +
            "\x24D\a\xDA\x2\x2\x24D\x24E\x5\xC8\x65\x2\x24E#\x3\x2\x2\x2\x24F\x250" +
            "\a\x1E\x2\x2\x250\x251\a\xDA\x2\x2\x251\x252\x5\xC8\x65\x2\x252%\x3\x2" +
            "\x2\x2\x253\x263\a \x2\x2\x254\x255\a\xDA\x2\x2\x255\x260\x5\xD8m\x2\x256" +
            "\x258\a\xDA\x2\x2\x257\x256\x3\x2\x2\x2\x257\x258\x3\x2\x2\x2\x258\x259" +
            "\x3\x2\x2\x2\x259\x25B\a\n\x2\x2\x25A\x25C\a\xDA\x2\x2\x25B\x25A\x3\x2" +
            "\x2\x2\x25B\x25C\x3\x2\x2\x2\x25C\x25D\x3\x2\x2\x2\x25D\x25F\x5\xD8m\x2" +
            "\x25E\x257\x3\x2\x2\x2\x25F\x262\x3\x2\x2\x2\x260\x25E\x3\x2\x2\x2\x260" +
            "\x261\x3\x2\x2\x2\x261\x264\x3\x2\x2\x2\x262\x260\x3\x2\x2\x2\x263\x254" +
            "\x3\x2\x2\x2\x263\x264\x3\x2\x2\x2\x264\'\x3\x2\x2\x2\x265\x266\x5\x11A" +
            "\x8E\x2\x266\x267\a\xDA\x2\x2\x267\x269\x3\x2\x2\x2\x268\x265\x3\x2\x2" +
            "\x2\x268\x269\x3\x2\x2\x2\x269\x26A\x3\x2\x2\x2\x26A\x26B\a\"\x2\x2\x26B" +
            "\x26C\a\xDA\x2\x2\x26C\x277\x5*\x16\x2\x26D\x26F\a\xDA\x2\x2\x26E\x26D" +
            "\x3\x2\x2\x2\x26E\x26F\x3\x2\x2\x2\x26F\x270\x3\x2\x2\x2\x270\x272\a\n" +
            "\x2\x2\x271\x273\a\xDA\x2\x2\x272\x271\x3\x2\x2\x2\x272\x273\x3\x2\x2" +
            "\x2\x273\x274\x3\x2\x2\x2\x274\x276\x5*\x16\x2\x275\x26E\x3\x2\x2\x2\x276" +
            "\x279\x3\x2\x2\x2\x277\x275\x3\x2\x2\x2\x277\x278\x3\x2\x2\x2\x278)\x3" +
            "\x2\x2\x2\x279\x277\x3\x2\x2\x2\x27A\x27C\x5\x102\x82\x2\x27B\x27D\x5" +
            "\x118\x8D\x2\x27C\x27B\x3\x2\x2\x2\x27C\x27D\x3\x2\x2\x2\x27D\x280\x3" +
            "\x2\x2\x2\x27E\x27F\a\xDA\x2\x2\x27F\x281\x5\x104\x83\x2\x280\x27E\x3" +
            "\x2\x2\x2\x280\x281\x3\x2\x2\x2\x281\x283\x3\x2\x2\x2\x282\x284\a\xDA" +
            "\x2\x2\x283\x282\x3\x2\x2\x2\x283\x284\x3\x2\x2\x2\x284\x285\x3\x2\x2" +
            "\x2\x285\x287\a\xC0\x2\x2\x286\x288\a\xDA\x2\x2\x287\x286\x3\x2\x2\x2" +
            "\x287\x288\x3\x2\x2\x2\x288\x289\x3\x2\x2\x2\x289\x28A\x5\xC8\x65\x2\x28A" +
            "+\x3\x2\x2\x2\x28B\x28D\a$\x2\x2\x28C\x28E\a\xDA\x2\x2\x28D\x28C\x3\x2" +
            "\x2\x2\x28D\x28E\x3\x2\x2\x2\x28E\x28F\x3\x2\x2\x2\x28F\x291\a\xC0\x2" +
            "\x2\x290\x292\a\xDA\x2\x2\x291\x290\x3\x2\x2\x2\x291\x292\x3\x2\x2\x2" +
            "\x292\x293\x3\x2\x2\x2\x293\x294\x5\xC8\x65\x2\x294-\x3\x2\x2\x2\x295" +
            "\x296\x5\x11A\x8E\x2\x296\x297\a\xDA\x2\x2\x297\x299\x3\x2\x2\x2\x298" +
            "\x295\x3\x2\x2\x2\x298\x299\x3\x2\x2\x2\x299\x29A\x3\x2\x2\x2\x29A\x29B" +
            "\a%\x2\x2\x29B\x29E\a\xDA\x2\x2\x29C\x29D\a\x8B\x2\x2\x29D\x29F\a\xDA" +
            "\x2\x2\x29E\x29C\x3\x2\x2\x2\x29E\x29F\x3\x2\x2\x2\x29F\x2A5\x3\x2\x2" +
            "\x2\x2A0\x2A2\aP\x2\x2\x2A1\x2A3\x5\x118\x8D\x2\x2A2\x2A1\x3\x2\x2\x2" +
            "\x2A2\x2A3\x3\x2\x2\x2\x2A3\x2A6\x3\x2\x2\x2\x2A4\x2A6\a\xA8\x2\x2\x2A5" +
            "\x2A0\x3\x2\x2\x2\x2A5\x2A4\x3\x2\x2\x2\x2A6\x2A7\x3\x2\x2\x2\x2A7\x2A8" +
            "\a\xDA\x2\x2\x2A8\x2AA\x5\x102\x82\x2\x2A9\x2AB\x5\x118\x8D\x2\x2AA\x2A9" +
            "\x3\x2\x2\x2\x2AA\x2AB\x3\x2\x2\x2\x2AB\x2AC\x3\x2\x2\x2\x2AC\x2AD\a\xDA" +
            "\x2\x2\x2AD\x2AE\a\x63\x2\x2\x2AE\x2AF\a\xDA\x2\x2\x2AF\x2B4\a\xD0\x2" +
            "\x2\x2B0\x2B1\a\xDA\x2\x2\x2B1\x2B2\a\xE\x2\x2\x2B2\x2B3\a\xDA\x2\x2\x2B3" +
            "\x2B5\a\xD0\x2\x2\x2B4\x2B0\x3\x2\x2\x2\x2B4\x2B5\x3\x2\x2\x2\x2B5\x2BA" +
            "\x3\x2\x2\x2\x2B6\x2B8\a\xDA\x2\x2\x2B7\x2B6\x3\x2\x2\x2\x2B7\x2B8\x3" +
            "\x2\x2\x2\x2B8\x2B9\x3\x2\x2\x2\x2B9\x2BB\x5\xF8}\x2\x2BA\x2B7\x3\x2\x2" +
            "\x2\x2BA\x2BB\x3\x2\x2\x2\x2BB\x2BE\x3\x2\x2\x2\x2BC\x2BD\a\xDA\x2\x2" +
            "\x2BD\x2BF\x5\x104\x83\x2\x2BE\x2BC\x3\x2\x2\x2\x2BE\x2BF\x3\x2\x2\x2" +
            "\x2BF/\x3\x2\x2\x2\x2C0\x2C1\t\x3\x2\x2\x2C1\x2C2\a\xDA\x2\x2\x2C2\x2CD" +
            "\x5\x110\x89\x2\x2C3\x2C5\a\xDA\x2\x2\x2C4\x2C3\x3\x2\x2\x2\x2C4\x2C5" +
            "\x3\x2\x2\x2\x2C5\x2C6\x3\x2\x2\x2\x2C6\x2C8\a\n\x2\x2\x2C7\x2C9\a\xDA" +
            "\x2\x2\x2C8\x2C7\x3\x2\x2\x2\x2C8\x2C9\x3\x2\x2\x2\x2C9\x2CA\x3\x2\x2" +
            "\x2\x2CA\x2CC\x5\x110\x89\x2\x2CB\x2C4\x3\x2\x2\x2\x2CC\x2CF\x3\x2\x2" +
            "\x2\x2CD\x2CB\x3\x2\x2\x2\x2CD\x2CE\x3\x2\x2\x2\x2CE\x31\x3\x2\x2\x2\x2CF" +
            "\x2CD\x3\x2\x2\x2\x2D0\x2D1\a\x32\x2\x2\x2D1\x2D2\a\xDA\x2\x2\x2D2\x2D4" +
            "\x5\xC8\x65\x2\x2D3\x2D5\a\xDA\x2\x2\x2D4\x2D3\x3\x2\x2\x2\x2D4\x2D5\x3" +
            "\x2\x2\x2\x2D5\x2D6\x3\x2\x2\x2\x2D6\x2D8\a\n\x2\x2\x2D7\x2D9\a\xDA\x2" +
            "\x2\x2D8\x2D7\x3\x2\x2\x2\x2D8\x2D9\x3\x2\x2\x2\x2D9\x2DA\x3\x2\x2\x2" +
            "\x2DA\x2E3\x5\xC8\x65\x2\x2DB\x2DD\a\xDA\x2\x2\x2DC\x2DB\x3\x2\x2\x2\x2DC" +
            "\x2DD\x3\x2\x2\x2\x2DD\x2DE\x3\x2\x2\x2\x2DE\x2E0\a\n\x2\x2\x2DF\x2E1" +
            "\a\xDA\x2\x2\x2E0\x2DF\x3\x2\x2\x2\x2E0\x2E1\x3\x2\x2\x2\x2E1\x2E2\x3" +
            "\x2\x2\x2\x2E2\x2E4\x5\xC8\x65\x2\x2E3\x2DC\x3\x2\x2\x2\x2E3\x2E4\x3\x2" +
            "\x2\x2\x2E4\x33\x3\x2\x2\x2\x2E5\x2E7\a\x34\x2\x2\x2E6\x2E8\a\xD8\x2\x2" +
            "\x2E7\x2E6\x3\x2\x2\x2\x2E8\x2E9\x3\x2\x2\x2\x2E9\x2E7\x3\x2\x2\x2\x2E9" +
            "\x2EA\x3\x2\x2\x2\x2EA\x2F1\x3\x2\x2\x2\x2EB\x2ED\x5\x1A\xE\x2\x2EC\x2EE" +
            "\a\xD8\x2\x2\x2ED\x2EC\x3\x2\x2\x2\x2EE\x2EF\x3\x2\x2\x2\x2EF\x2ED\x3" +
            "\x2\x2\x2\x2EF\x2F0\x3\x2\x2\x2\x2F0\x2F2\x3\x2\x2\x2\x2F1\x2EB\x3\x2" +
            "\x2\x2\x2F1\x2F2\x3\x2\x2\x2\x2F2\x2F3\x3\x2\x2\x2\x2F3\x31B\a`\x2\x2" +
            "\x2F4\x2F5\a\x34\x2\x2\x2F5\x2F6\a\xDA\x2\x2\x2F6\x2F7\t\x4\x2\x2\x2F7" +
            "\x2F8\a\xDA\x2\x2\x2F8\x2FA\x5\xC8\x65\x2\x2F9\x2FB\a\xD8\x2\x2\x2FA\x2F9" +
            "\x3\x2\x2\x2\x2FB\x2FC\x3\x2\x2\x2\x2FC\x2FA\x3\x2\x2\x2\x2FC\x2FD\x3" +
            "\x2\x2\x2\x2FD\x304\x3\x2\x2\x2\x2FE\x300\x5\x1A\xE\x2\x2FF\x301\a\xD8" +
            "\x2\x2\x300\x2FF\x3\x2\x2\x2\x301\x302\x3\x2\x2\x2\x302\x300\x3\x2\x2" +
            "\x2\x302\x303\x3\x2\x2\x2\x303\x305\x3\x2\x2\x2\x304\x2FE\x3\x2\x2\x2" +
            "\x304\x305\x3\x2\x2\x2\x305\x306\x3\x2\x2\x2\x306\x307\a`\x2\x2\x307\x31B" +
            "\x3\x2\x2\x2\x308\x30A\a\x34\x2\x2\x309\x30B\a\xD8\x2\x2\x30A\x309\x3" +
            "\x2\x2\x2\x30B\x30C\x3\x2\x2\x2\x30C\x30A\x3\x2\x2\x2\x30C\x30D\x3\x2" +
            "\x2\x2\x30D\x30E\x3\x2\x2\x2\x30E\x310\x5\x1A\xE\x2\x30F\x311\a\xD8\x2" +
            "\x2\x310\x30F\x3\x2\x2\x2\x311\x312\x3\x2\x2\x2\x312\x310\x3\x2\x2\x2" +
            "\x312\x313\x3\x2\x2\x2\x313\x314\x3\x2\x2\x2\x314\x315\a`\x2\x2\x315\x316" +
            "\a\xDA\x2\x2\x316\x317\t\x4\x2\x2\x317\x318\a\xDA\x2\x2\x318\x319\x5\xC8" +
            "\x65\x2\x319\x31B\x3\x2\x2\x2\x31A\x2E5\x3\x2\x2\x2\x31A\x2F4\x3\x2\x2" +
            "\x2\x31A\x308\x3\x2\x2\x2\x31B\x35\x3\x2\x2\x2\x31C\x31D\a\x41\x2\x2\x31D" +
            "\x37\x3\x2\x2\x2\x31E\x31F\x5\x11A\x8E\x2\x31F\x320\a\xDA\x2\x2\x320\x322" +
            "\x3\x2\x2\x2\x321\x31E\x3\x2\x2\x2\x321\x322\x3\x2\x2\x2\x322\x323\x3" +
            "\x2\x2\x2\x323\x324\a\x42\x2\x2\x324\x325\a\xDA\x2\x2\x325\x327\x5\x102" +
            "\x82\x2\x326\x328\a\xD8\x2\x2\x327\x326\x3\x2\x2\x2\x328\x329\x3\x2\x2" +
            "\x2\x329\x327\x3\x2\x2\x2\x329\x32A\x3\x2\x2\x2\x32A\x32E\x3\x2\x2\x2" +
            "\x32B\x32D\x5:\x1E\x2\x32C\x32B\x3\x2\x2\x2\x32D\x330\x3\x2\x2\x2\x32E" +
            "\x32C\x3\x2\x2\x2\x32E\x32F\x3\x2\x2\x2\x32F\x331\x3\x2\x2\x2\x330\x32E" +
            "\x3\x2\x2\x2\x331\x332\a\x39\x2\x2\x332\x39\x3\x2\x2\x2\x333\x33C\x5\x102" +
            "\x82\x2\x334\x336\a\xDA\x2\x2\x335\x334\x3\x2\x2\x2\x335\x336\x3\x2\x2" +
            "\x2\x336\x337\x3\x2\x2\x2\x337\x339\a\xC0\x2\x2\x338\x33A\a\xDA\x2\x2" +
            "\x339\x338\x3\x2\x2\x2\x339\x33A\x3\x2\x2\x2\x33A\x33B\x3\x2\x2\x2\x33B" +
            "\x33D\x5\xC8\x65\x2\x33C\x335\x3\x2\x2\x2\x33C\x33D\x3\x2\x2\x2\x33D\x33F" +
            "\x3\x2\x2\x2\x33E\x340\a\xD8\x2\x2\x33F\x33E\x3\x2\x2\x2\x340\x341\x3" +
            "\x2\x2\x2\x341\x33F\x3\x2\x2\x2\x341\x342\x3\x2\x2\x2\x342;\x3\x2\x2\x2" +
            "\x343\x344\a\x44\x2\x2\x344\x345\a\xDA\x2\x2\x345\x346\x5\xC8\x65\x2\x346" +
            "=\x3\x2\x2\x2\x347\x348\a\x45\x2\x2\x348\x349\a\xDA\x2\x2\x349\x34A\x5" +
            "\xC8\x65\x2\x34A?\x3\x2\x2\x2\x34B\x34C\x5\x11A\x8E\x2\x34C\x34D\a\xDA" +
            "\x2\x2\x34D\x34F\x3\x2\x2\x2\x34E\x34B\x3\x2\x2\x2\x34E\x34F\x3\x2\x2" +
            "\x2\x34F\x350\x3\x2\x2\x2\x350\x351\a\x46\x2\x2\x351\x352\a\xDA\x2\x2" +
            "\x352\x354\x5\x102\x82\x2\x353\x355\a\xDA\x2\x2\x354\x353\x3\x2\x2\x2" +
            "\x354\x355\x3\x2\x2\x2\x355\x356\x3\x2\x2\x2\x356\x357\x5\xF8}\x2\x357" +
            "\x41\x3\x2\x2\x2\x358\x359\t\x5\x2\x2\x359\x43\x3\x2\x2\x2\x35A\x35B\a" +
            "M\x2\x2\x35B\x35C\a\xDA\x2\x2\x35C\x35E\x5\xC8\x65\x2\x35D\x35F\a\xDA" +
            "\x2\x2\x35E\x35D\x3\x2\x2\x2\x35E\x35F\x3\x2\x2\x2\x35F\x360\x3\x2\x2" +
            "\x2\x360\x362\a\n\x2\x2\x361\x363\a\xDA\x2\x2\x362\x361\x3\x2\x2\x2\x362" +
            "\x363\x3\x2\x2\x2\x363\x364\x3\x2\x2\x2\x364\x365\x5\xC8\x65\x2\x365\x45" +
            "\x3\x2\x2\x2\x366\x367\aO\x2\x2\x367\x368\a\xDA\x2\x2\x368\x369\a\x36" +
            "\x2\x2\x369\x36A\a\xDA\x2\x2\x36A\x36C\x5\x102\x82\x2\x36B\x36D\x5\x118" +
            "\x8D\x2\x36C\x36B\x3\x2\x2\x2\x36C\x36D\x3\x2\x2\x2\x36D\x36E\x3\x2\x2" +
            "\x2\x36E\x36F\a\xDA\x2\x2\x36F\x370\aX\x2\x2\x370\x371\a\xDA\x2\x2\x371" +
            "\x373\x5\xC8\x65\x2\x372\x374\a\xD8\x2\x2\x373\x372\x3\x2\x2\x2\x374\x375" +
            "\x3\x2\x2\x2\x375\x373\x3\x2\x2\x2\x375\x376\x3\x2\x2\x2\x376\x37D\x3" +
            "\x2\x2\x2\x377\x379\x5\x1A\xE\x2\x378\x37A\a\xD8\x2\x2\x379\x378\x3\x2" +
            "\x2\x2\x37A\x37B\x3\x2\x2\x2\x37B\x379\x3\x2\x2\x2\x37B\x37C\x3\x2\x2" +
            "\x2\x37C\x37E\x3\x2\x2\x2\x37D\x377\x3\x2\x2\x2\x37D\x37E\x3\x2\x2\x2" +
            "\x37E\x37F\x3\x2\x2\x2\x37F\x382\at\x2\x2\x380\x381\a\xDA\x2\x2\x381\x383" +
            "\x5\x102\x82\x2\x382\x380\x3\x2\x2\x2\x382\x383\x3\x2\x2\x2\x383G\x3\x2" +
            "\x2\x2\x384\x385\aO\x2\x2\x385\x386\a\xDA\x2\x2\x386\x388\x5\x102\x82" +
            "\x2\x387\x389\x5\x118\x8D\x2\x388\x387\x3\x2\x2\x2\x388\x389\x3\x2\x2" +
            "\x2\x389\x38C\x3\x2\x2\x2\x38A\x38B\a\xDA\x2\x2\x38B\x38D\x5\x104\x83" +
            "\x2\x38C\x38A\x3\x2\x2\x2\x38C\x38D\x3\x2\x2\x2\x38D\x38F\x3\x2\x2\x2" +
            "\x38E\x390\a\xDA\x2\x2\x38F\x38E\x3\x2\x2\x2\x38F\x390\x3\x2\x2\x2\x390" +
            "\x391\x3\x2\x2\x2\x391\x393\a\xC0\x2\x2\x392\x394\a\xDA\x2\x2\x393\x392" +
            "\x3\x2\x2\x2\x393\x394\x3\x2\x2\x2\x394\x395\x3\x2\x2\x2\x395\x396\x5" +
            "\xC8\x65\x2\x396\x397\a\xDA\x2\x2\x397\x398\a\xAD\x2\x2\x398\x399\a\xDA" +
            "\x2\x2\x399\x39E\x5\xC8\x65\x2\x39A\x39B\a\xDA\x2\x2\x39B\x39C\a\xA5\x2" +
            "\x2\x39C\x39D\a\xDA\x2\x2\x39D\x39F\x5\xC8\x65\x2\x39E\x39A\x3\x2\x2\x2" +
            "\x39E\x39F\x3\x2\x2\x2\x39F\x3A1\x3\x2\x2\x2\x3A0\x3A2\a\xD8\x2\x2\x3A1" +
            "\x3A0\x3\x2\x2\x2\x3A2\x3A3\x3\x2\x2\x2\x3A3\x3A1\x3\x2\x2\x2\x3A3\x3A4" +
            "\x3\x2\x2\x2\x3A4\x3AB\x3\x2\x2\x2\x3A5\x3A7\x5\x1A\xE\x2\x3A6\x3A8\a" +
            "\xD8\x2\x2\x3A7\x3A6\x3\x2\x2\x2\x3A8\x3A9\x3\x2\x2\x2\x3A9\x3A7\x3\x2" +
            "\x2\x2\x3A9\x3AA\x3\x2\x2\x2\x3AA\x3AC\x3\x2\x2\x2\x3AB\x3A5\x3\x2\x2" +
            "\x2\x3AB\x3AC\x3\x2\x2\x2\x3AC\x3AD\x3\x2\x2\x2\x3AD\x3B0\at\x2\x2\x3AE" +
            "\x3AF\a\xDA\x2\x2\x3AF\x3B1\x5\x102\x82\x2\x3B0\x3AE\x3\x2\x2\x2\x3B0" +
            "\x3B1\x3\x2\x2\x2\x3B1I\x3\x2\x2\x2\x3B2\x3B3\x5\x11A\x8E\x2\x3B3\x3B4" +
            "\a\xDA\x2\x2\x3B4\x3B6\x3\x2\x2\x2\x3B5\x3B2\x3\x2\x2\x2\x3B5\x3B6\x3" +
            "\x2\x2\x2\x3B6\x3B9\x3\x2\x2\x2\x3B7\x3B8\a\xA4\x2\x2\x3B8\x3BA\a\xDA" +
            "\x2\x2\x3B9\x3B7\x3\x2\x2\x2\x3B9\x3BA\x3\x2\x2\x2\x3BA\x3BB\x3\x2\x2" +
            "\x2\x3BB\x3BD\aP\x2\x2\x3BC\x3BE\a\xDA\x2\x2\x3BD\x3BC\x3\x2\x2\x2\x3BD" +
            "\x3BE\x3\x2\x2\x2\x3BE\x3BF\x3\x2\x2\x2\x3BF\x3C1\x5\x102\x82\x2\x3C0" +
            "\x3C2\x5\x118\x8D\x2\x3C1\x3C0\x3\x2\x2\x2\x3C1\x3C2\x3\x2\x2\x2\x3C2" +
            "\x3C7\x3\x2\x2\x2\x3C3\x3C5\a\xDA\x2\x2\x3C4\x3C3\x3\x2\x2\x2\x3C4\x3C5" +
            "\x3\x2\x2\x2\x3C5\x3C6\x3\x2\x2\x2\x3C6\x3C8\x5\xF8}\x2\x3C7\x3C4\x3\x2" +
            "\x2\x2\x3C7\x3C8\x3\x2\x2\x2\x3C8\x3CD\x3\x2\x2\x2\x3C9\x3CB\a\xDA\x2" +
            "\x2\x3CA\x3C9\x3\x2\x2\x2\x3CA\x3CB\x3\x2\x2\x2\x3CB\x3CC\x3\x2\x2\x2" +
            "\x3CC\x3CE\x5\x104\x83\x2\x3CD\x3CA\x3\x2\x2\x2\x3CD\x3CE\x3\x2\x2\x2" +
            "\x3CE\x3D0\x3\x2\x2\x2\x3CF\x3D1\a\xD8\x2\x2\x3D0\x3CF\x3\x2\x2\x2\x3D1" +
            "\x3D2\x3\x2\x2\x2\x3D2\x3D0\x3\x2\x2\x2\x3D2\x3D3\x3\x2\x2\x2\x3D3\x3DA" +
            "\x3\x2\x2\x2\x3D4\x3D6\x5\x1A\xE\x2\x3D5\x3D7\a\xD8\x2\x2\x3D6\x3D5\x3" +
            "\x2\x2\x2\x3D7\x3D8\x3\x2\x2\x2\x3D8\x3D6\x3\x2\x2\x2\x3D8\x3D9\x3\x2" +
            "\x2\x2\x3D9\x3DB\x3\x2\x2\x2\x3DA\x3D4\x3\x2\x2\x2\x3DA\x3DB\x3\x2\x2" +
            "\x2\x3DB\x3DC\x3\x2\x2\x2\x3DC\x3DD\a:\x2\x2\x3DDK\x3\x2\x2\x2\x3DE\x3DF" +
            "\aQ\x2\x2\x3DF\x3E0\a\xDA\x2\x2\x3E0\x3E2\x5\xD8m\x2\x3E1\x3E3\a\xDA\x2" +
            "\x2\x3E2\x3E1\x3\x2\x2\x2\x3E2\x3E3\x3\x2\x2\x2\x3E3\x3E4\x3\x2\x2\x2" +
            "\x3E4\x3E6\a\n\x2\x2\x3E5\x3E7\a\xDA\x2\x2\x3E6\x3E5\x3\x2\x2\x2\x3E6" +
            "\x3E7\x3\x2\x2\x2\x3E7\x3E9\x3\x2\x2\x2\x3E8\x3EA\x5\xC8\x65\x2\x3E9\x3E8" +
            "\x3\x2\x2\x2\x3E9\x3EA\x3\x2\x2\x2\x3EA\x3EC\x3\x2\x2\x2\x3EB\x3ED\a\xDA" +
            "\x2\x2\x3EC\x3EB\x3\x2\x2\x2\x3EC\x3ED\x3\x2\x2\x2\x3ED\x3EE\x3\x2\x2" +
            "\x2\x3EE\x3F0\a\n\x2\x2\x3EF\x3F1\a\xDA\x2\x2\x3F0\x3EF\x3\x2\x2\x2\x3F0" +
            "\x3F1\x3\x2\x2\x2\x3F1\x3F2\x3\x2\x2\x2\x3F2\x3F3\x5\xC8\x65\x2\x3F3M" +
            "\x3\x2\x2\x2\x3F4\x3F5\aS\x2\x2\x3F5\x3F6\a\xDA\x2\x2\x3F6\x3F7\x5\xC8" +
            "\x65\x2\x3F7O\x3\x2\x2\x2\x3F8\x3F9\aT\x2\x2\x3F9\x3FA\a\xDA\x2\x2\x3FA" +
            "\x3FB\x5\xC8\x65\x2\x3FBQ\x3\x2\x2\x2\x3FC\x3FD\aU\x2\x2\x3FD\x3FE\a\xDA" +
            "\x2\x2\x3FE\x3FF\x5V,\x2\x3FF\x400\a\xDA\x2\x2\x400\x401\a\xAB\x2\x2\x401" +
            "\x402\a\xDA\x2\x2\x402\x407\x5\x1C\xF\x2\x403\x404\a\xDA\x2\x2\x404\x405" +
            "\a\x37\x2\x2\x405\x406\a\xDA\x2\x2\x406\x408\x5\x1C\xF\x2\x407\x403\x3" +
            "\x2\x2\x2\x407\x408\x3\x2\x2\x2\x408\x416\x3\x2\x2\x2\x409\x40D\x5T+\x2" +
            "\x40A\x40C\x5X-\x2\x40B\x40A\x3\x2\x2\x2\x40C\x40F\x3\x2\x2\x2\x40D\x40B" +
            "\x3\x2\x2\x2\x40D\x40E\x3\x2\x2\x2\x40E\x411\x3\x2\x2\x2\x40F\x40D\x3" +
            "\x2\x2\x2\x410\x412\x5Z.\x2\x411\x410\x3\x2\x2\x2\x411\x412\x3\x2\x2\x2" +
            "\x412\x413\x3\x2\x2\x2\x413\x414\a;\x2\x2\x414\x416\x3\x2\x2\x2\x415\x3FC" +
            "\x3\x2\x2\x2\x415\x409\x3\x2\x2\x2\x416S\x3\x2\x2\x2\x417\x418\aU\x2\x2" +
            "\x418\x419\a\xDA\x2\x2\x419\x41A\x5V,\x2\x41A\x41B\a\xDA\x2\x2\x41B\x41D" +
            "\a\xAB\x2\x2\x41C\x41E\a\xD8\x2\x2\x41D\x41C\x3\x2\x2\x2\x41E\x41F\x3" +
            "\x2\x2\x2\x41F\x41D\x3\x2\x2\x2\x41F\x420\x3\x2\x2\x2\x420\x427\x3\x2" +
            "\x2\x2\x421\x423\x5\x1A\xE\x2\x422\x424\a\xD8\x2\x2\x423\x422\x3\x2\x2" +
            "\x2\x424\x425\x3\x2\x2\x2\x425\x423\x3\x2\x2\x2\x425\x426\x3\x2\x2\x2" +
            "\x426\x428\x3\x2\x2\x2\x427\x421\x3\x2\x2\x2\x427\x428\x3\x2\x2\x2\x428" +
            "U\x3\x2\x2\x2\x429\x42A\x5\xC8\x65\x2\x42AW\x3\x2\x2\x2\x42B\x42C\a\x38" +
            "\x2\x2\x42C\x42D\a\xDA\x2\x2\x42D\x42E\x5V,\x2\x42E\x42F\a\xDA\x2\x2\x42F" +
            "\x431\a\xAB\x2\x2\x430\x432\a\xD8\x2\x2\x431\x430\x3\x2\x2\x2\x432\x433" +
            "\x3\x2\x2\x2\x433\x431\x3\x2\x2\x2\x433\x434\x3\x2\x2\x2\x434\x43B\x3" +
            "\x2\x2\x2\x435\x437\x5\x1A\xE\x2\x436\x438\a\xD8\x2\x2\x437\x436\x3\x2" +
            "\x2\x2\x438\x439\x3\x2\x2\x2\x439\x437\x3\x2\x2\x2\x439\x43A\x3\x2\x2" +
            "\x2\x43A\x43C\x3\x2\x2\x2\x43B\x435\x3\x2\x2\x2\x43B\x43C\x3\x2\x2\x2" +
            "\x43CY\x3\x2\x2\x2\x43D\x43F\a\x37\x2\x2\x43E\x440\a\xD8\x2\x2\x43F\x43E" +
            "\x3\x2\x2\x2\x440\x441\x3\x2\x2\x2\x441\x43F\x3\x2\x2\x2\x441\x442\x3" +
            "\x2\x2\x2\x442\x449\x3\x2\x2\x2\x443\x445\x5\x1A\xE\x2\x444\x446\a\xD8" +
            "\x2\x2\x445\x444\x3\x2\x2\x2\x446\x447\x3\x2\x2\x2\x447\x445\x3\x2\x2" +
            "\x2\x447\x448\x3\x2\x2\x2\x448\x44A\x3\x2\x2\x2\x449\x443\x3\x2\x2\x2" +
            "\x449\x44A\x3\x2\x2\x2\x44A[\x3\x2\x2\x2\x44B\x44C\aW\x2\x2\x44C\x44D" +
            "\a\xDA\x2\x2\x44D\x44E\x5\x102\x82\x2\x44E]\x3\x2\x2\x2\x44F\x450\aY\x2" +
            "\x2\x450\x451\a\xDA\x2\x2\x451\x45A\x5\xD8m\x2\x452\x454\a\xDA\x2\x2\x453" +
            "\x452\x3\x2\x2\x2\x453\x454\x3\x2\x2\x2\x454\x455\x3\x2\x2\x2\x455\x457" +
            "\a\n\x2\x2\x456\x458\a\xDA\x2\x2\x457\x456\x3\x2\x2\x2\x457\x458\x3\x2" +
            "\x2\x2\x458\x459\x3\x2\x2\x2\x459\x45B\x5\xC8\x65\x2\x45A\x453\x3\x2\x2" +
            "\x2\x45B\x45C\x3\x2\x2\x2\x45C\x45A\x3\x2\x2\x2\x45C\x45D\x3\x2\x2\x2" +
            "\x45D_\x3\x2\x2\x2\x45E\x45F\a\\\x2\x2\x45F\x460\a\xDA\x2\x2\x460\x461" +
            "\x5\xC8\x65\x2\x461\x61\x3\x2\x2\x2\x462\x463\a\x62\x2\x2\x463\x465\a" +
            "\xDA\x2\x2\x464\x462\x3\x2\x2\x2\x464\x465\x3\x2\x2\x2\x465\x466\x3\x2" +
            "\x2\x2\x466\x468\x5\xE6t\x2\x467\x469\a\xDA\x2\x2\x468\x467\x3\x2\x2\x2" +
            "\x468\x469\x3\x2\x2\x2\x469\x46A\x3\x2\x2\x2\x46A\x46C\t\x6\x2\x2\x46B" +
            "\x46D\a\xDA\x2\x2\x46C\x46B\x3\x2\x2\x2\x46C\x46D\x3\x2\x2\x2\x46D\x46E" +
            "\x3\x2\x2\x2\x46E\x46F\x5\xC8\x65\x2\x46F\x63\x3\x2\x2\x2\x470\x471\a" +
            "\x65\x2\x2\x471\x472\a\xDA\x2\x2\x472\x474\x5\xD8m\x2\x473\x475\a\xDA" +
            "\x2\x2\x474\x473\x3\x2\x2\x2\x474\x475\x3\x2\x2\x2\x475\x476\x3\x2\x2" +
            "\x2\x476\x478\a\n\x2\x2\x477\x479\a\xDA\x2\x2\x478\x477\x3\x2\x2\x2\x478" +
            "\x479\x3\x2\x2\x2\x479\x47A\x3\x2\x2\x2\x47A\x47B\x5\xC8\x65\x2\x47B\x65" +
            "\x3\x2\x2\x2\x47C\x47D\a]\x2\x2\x47D\x47E\a\xDA\x2\x2\x47E\x47F\x5\xC8" +
            "\x65\x2\x47Fg\x3\x2\x2\x2\x480\x481\a^\x2\x2\x481\x482\a\xDA\x2\x2\x482" +
            "\x491\x5\xC8\x65\x2\x483\x485\a\xDA\x2\x2\x484\x483\x3\x2\x2\x2\x484\x485" +
            "\x3\x2\x2\x2\x485\x486\x3\x2\x2\x2\x486\x488\a\n\x2\x2\x487\x489\a\xDA" +
            "\x2\x2\x488\x487\x3\x2\x2\x2\x488\x489\x3\x2\x2\x2\x489\x48A\x3\x2\x2" +
            "\x2\x48A\x48F\x5\xC8\x65\x2\x48B\x48C\a\xDA\x2\x2\x48C\x48D\a\xAD\x2\x2" +
            "\x48D\x48E\a\xDA\x2\x2\x48E\x490\x5\xC8\x65\x2\x48F\x48B\x3\x2\x2\x2\x48F" +
            "\x490\x3\x2\x2\x2\x490\x492\x3\x2\x2\x2\x491\x484\x3\x2\x2\x2\x491\x492" +
            "\x3\x2\x2\x2\x492i\x3\x2\x2\x2\x493\x494\ai\x2\x2\x494\x495\a\xDA\x2\x2" +
            "\x495\x497\x5\xE6t\x2\x496\x498\a\xDA\x2\x2\x497\x496\x3\x2\x2\x2\x497" +
            "\x498\x3\x2\x2\x2\x498\x499\x3\x2\x2\x2\x499\x49B\a\xC0\x2\x2\x49A\x49C" +
            "\a\xDA\x2\x2\x49B\x49A\x3\x2\x2\x2\x49B\x49C\x3\x2\x2\x2\x49C\x49D\x3" +
            "\x2\x2\x2\x49D\x49E\x5\xC8\x65\x2\x49Ek\x3\x2\x2\x2\x49F\x4A1\aj\x2\x2" +
            "\x4A0\x4A2\a\xDA\x2\x2\x4A1\x4A0\x3\x2\x2\x2\x4A1\x4A2\x3\x2\x2\x2\x4A2" +
            "\x4A3\x3\x2\x2\x2\x4A3\x4A5\x5\x102\x82\x2\x4A4\x4A6\a\xDA\x2\x2\x4A5" +
            "\x4A4\x3\x2\x2\x2\x4A5\x4A6\x3\x2\x2\x2\x4A6\x4A7\x3\x2\x2\x2\x4A7\x4A9" +
            "\a\xC0\x2\x2\x4A8\x4AA\a\xDA\x2\x2\x4A9\x4A8\x3\x2\x2\x2\x4A9\x4AA\x3" +
            "\x2\x2\x2\x4AA\x4AB\x3\x2\x2\x2\x4AB\x4AC\x5\xC8\x65\x2\x4ACm\x3\x2\x2" +
            "\x2\x4AD\x4B1\x5p\x39\x2\x4AE\x4B0\x5r:\x2\x4AF\x4AE\x3\x2\x2\x2\x4B0" +
            "\x4B3\x3\x2\x2\x2\x4B1\x4AF\x3\x2\x2\x2\x4B1\x4B2\x3\x2\x2\x2\x4B2\x4B5" +
            "\x3\x2\x2\x2\x4B3\x4B1\x3\x2\x2\x2\x4B4\x4B6\x5t;\x2\x4B5\x4B4\x3\x2\x2" +
            "\x2\x4B5\x4B6\x3\x2\x2\x2\x4B6\x4B7\x3\x2\x2\x2\x4B7\x4B8\an\x2\x2\x4B8" +
            "o\x3\x2\x2\x2\x4B9\x4BB\ak\x2\x2\x4BA\x4BC\a\xDA\x2\x2\x4BB\x4BA\x3\x2" +
            "\x2\x2\x4BB\x4BC\x3\x2\x2\x2\x4BC\x4BD\x3\x2\x2\x2\x4BD\x4BE\x5V,\x2\x4BE" +
            "\x4BF\a\xDA\x2\x2\x4BF\x4C3\a\xAB\x2\x2\x4C0\x4C2\a\xD8\x2\x2\x4C1\x4C0" +
            "\x3\x2\x2\x2\x4C2\x4C5\x3\x2\x2\x2\x4C3\x4C1\x3\x2\x2\x2\x4C3\x4C4\x3" +
            "\x2\x2\x2\x4C4\x4D3\x3\x2\x2\x2\x4C5\x4C3\x3\x2\x2\x2\x4C6\x4CA\x5\x12" +
            "\n\x2\x4C7\x4CA\x5\x14\v\x2\x4C8\x4CA\x5\x1A\xE\x2\x4C9\x4C6\x3\x2\x2" +
            "\x2\x4C9\x4C7\x3\x2\x2\x2\x4C9\x4C8\x3\x2\x2\x2\x4CA\x4CE\x3\x2\x2\x2" +
            "\x4CB\x4CD\a\xD8\x2\x2\x4CC\x4CB\x3\x2\x2\x2\x4CD\x4D0\x3\x2\x2\x2\x4CE" +
            "\x4CC\x3\x2\x2\x2\x4CE\x4CF\x3\x2\x2\x2\x4CF\x4D2\x3\x2\x2\x2\x4D0\x4CE" +
            "\x3\x2\x2\x2\x4D1\x4C9\x3\x2\x2\x2\x4D2\x4D5\x3\x2\x2\x2\x4D3\x4D1\x3" +
            "\x2\x2\x2\x4D3\x4D4\x3\x2\x2\x2\x4D4q\x3\x2\x2\x2\x4D5\x4D3\x3\x2\x2\x2" +
            "\x4D6\x4D8\al\x2\x2\x4D7\x4D9\a\xDA\x2\x2\x4D8\x4D7\x3\x2\x2\x2\x4D8\x4D9" +
            "\x3\x2\x2\x2\x4D9\x4DA\x3\x2\x2\x2\x4DA\x4DB\x5V,\x2\x4DB\x4DC\a\xDA\x2" +
            "\x2\x4DC\x4E0\a\xAB\x2\x2\x4DD\x4DF\a\xD8\x2\x2\x4DE\x4DD\x3\x2\x2\x2" +
            "\x4DF\x4E2\x3\x2\x2\x2\x4E0\x4DE\x3\x2\x2\x2\x4E0\x4E1\x3\x2\x2\x2\x4E1" +
            "\x4F0\x3\x2\x2\x2\x4E2\x4E0\x3\x2\x2\x2\x4E3\x4E7\x5\x12\n\x2\x4E4\x4E7" +
            "\x5\x14\v\x2\x4E5\x4E7\x5\x1A\xE\x2\x4E6\x4E3\x3\x2\x2\x2\x4E6\x4E4\x3" +
            "\x2\x2\x2\x4E6\x4E5\x3\x2\x2\x2\x4E7\x4EB\x3\x2\x2\x2\x4E8\x4EA\a\xD8" +
            "\x2\x2\x4E9\x4E8\x3\x2\x2\x2\x4EA\x4ED\x3\x2\x2\x2\x4EB\x4E9\x3\x2\x2" +
            "\x2\x4EB\x4EC\x3\x2\x2\x2\x4EC\x4EF\x3\x2\x2\x2\x4ED\x4EB\x3\x2\x2\x2" +
            "\x4EE\x4E6\x3\x2\x2\x2\x4EF\x4F2\x3\x2\x2\x2\x4F0\x4EE\x3\x2\x2\x2\x4F0" +
            "\x4F1\x3\x2\x2\x2\x4F1s\x3\x2\x2\x2\x4F2\x4F0\x3\x2\x2\x2\x4F3\x4F7\a" +
            "m\x2\x2\x4F4\x4F6\a\xD8\x2\x2\x4F5\x4F4\x3\x2\x2\x2\x4F6\x4F9\x3\x2\x2" +
            "\x2\x4F7\x4F5\x3\x2\x2\x2\x4F7\x4F8\x3\x2\x2\x2\x4F8\x507\x3\x2\x2\x2" +
            "\x4F9\x4F7\x3\x2\x2\x2\x4FA\x4FE\x5\x12\n\x2\x4FB\x4FE\x5\x14\v\x2\x4FC" +
            "\x4FE\x5\x1A\xE\x2\x4FD\x4FA\x3\x2\x2\x2\x4FD\x4FB\x3\x2\x2\x2\x4FD\x4FC" +
            "\x3\x2\x2\x2\x4FE\x502\x3\x2\x2\x2\x4FF\x501\a\xD8\x2\x2\x500\x4FF\x3" +
            "\x2\x2\x2\x501\x504\x3\x2\x2\x2\x502\x500\x3\x2\x2\x2\x502\x503\x3\x2" +
            "\x2\x2\x503\x506\x3\x2\x2\x2\x504\x502\x3\x2\x2\x2\x505\x4FD\x3\x2\x2" +
            "\x2\x506\x509\x3\x2\x2\x2\x507\x505\x3\x2\x2\x2\x507\x508\x3\x2\x2\x2" +
            "\x508u\x3\x2\x2\x2\x509\x507\x3\x2\x2\x2\x50A\x50C\ap\x2\x2\x50B\x50D" +
            "\a\xDA\x2\x2\x50C\x50B\x3\x2\x2\x2\x50C\x50D\x3\x2\x2\x2\x50D\x50E\x3" +
            "\x2\x2\x2\x50E\x510\a\xC4\x2\x2\x50F\x511\a\xDA\x2\x2\x510\x50F\x3\x2" +
            "\x2\x2\x510\x511\x3\x2\x2\x2\x511\x512\x3\x2\x2\x2\x512\x514\x5\xF2z\x2" +
            "\x513\x515\a\xDA\x2\x2\x514\x513\x3\x2\x2\x2\x514\x515\x3\x2\x2\x2\x515" +
            "\x516\x3\x2\x2\x2\x516\x517\a\xCD\x2\x2\x517w\x3\x2\x2\x2\x518\x519\a" +
            "q\x2\x2\x519\x51A\a\xDA\x2\x2\x51A\x51B\x5\xC8\x65\x2\x51By\x3\x2\x2\x2" +
            "\x51C\x51D\as\x2\x2\x51D\x51E\a\xDA\x2\x2\x51E\x51F\x5\xC8\x65\x2\x51F" +
            "\x520\a\xDA\x2\x2\x520\x521\a\x13\x2\x2\x521\x522\a\xDA\x2\x2\x522\x523" +
            "\x5\xC8\x65\x2\x523{\x3\x2\x2\x2\x524\x530\az\x2\x2\x525\x526\a{\x2\x2" +
            "\x526\x52D\a\xDA\x2\x2\x527\x528\aT\x2\x2\x528\x529\a\xDA\x2\x2\x529\x52E" +
            "\x5\xC8\x65\x2\x52A\x52B\a\x96\x2\x2\x52B\x52C\a\xDA\x2\x2\x52C\x52E\a" +
            "t\x2\x2\x52D\x527\x3\x2\x2\x2\x52D\x52A\x3\x2\x2\x2\x52E\x530\x3\x2\x2" +
            "\x2\x52F\x524\x3\x2\x2\x2\x52F\x525\x3\x2\x2\x2\x530}\x3\x2\x2\x2\x531" +
            "\x532\ay\x2\x2\x532\x533\a\xDA\x2\x2\x533\x534\x5\xC8\x65\x2\x534\x535" +
            "\a\xDA\x2\x2\x535\x536\aT\x2\x2\x536\x537\a\xDA\x2\x2\x537\x542\x5\xC8" +
            "\x65\x2\x538\x53A\a\xDA\x2\x2\x539\x538\x3\x2\x2\x2\x539\x53A\x3\x2\x2" +
            "\x2\x53A\x53B\x3\x2\x2\x2\x53B\x53D\a\n\x2\x2\x53C\x53E\a\xDA\x2\x2\x53D" +
            "\x53C\x3\x2\x2\x2\x53D\x53E\x3\x2\x2\x2\x53E\x53F\x3\x2\x2\x2\x53F\x541" +
            "\x5\xC8\x65\x2\x540\x539\x3\x2\x2\x2\x541\x544\x3\x2\x2\x2\x542\x540\x3" +
            "\x2\x2\x2\x542\x543\x3\x2\x2\x2\x543\x7F\x3\x2\x2\x2\x544\x542\x3\x2\x2" +
            "\x2\x545\x546\ay\x2\x2\x546\x547\a\xDA\x2\x2\x547\x548\x5\xC8\x65\x2\x548" +
            "\x549\a\xDA\x2\x2\x549\x54A\aS\x2\x2\x54A\x54B\a\xDA\x2\x2\x54B\x556\x5" +
            "\xC8\x65\x2\x54C\x54E\a\xDA\x2\x2\x54D\x54C\x3\x2\x2\x2\x54D\x54E\x3\x2" +
            "\x2\x2\x54E\x54F\x3\x2\x2\x2\x54F\x551\a\n\x2\x2\x550\x552\a\xDA\x2\x2" +
            "\x551\x550\x3\x2\x2\x2\x551\x552\x3\x2\x2\x2\x552\x553\x3\x2\x2\x2\x553" +
            "\x555\x5\xC8\x65\x2\x554\x54D\x3\x2\x2\x2\x555\x558\x3\x2\x2\x2\x556\x554" +
            "\x3\x2\x2\x2\x556\x557\x3\x2\x2\x2\x557\x81\x3\x2\x2\x2\x558\x556\x3\x2" +
            "\x2\x2\x559\x55A\a|\x2\x2\x55A\x55B\a\xDA\x2\x2\x55B\x55C\x5\xC8\x65\x2" +
            "\x55C\x55D\a\xDA\x2\x2\x55D\x55E\aO\x2\x2\x55E\x55F\a\xDA\x2\x2\x55F\x564" +
            "\t\a\x2\x2\x560\x561\a\xDA\x2\x2\x561\x562\a\f\x2\x2\x562\x563\a\xDA\x2" +
            "\x2\x563\x565\t\b\x2\x2\x564\x560\x3\x2\x2\x2\x564\x565\x3\x2\x2\x2\x565" +
            "\x568\x3\x2\x2\x2\x566\x567\a\xDA\x2\x2\x567\x569\t\t\x2\x2\x568\x566" +
            "\x3\x2\x2\x2\x568\x569\x3\x2\x2\x2\x569\x56A\x3\x2\x2\x2\x56A\x56B\a\xDA" +
            "\x2\x2\x56B\x56C\a\x13\x2\x2\x56C\x56D\a\xDA\x2\x2\x56D\x578\x5\xD8m\x2" +
            "\x56E\x56F\a\xDA\x2\x2\x56F\x571\a\x61\x2\x2\x570\x572\a\xDA\x2\x2\x571" +
            "\x570\x3\x2\x2\x2\x571\x572\x3\x2\x2\x2\x572\x573\x3\x2\x2\x2\x573\x575" +
            "\a\xC0\x2\x2\x574\x576\a\xDA\x2\x2\x575\x574\x3\x2\x2\x2\x575\x576\x3" +
            "\x2\x2\x2\x576\x577\x3\x2\x2\x2\x577\x579\x5\xC8\x65\x2\x578\x56E\x3\x2" +
            "\x2\x2\x578\x579\x3\x2\x2\x2\x579\x83\x3\x2\x2\x2\x57A\x587\x5\x86\x44" +
            "\x2\x57B\x57D\a\xDA\x2\x2\x57C\x57B\x3\x2\x2\x2\x57C\x57D\x3\x2\x2\x2" +
            "\x57D\x57E\x3\x2\x2\x2\x57E\x580\t\n\x2\x2\x57F\x581\a\xDA\x2\x2\x580" +
            "\x57F\x3\x2\x2\x2\x580\x581\x3\x2\x2\x2\x581\x583\x3\x2\x2\x2\x582\x584" +
            "\x5\x86\x44\x2\x583\x582\x3\x2\x2\x2\x583\x584\x3\x2\x2\x2\x584\x586\x3" +
            "\x2\x2\x2\x585\x57C\x3\x2\x2\x2\x586\x589\x3\x2\x2\x2\x587\x585\x3\x2" +
            "\x2\x2\x587\x588\x3\x2\x2\x2\x588\x59C\x3\x2\x2\x2\x589\x587\x3\x2\x2" +
            "\x2\x58A\x58C\x5\x86\x44\x2\x58B\x58A\x3\x2\x2\x2\x58B\x58C\x3\x2\x2\x2" +
            "\x58C\x597\x3\x2\x2\x2\x58D\x58F\a\xDA\x2\x2\x58E\x58D\x3\x2\x2\x2\x58E" +
            "\x58F\x3\x2\x2\x2\x58F\x590\x3\x2\x2\x2\x590\x592\t\n\x2\x2\x591\x593" +
            "\a\xDA\x2\x2\x592\x591\x3\x2\x2\x2\x592\x593\x3\x2\x2\x2\x593\x595\x3" +
            "\x2\x2\x2\x594\x596\x5\x86\x44\x2\x595\x594\x3\x2\x2\x2\x595\x596\x3\x2" +
            "\x2\x2\x596\x598\x3\x2\x2\x2\x597\x58E\x3\x2\x2\x2\x598\x599\x3\x2\x2" +
            "\x2\x599\x597\x3\x2\x2\x2\x599\x59A\x3\x2\x2\x2\x59A\x59C\x3\x2\x2\x2" +
            "\x59B\x57A\x3\x2\x2\x2\x59B\x58B\x3\x2\x2\x2\x59C\x85\x3\x2\x2\x2\x59D" +
            "\x5AF\x5\xC8\x65\x2\x59E\x5AC\t\v\x2\x2\x59F\x5A1\a\xDA\x2\x2\x5A0\x59F" +
            "\x3\x2\x2\x2\x5A0\x5A1\x3\x2\x2\x2\x5A1\x5A2\x3\x2\x2\x2\x5A2\x5A4\a\xC4" +
            "\x2\x2\x5A3\x5A5\a\xDA\x2\x2\x5A4\x5A3\x3\x2\x2\x2\x5A4\x5A5\x3\x2\x2" +
            "\x2\x5A5\x5A6\x3\x2\x2\x2\x5A6\x5A8\x5\xF2z\x2\x5A7\x5A9\a\xDA\x2\x2\x5A8" +
            "\x5A7\x3\x2\x2\x2\x5A8\x5A9\x3\x2\x2\x2\x5A9\x5AA\x3\x2\x2\x2\x5AA\x5AB" +
            "\a\xCD\x2\x2\x5AB\x5AD\x3\x2\x2\x2\x5AC\x5A0\x3\x2\x2\x2\x5AC\x5AD\x3" +
            "\x2\x2\x2\x5AD\x5AF\x3\x2\x2\x2\x5AE\x59D\x3\x2\x2\x2\x5AE\x59E\x3\x2" +
            "\x2\x2\x5AF\x87\x3\x2\x2\x2\x5B0\x5B1\a\x86\x2\x2\x5B1\x5B2\a\xDA\x2\x2" +
            "\x5B2\x5B4\x5\xD8m\x2\x5B3\x5B5\a\xDA\x2\x2\x5B4\x5B3\x3\x2\x2\x2\x5B4" +
            "\x5B5\x3\x2\x2\x2\x5B5\x5B6\x3\x2\x2\x2\x5B6\x5BB\a\n\x2\x2\x5B7\x5B9" +
            "\a\xDA\x2\x2\x5B8\x5B7\x3\x2\x2\x2\x5B8\x5B9\x3\x2\x2\x2\x5B9\x5BA\x3" +
            "\x2\x2\x2\x5BA\x5BC\x5\x84\x43\x2\x5BB\x5B8\x3\x2\x2\x2\x5BB\x5BC\x3\x2" +
            "\x2\x2\x5BC\x89\x3\x2\x2\x2\x5BD\x5BE\x5\x11A\x8E\x2\x5BE\x5BF\a\xDA\x2" +
            "\x2\x5BF\x5C1\x3\x2\x2\x2\x5C0\x5BD\x3\x2\x2\x2\x5C0\x5C1\x3\x2\x2\x2" +
            "\x5C1\x5C4\x3\x2\x2\x2\x5C2\x5C3\a\xA4\x2\x2\x5C3\x5C5\a\xDA\x2\x2\x5C4" +
            "\x5C2\x3\x2\x2\x2\x5C4\x5C5\x3\x2\x2\x2\x5C5\x5C6\x3\x2\x2\x2\x5C6\x5C7" +
            "\a\x88\x2\x2\x5C7\x5C8\a\xDA\x2\x2\x5C8\x5CA\x5\x102\x82\x2\x5C9\x5CB" +
            "\x5\x118\x8D\x2\x5CA\x5C9\x3\x2\x2\x2\x5CA\x5CB\x3\x2\x2\x2\x5CB\x5D0" +
            "\x3\x2\x2\x2\x5CC\x5CE\a\xDA\x2\x2\x5CD\x5CC\x3\x2\x2\x2\x5CD\x5CE\x3" +
            "\x2\x2\x2\x5CE\x5CF\x3\x2\x2\x2\x5CF\x5D1\x5\xF8}\x2\x5D0\x5CD\x3\x2\x2" +
            "\x2\x5D0\x5D1\x3\x2\x2\x2\x5D1\x5D4\x3\x2\x2\x2\x5D2\x5D3\a\xDA\x2\x2" +
            "\x5D3\x5D5\x5\x104\x83\x2\x5D4\x5D2\x3\x2\x2\x2\x5D4\x5D5\x3\x2\x2\x2" +
            "\x5D5\x5D7\x3\x2\x2\x2\x5D6\x5D8\a\xD8\x2\x2\x5D7\x5D6\x3\x2\x2\x2\x5D8" +
            "\x5D9\x3\x2\x2\x2\x5D9\x5D7\x3\x2\x2\x2\x5D9\x5DA\x3\x2\x2\x2\x5DA\x5E1" +
            "\x3\x2\x2\x2\x5DB\x5DD\x5\x1A\xE\x2\x5DC\x5DE\a\xD8\x2\x2\x5DD\x5DC\x3" +
            "\x2\x2\x2\x5DE\x5DF\x3\x2\x2\x2\x5DF\x5DD\x3\x2\x2\x2\x5DF\x5E0\x3\x2" +
            "\x2\x2\x5E0\x5E2\x3\x2\x2\x2\x5E1\x5DB\x3\x2\x2\x2\x5E1\x5E2\x3\x2\x2" +
            "\x2\x5E2\x5E3\x3\x2\x2\x2\x5E3\x5E4\a<\x2\x2\x5E4\x8B\x3\x2\x2\x2\x5E5" +
            "\x5E6\x5\x11A\x8E\x2\x5E6\x5E7\a\xDA\x2\x2\x5E7\x5E9\x3\x2\x2\x2\x5E8" +
            "\x5E5\x3\x2\x2\x2\x5E8\x5E9\x3\x2\x2\x2\x5E9\x5EC\x3\x2\x2\x2\x5EA\x5EB" +
            "\a\xA4\x2\x2\x5EB\x5ED\a\xDA\x2\x2\x5EC\x5EA\x3\x2\x2\x2\x5EC\x5ED\x3" +
            "\x2\x2\x2\x5ED\x5EE\x3\x2\x2\x2\x5EE\x5EF\a\x8A\x2\x2\x5EF\x5F0\a\xDA" +
            "\x2\x2\x5F0\x5F5\x5\x102\x82\x2\x5F1\x5F3\a\xDA\x2\x2\x5F2\x5F1\x3\x2" +
            "\x2\x2\x5F2\x5F3\x3\x2\x2\x2\x5F3\x5F4\x3\x2\x2\x2\x5F4\x5F6\x5\xF8}\x2" +
            "\x5F5\x5F2\x3\x2\x2\x2\x5F5\x5F6\x3\x2\x2\x2\x5F6\x5F8\x3\x2\x2\x2\x5F7" +
            "\x5F9\a\xD8\x2\x2\x5F8\x5F7\x3\x2\x2\x2\x5F9\x5FA\x3\x2\x2\x2\x5FA\x5F8" +
            "\x3\x2\x2\x2\x5FA\x5FB\x3\x2\x2\x2\x5FB\x602\x3\x2\x2\x2\x5FC\x5FE\x5" +
            "\x1A\xE\x2\x5FD\x5FF\a\xD8\x2\x2\x5FE\x5FD\x3\x2\x2\x2\x5FF\x600\x3\x2" +
            "\x2\x2\x600\x5FE\x3\x2\x2\x2\x600\x601\x3\x2\x2\x2\x601\x603\x3\x2\x2" +
            "\x2\x602\x5FC\x3\x2\x2\x2\x602\x603\x3\x2\x2\x2\x603\x604\x3\x2\x2\x2" +
            "\x604\x605\a<\x2\x2\x605\x8D\x3\x2\x2\x2\x606\x607\x5\x11A\x8E\x2\x607" +
            "\x608\a\xDA\x2\x2\x608\x60A\x3\x2\x2\x2\x609\x606\x3\x2\x2\x2\x609\x60A" +
            "\x3\x2\x2\x2\x60A\x60D\x3\x2\x2\x2\x60B\x60C\a\xA4\x2\x2\x60C\x60E\a\xDA" +
            "\x2\x2\x60D\x60B\x3\x2\x2\x2\x60D\x60E\x3\x2\x2\x2\x60E\x60F\x3\x2\x2" +
            "\x2\x60F\x610\a\x89\x2\x2\x610\x611\a\xDA\x2\x2\x611\x616\x5\x102\x82" +
            "\x2\x612\x614\a\xDA\x2\x2\x613\x612\x3\x2\x2\x2\x613\x614\x3\x2\x2\x2" +
            "\x614\x615\x3\x2\x2\x2\x615\x617\x5\xF8}\x2\x616\x613\x3\x2\x2\x2\x616" +
            "\x617\x3\x2\x2\x2\x617\x619\x3\x2\x2\x2\x618\x61A\a\xD8\x2\x2\x619\x618" +
            "\x3\x2\x2\x2\x61A\x61B\x3\x2\x2\x2\x61B\x619\x3\x2\x2\x2\x61B\x61C\x3" +
            "\x2\x2\x2\x61C\x623\x3\x2\x2\x2\x61D\x61F\x5\x1A\xE\x2\x61E\x620\a\xD8" +
            "\x2\x2\x61F\x61E\x3\x2\x2\x2\x620\x621\x3\x2\x2\x2\x621\x61F\x3\x2\x2" +
            "\x2\x621\x622\x3\x2\x2\x2\x622\x624\x3\x2\x2\x2\x623\x61D\x3\x2\x2\x2" +
            "\x623\x624\x3\x2\x2\x2\x624\x625\x3\x2\x2\x2\x625\x626\a<\x2\x2\x626\x8F" +
            "\x3\x2\x2\x2\x627\x628\a\x8D\x2\x2\x628\x629\a\xDA\x2\x2\x629\x62B\x5" +
            "\xD8m\x2\x62A\x62C\a\xDA\x2\x2\x62B\x62A\x3\x2\x2\x2\x62B\x62C\x3\x2\x2" +
            "\x2\x62C\x62D\x3\x2\x2\x2\x62D\x62F\a\n\x2\x2\x62E\x630\a\xDA\x2\x2\x62F" +
            "\x62E\x3\x2\x2\x2\x62F\x630\x3\x2\x2\x2\x630\x632\x3\x2\x2\x2\x631\x633" +
            "\x5\xC8\x65\x2\x632\x631\x3\x2\x2\x2\x632\x633\x3\x2\x2\x2\x633\x635\x3" +
            "\x2\x2\x2\x634\x636\a\xDA\x2\x2\x635\x634\x3\x2\x2\x2\x635\x636\x3\x2" +
            "\x2\x2\x636\x637\x3\x2\x2\x2\x637\x639\a\n\x2\x2\x638\x63A\a\xDA\x2\x2" +
            "\x639\x638\x3\x2\x2\x2\x639\x63A\x3\x2\x2\x2\x63A\x63B\x3\x2\x2\x2\x63B" +
            "\x63C\x5\xC8\x65\x2\x63C\x91\x3\x2\x2\x2\x63D\x63E\a\x90\x2\x2\x63E\x63F" +
            "\a\xDA\x2\x2\x63F\x64E\x5\x102\x82\x2\x640\x642\a\xDA\x2\x2\x641\x640" +
            "\x3\x2\x2\x2\x641\x642\x3\x2\x2\x2\x642\x643\x3\x2\x2\x2\x643\x645\a\xC4" +
            "\x2\x2\x644\x646\a\xDA\x2\x2\x645\x644\x3\x2\x2\x2\x645\x646\x3\x2\x2" +
            "\x2\x646\x64B\x3\x2\x2\x2\x647\x649\x5\xF2z\x2\x648\x64A\a\xDA\x2\x2\x649" +
            "\x648\x3\x2\x2\x2\x649\x64A\x3\x2\x2\x2\x64A\x64C\x3\x2\x2\x2\x64B\x647" +
            "\x3\x2\x2\x2\x64B\x64C\x3\x2\x2\x2\x64C\x64D\x3\x2\x2\x2\x64D\x64F\a\xCD" +
            "\x2\x2\x64E\x641\x3\x2\x2\x2\x64E\x64F\x3\x2\x2\x2\x64F\x93\x3\x2\x2\x2" +
            "\x650\x653\a\x8F\x2\x2\x651\x652\a\xDA\x2\x2\x652\x654\x5\xC8\x65\x2\x653" +
            "\x651\x3\x2\x2\x2\x653\x654\x3\x2\x2\x2\x654\x95\x3\x2\x2\x2\x655\x656" +
            "\a\x93\x2\x2\x656\x659\a\xDA\x2\x2\x657\x658\a\x85\x2\x2\x658\x65A\a\xDA" +
            "\x2\x2\x659\x657\x3\x2\x2\x2\x659\x65A\x3\x2\x2\x2\x65A\x65B\x3\x2\x2" +
            "\x2\x65B\x666\x5\x98M\x2\x65C\x65E\a\xDA\x2\x2\x65D\x65C\x3\x2\x2\x2\x65D" +
            "\x65E\x3\x2\x2\x2\x65E\x65F\x3\x2\x2\x2\x65F\x661\a\n\x2\x2\x660\x662" +
            "\a\xDA\x2\x2\x661\x660\x3\x2\x2\x2\x661\x662\x3\x2\x2\x2\x662\x663\x3" +
            "\x2\x2\x2\x663\x665\x5\x98M\x2\x664\x65D\x3\x2\x2\x2\x665\x668\x3\x2\x2" +
            "\x2\x666\x664\x3\x2\x2\x2\x666\x667\x3\x2\x2\x2\x667\x97\x3\x2\x2\x2\x668" +
            "\x666\x3\x2\x2\x2\x669\x66B\x5\xE6t\x2\x66A\x66C\a\xDA\x2\x2\x66B\x66A" +
            "\x3\x2\x2\x2\x66B\x66C\x3\x2\x2\x2\x66C\x66D\x3\x2\x2\x2\x66D\x66F\a\xC4" +
            "\x2\x2\x66E\x670\a\xDA\x2\x2\x66F\x66E\x3\x2\x2\x2\x66F\x670\x3\x2\x2" +
            "\x2\x670\x671\x3\x2\x2\x2\x671\x673\x5\xFE\x80\x2\x672\x674\a\xDA\x2\x2" +
            "\x673\x672\x3\x2\x2\x2\x673\x674\x3\x2\x2\x2\x674\x675\x3\x2\x2\x2\x675" +
            "\x678\a\xCD\x2\x2\x676\x677\a\xDA\x2\x2\x677\x679\x5\x104\x83\x2\x678" +
            "\x676\x3\x2\x2\x2\x678\x679\x3\x2\x2\x2\x679\x99\x3\x2\x2\x2\x67A\x67B" +
            "\a\x95\x2\x2\x67B\x9B\x3\x2\x2\x2\x67C\x682\a\x96\x2\x2\x67D\x680\a\xDA" +
            "\x2\x2\x67E\x681\at\x2\x2\x67F\x681\x5\x102\x82\x2\x680\x67E\x3\x2\x2" +
            "\x2\x680\x67F\x3\x2\x2\x2\x681\x683\x3\x2\x2\x2\x682\x67D\x3\x2\x2\x2" +
            "\x682\x683\x3\x2\x2\x2\x683\x9D\x3\x2\x2\x2\x684\x685\a\x97\x2\x2\x685" +
            "\x9F\x3\x2\x2\x2\x686\x687\a\x98\x2\x2\x687\x688\a\xDA\x2\x2\x688\x689" +
            "\x5\xC8\x65\x2\x689\xA1\x3\x2\x2\x2\x68A\x68B\a\x99\x2\x2\x68B\x68C\a" +
            "\xDA\x2\x2\x68C\x68E\x5\xE6t\x2\x68D\x68F\a\xDA\x2\x2\x68E\x68D\x3\x2" +
            "\x2\x2\x68E\x68F\x3\x2\x2\x2\x68F\x690\x3\x2\x2\x2\x690\x692\a\xC0\x2" +
            "\x2\x691\x693\a\xDA\x2\x2\x692\x691\x3\x2\x2\x2\x692\x693\x3\x2\x2\x2" +
            "\x693\x694\x3\x2\x2\x2\x694\x695\x5\xC8\x65\x2\x695\xA3\x3\x2\x2\x2\x696" +
            "\x697\a\x9A\x2\x2\x697\x698\a\xDA\x2\x2\x698\x69A\x5\xC8\x65\x2\x699\x69B" +
            "\a\xDA\x2\x2\x69A\x699\x3\x2\x2\x2\x69A\x69B\x3\x2\x2\x2\x69B\x69C\x3" +
            "\x2\x2\x2\x69C\x69E\a\n\x2\x2\x69D\x69F\a\xDA\x2\x2\x69E\x69D\x3\x2\x2" +
            "\x2\x69E\x69F\x3\x2\x2\x2\x69F\x6A0\x3\x2\x2\x2\x6A0\x6A1\x5\xC8\x65\x2" +
            "\x6A1\xA5\x3\x2\x2\x2\x6A2\x6A3\a\x9B\x2\x2\x6A3\x6A4\a\xDA\x2\x2\x6A4" +
            "\x6A6\x5\xC8\x65\x2\x6A5\x6A7\a\xDA\x2\x2\x6A6\x6A5\x3\x2\x2\x2\x6A6\x6A7" +
            "\x3\x2\x2\x2\x6A7\x6A8\x3\x2\x2\x2\x6A8\x6AA\a\n\x2\x2\x6A9\x6AB\a\xDA" +
            "\x2\x2\x6AA\x6A9\x3\x2\x2\x2\x6AA\x6AB\x3\x2\x2\x2\x6AB\x6AC\x3\x2\x2" +
            "\x2\x6AC\x6AE\x5\xC8\x65\x2\x6AD\x6AF\a\xDA\x2\x2\x6AE\x6AD\x3\x2\x2\x2" +
            "\x6AE\x6AF\x3\x2\x2\x2\x6AF\x6B0\x3\x2\x2\x2\x6B0\x6B2\a\n\x2\x2\x6B1" +
            "\x6B3\a\xDA\x2\x2\x6B2\x6B1\x3\x2\x2\x2\x6B2\x6B3\x3\x2\x2\x2\x6B3\x6B4" +
            "\x3\x2\x2\x2\x6B4\x6B6\x5\xC8\x65\x2\x6B5\x6B7\a\xDA\x2\x2\x6B6\x6B5\x3" +
            "\x2\x2\x2\x6B6\x6B7\x3\x2\x2\x2\x6B7\x6B8\x3\x2\x2\x2\x6B8\x6BA\a\n\x2" +
            "\x2\x6B9\x6BB\a\xDA\x2\x2\x6BA\x6B9\x3\x2\x2\x2\x6BA\x6BB\x3\x2\x2\x2" +
            "\x6BB\x6BC\x3\x2\x2\x2\x6BC\x6BD\x5\xC8\x65\x2\x6BD\xA7\x3\x2\x2\x2\x6BE" +
            "\x6BF\a\x9C\x2\x2\x6BF\x6C0\a\xDA\x2\x2\x6C0\x6C2\x5\xD8m\x2\x6C1\x6C3" +
            "\a\xDA\x2\x2\x6C2\x6C1\x3\x2\x2\x2\x6C2\x6C3\x3\x2\x2\x2\x6C3\x6C4\x3" +
            "\x2\x2\x2\x6C4\x6C6\a\n\x2\x2\x6C5\x6C7\a\xDA\x2\x2\x6C6\x6C5\x3\x2\x2" +
            "\x2\x6C6\x6C7\x3\x2\x2\x2\x6C7\x6C8\x3\x2\x2\x2\x6C8\x6C9\x5\xC8\x65\x2" +
            "\x6C9\xA9\x3\x2\x2\x2\x6CA\x6CB\a\x9D\x2\x2\x6CB\x6CC\a\xDA\x2\x2\x6CC" +
            "\x6CD\a\x1C\x2\x2\x6CD\x6CE\a\xDA\x2\x2\x6CE\x6D0\x5\xC8\x65\x2\x6CF\x6D1" +
            "\a\xD8\x2\x2\x6D0\x6CF\x3\x2\x2\x2\x6D1\x6D2\x3\x2\x2\x2\x6D2\x6D0\x3" +
            "\x2\x2\x2\x6D2\x6D3\x3\x2\x2\x2\x6D3\x6D7\x3\x2\x2\x2\x6D4\x6D6\x5\xAE" +
            "X\x2\x6D5\x6D4\x3\x2\x2\x2\x6D6\x6D9\x3\x2\x2\x2\x6D7\x6D5\x3\x2\x2\x2" +
            "\x6D7\x6D8\x3\x2\x2\x2\x6D8\x6DB\x3\x2\x2\x2\x6D9\x6D7\x3\x2\x2\x2\x6DA" +
            "\x6DC\a\xDA\x2\x2\x6DB\x6DA\x3\x2\x2\x2\x6DB\x6DC\x3\x2\x2\x2\x6DC\x6DD" +
            "\x3\x2\x2\x2\x6DD\x6DE\a=\x2\x2\x6DE\xAB\x3\x2\x2\x2\x6DF\x6E1\aZ\x2\x2" +
            "\x6E0\x6E2\a\xDA\x2\x2\x6E1\x6E0\x3\x2\x2\x2\x6E1\x6E2\x3\x2\x2\x2\x6E2" +
            "\x6E3\x3\x2\x2\x2\x6E3\x6E5\x5\x10A\x86\x2\x6E4\x6E6\a\xDA\x2\x2\x6E5" +
            "\x6E4\x3\x2\x2\x2\x6E5\x6E6\x3\x2\x2\x2\x6E6\x6E7\x3\x2\x2\x2\x6E7\x6E8" +
            "\x5\xC8\x65\x2\x6E8\x6F1\x3\x2\x2\x2\x6E9\x6EA\x5\xC8\x65\x2\x6EA\x6EB" +
            "\a\xDA\x2\x2\x6EB\x6EC\a\xAD\x2\x2\x6EC\x6ED\a\xDA\x2\x2\x6ED\x6EE\x5" +
            "\xC8\x65\x2\x6EE\x6F1\x3\x2\x2\x2\x6EF\x6F1\x5\xC8\x65\x2\x6F0\x6DF\x3" +
            "\x2\x2\x2\x6F0\x6E9\x3\x2\x2\x2\x6F0\x6EF\x3\x2\x2\x2\x6F1\xAD\x3\x2\x2" +
            "\x2\x6F2\x6F3\a\x1C\x2\x2\x6F3\x6F4\a\xDA\x2\x2\x6F4\x6F6\x5\xB0Y\x2\x6F5" +
            "\x6F7\a\xDA\x2\x2\x6F6\x6F5\x3\x2\x2\x2\x6F6\x6F7\x3\x2\x2\x2\x6F7\x6F9" +
            "\x3\x2\x2\x2\x6F8\x6FA\a\b\x2\x2\x6F9\x6F8\x3\x2\x2\x2\x6F9\x6FA\x3\x2" +
            "\x2\x2\x6FA\x6FE\x3\x2\x2\x2\x6FB\x6FD\a\xD8\x2\x2\x6FC\x6FB\x3\x2\x2" +
            "\x2\x6FD\x700\x3\x2\x2\x2\x6FE\x6FC\x3\x2\x2\x2\x6FE\x6FF\x3\x2\x2\x2" +
            "\x6FF\x709\x3\x2\x2\x2\x700\x6FE\x3\x2\x2\x2\x701\x703\x5\x1A\xE\x2\x702" +
            "\x704\a\xD8\x2\x2\x703\x702\x3\x2\x2\x2\x704\x705\x3\x2\x2\x2\x705\x703" +
            "\x3\x2\x2\x2\x705\x706\x3\x2\x2\x2\x706\x708\x3\x2\x2\x2\x707\x701\x3" +
            "\x2\x2\x2\x708\x70B\x3\x2\x2\x2\x709\x707\x3\x2\x2\x2\x709\x70A\x3\x2" +
            "\x2\x2\x70A\xAF\x3\x2\x2\x2\x70B\x709\x3\x2\x2\x2\x70C\x71C\a\x37\x2\x2" +
            "\x70D\x718\x5\xACW\x2\x70E\x710\a\xDA\x2\x2\x70F\x70E\x3\x2\x2\x2\x70F" +
            "\x710\x3\x2\x2\x2\x710\x711\x3\x2\x2\x2\x711\x713\a\n\x2\x2\x712\x714" +
            "\a\xDA\x2\x2\x713\x712\x3\x2\x2\x2\x713\x714\x3\x2\x2\x2\x714\x715\x3" +
            "\x2\x2\x2\x715\x717\x5\xACW\x2\x716\x70F\x3\x2\x2\x2\x717\x71A\x3\x2\x2" +
            "\x2\x718\x716\x3\x2\x2\x2\x718\x719\x3\x2\x2\x2\x719\x71C\x3\x2\x2\x2" +
            "\x71A\x718\x3\x2\x2\x2\x71B\x70C\x3\x2\x2\x2\x71B\x70D\x3\x2\x2\x2\x71C" +
            "\xB1\x3\x2\x2\x2\x71D\x71E\a\x9E\x2\x2\x71E\x71F\a\xDA\x2\x2\x71F\x728" +
            "\x5\xC8\x65\x2\x720\x722\a\xDA\x2\x2\x721\x720\x3\x2\x2\x2\x721\x722\x3" +
            "\x2\x2\x2\x722\x723\x3\x2\x2\x2\x723\x725\a\n\x2\x2\x724\x726\a\xDA\x2" +
            "\x2\x725\x724\x3\x2\x2\x2\x725\x726\x3\x2\x2\x2\x726\x727\x3\x2\x2\x2" +
            "\x727\x729\x5\xC8\x65\x2\x728\x721\x3\x2\x2\x2\x728\x729\x3\x2\x2\x2\x729" +
            "\xB3\x3\x2\x2\x2\x72A\x72B\a\xA0\x2\x2\x72B\x72C\a\xDA\x2\x2\x72C\x72E" +
            "\x5\xC8\x65\x2\x72D\x72F\a\xDA\x2\x2\x72E\x72D\x3\x2\x2\x2\x72E\x72F\x3" +
            "\x2\x2\x2\x72F\x730\x3\x2\x2\x2\x730\x732\a\n\x2\x2\x731\x733\a\xDA\x2" +
            "\x2\x732\x731\x3\x2\x2\x2\x732\x733\x3\x2\x2\x2\x733\x734\x3\x2\x2\x2" +
            "\x734\x735\x5\xC8\x65\x2\x735\xB5\x3\x2\x2\x2\x736\x737\a\x9F\x2\x2\x737" +
            "\x738\a\xDA\x2\x2\x738\x73A\x5\xE6t\x2\x739\x73B\a\xDA\x2\x2\x73A\x739" +
            "\x3\x2\x2\x2\x73A\x73B\x3\x2\x2\x2\x73B\x73C\x3\x2\x2\x2\x73C\x73E\a\xC0" +
            "\x2\x2\x73D\x73F\a\xDA\x2\x2\x73E\x73D\x3\x2\x2\x2\x73E\x73F\x3\x2\x2" +
            "\x2\x73F\x740\x3\x2\x2\x2\x740\x741\x5\xC8\x65\x2\x741\xB7\x3\x2\x2\x2" +
            "\x742\x743\a\xA6\x2\x2\x743\xB9\x3\x2\x2\x2\x744\x745\x5\x11A\x8E\x2\x745" +
            "\x746\a\xDA\x2\x2\x746\x748\x3\x2\x2\x2\x747\x744\x3\x2\x2\x2\x747\x748" +
            "\x3\x2\x2\x2\x748\x74B\x3\x2\x2\x2\x749\x74A\a\xA4\x2\x2\x74A\x74C\a\xDA" +
            "\x2\x2\x74B\x749\x3\x2\x2\x2\x74B\x74C\x3\x2\x2\x2\x74C\x74D\x3\x2\x2" +
            "\x2\x74D\x74F\a\xA8\x2\x2\x74E\x750\a\xDA\x2\x2\x74F\x74E\x3\x2\x2\x2" +
            "\x74F\x750\x3\x2\x2\x2\x750\x751\x3\x2\x2\x2\x751\x756\x5\x102\x82\x2" +
            "\x752\x754\a\xDA\x2\x2\x753\x752\x3\x2\x2\x2\x753\x754\x3\x2\x2\x2\x754" +
            "\x755\x3\x2\x2\x2\x755\x757\x5\xF8}\x2\x756\x753\x3\x2\x2\x2\x756\x757" +
            "\x3\x2\x2\x2\x757\x759\x3\x2\x2\x2\x758\x75A\a\xD8\x2\x2\x759\x758\x3" +
            "\x2\x2\x2\x75A\x75B\x3\x2\x2\x2\x75B\x759\x3\x2\x2\x2\x75B\x75C\x3\x2" +
            "\x2\x2\x75C\x763\x3\x2\x2\x2\x75D\x75F\x5\x1A\xE\x2\x75E\x760\a\xD8\x2" +
            "\x2\x75F\x75E\x3\x2\x2\x2\x760\x761\x3\x2\x2\x2\x761\x75F\x3\x2\x2\x2" +
            "\x761\x762\x3\x2\x2\x2\x762\x764\x3\x2\x2\x2\x763\x75D\x3\x2\x2\x2\x763" +
            "\x764\x3\x2\x2\x2\x764\x765\x3\x2\x2\x2\x765\x766\a>\x2\x2\x766\xBB\x3" +
            "\x2\x2\x2\x767\x769\a\xAC\x2\x2\x768\x76A\a\xDA\x2\x2\x769\x768\x3\x2" +
            "\x2\x2\x769\x76A\x3\x2\x2\x2\x76A\x76B\x3\x2\x2\x2\x76B\x76D\a\xC0\x2" +
            "\x2\x76C\x76E\a\xDA\x2\x2\x76D\x76C\x3\x2\x2\x2\x76D\x76E\x3\x2\x2\x2" +
            "\x76E\x76F\x3\x2\x2\x2\x76F\x770\x5\xC8\x65\x2\x770\xBD\x3\x2\x2\x2\x771" +
            "\x772\x5\x11A\x8E\x2\x772\x773\a\xDA\x2\x2\x773\x775\x3\x2\x2\x2\x774" +
            "\x771\x3\x2\x2\x2\x774\x775\x3\x2\x2\x2\x775\x776\x3\x2\x2\x2\x776\x777" +
            "\a\xAF\x2\x2\x777\x778\a\xDA\x2\x2\x778\x77A\x5\x102\x82\x2\x779\x77B" +
            "\a\xD8\x2\x2\x77A\x779\x3\x2\x2\x2\x77B\x77C\x3\x2\x2\x2\x77C\x77A\x3" +
            "\x2\x2\x2\x77C\x77D\x3\x2\x2\x2\x77D\x781\x3\x2\x2\x2\x77E\x780\x5\xC0" +
            "\x61\x2\x77F\x77E\x3\x2\x2\x2\x780\x783\x3\x2\x2\x2\x781\x77F\x3\x2\x2" +
            "\x2\x781\x782\x3\x2\x2\x2\x782\x784\x3\x2\x2\x2\x783\x781\x3\x2\x2\x2" +
            "\x784\x785\a?\x2\x2\x785\xBF\x3\x2\x2\x2\x786\x795\x5\x102\x82\x2\x787" +
            "\x789\a\xDA\x2\x2\x788\x787\x3\x2\x2\x2\x788\x789\x3\x2\x2\x2\x789\x78A" +
            "\x3\x2\x2\x2\x78A\x78F\a\xC4\x2\x2\x78B\x78D\a\xDA\x2\x2\x78C\x78B\x3" +
            "\x2\x2\x2\x78C\x78D\x3\x2\x2\x2\x78D\x78E\x3\x2\x2\x2\x78E\x790\x5\xFE" +
            "\x80\x2\x78F\x78C\x3\x2\x2\x2\x78F\x790\x3\x2\x2\x2\x790\x792\x3\x2\x2" +
            "\x2\x791\x793\a\xDA\x2\x2\x792\x791\x3\x2\x2\x2\x792\x793\x3\x2\x2\x2" +
            "\x793\x794\x3\x2\x2\x2\x794\x796\a\xCD\x2\x2\x795\x788\x3\x2\x2\x2\x795" +
            "\x796\x3\x2\x2\x2\x796\x799\x3\x2\x2\x2\x797\x798\a\xDA\x2\x2\x798\x79A" +
            "\x5\x104\x83\x2\x799\x797\x3\x2\x2\x2\x799\x79A\x3\x2\x2\x2\x79A\x79C" +
            "\x3\x2\x2\x2\x79B\x79D\a\xD8\x2\x2\x79C\x79B\x3\x2\x2\x2\x79D\x79E\x3" +
            "\x2\x2\x2\x79E\x79C\x3\x2\x2\x2\x79E\x79F\x3\x2\x2\x2\x79F\xC1\x3\x2\x2" +
            "\x2\x7A0\x7A1\a\xB0\x2\x2\x7A1\x7A2\a\xDA\x2\x2\x7A2\x7A7\x5\xC8\x65\x2" +
            "\x7A3\x7A4\a\xDA\x2\x2\x7A4\x7A5\aZ\x2\x2\x7A5\x7A6\a\xDA\x2\x2\x7A6\x7A8" +
            "\x5\x116\x8C\x2\x7A7\x7A3\x3\x2\x2\x2\x7A7\x7A8\x3\x2\x2\x2\x7A8\xC3\x3" +
            "\x2\x2\x2\x7A9\x7AA\a\xB1\x2\x2\x7AA\x7AB\a\xDA\x2\x2\x7AB\x7AC\x5\xC8" +
            "\x65\x2\x7AC\xC5\x3\x2\x2\x2\x7AD\x7AE\a\xB2\x2\x2\x7AE\x7AF\a\xDA\x2" +
            "\x2\x7AF\x7BE\x5\xD8m\x2\x7B0\x7B2\a\xDA\x2\x2\x7B1\x7B0\x3\x2\x2\x2\x7B1" +
            "\x7B2\x3\x2\x2\x2\x7B2\x7B3\x3\x2\x2\x2\x7B3\x7B5\a\n\x2\x2\x7B4\x7B6" +
            "\a\xDA\x2\x2\x7B5\x7B4\x3\x2\x2\x2\x7B5\x7B6\x3\x2\x2\x2\x7B6\x7B7\x3" +
            "\x2\x2\x2\x7B7\x7BC\x5\xC8\x65\x2\x7B8\x7B9\a\xDA\x2\x2\x7B9\x7BA\a\xAD" +
            "\x2\x2\x7BA\x7BB\a\xDA\x2\x2\x7BB\x7BD\x5\xC8\x65\x2\x7BC\x7B8\x3\x2\x2" +
            "\x2\x7BC\x7BD\x3\x2\x2\x2\x7BD\x7BF\x3\x2\x2\x2\x7BE\x7B1\x3\x2\x2\x2" +
            "\x7BE\x7BF\x3\x2\x2\x2\x7BF\xC7\x3\x2\x2\x2\x7C0\x7C1\b\x65\x1\x2\x7C1" +
            "\x7C3\au\x2\x2\x7C2\x7C4\a\xDA\x2\x2\x7C3\x7C2\x3\x2\x2\x2\x7C3\x7C4\x3" +
            "\x2\x2\x2\x7C4\x7C5\x3\x2\x2\x2\x7C5\x7FD\x5\xC8\x65\x1E\x7C6\x7C8\a\r" +
            "\x2\x2\x7C7\x7C9\a\xDA\x2\x2\x7C8\x7C7\x3\x2\x2\x2\x7C8\x7C9\x3\x2\x2" +
            "\x2\x7C9\x7CA\x3\x2\x2\x2\x7CA\x7FD\x5\xC8\x65\x1B\x7CB\x7CD\x5\xE6t\x2" +
            "\x7CC\x7CE\a\xDA\x2\x2\x7CD\x7CC\x3\x2\x2\x2\x7CD\x7CE\x3\x2\x2\x2\x7CE" +
            "\x7CF\x3\x2\x2\x2\x7CF\x7D1\a\xBE\x2\x2\x7D0\x7D2\a\xDA\x2\x2\x7D1\x7D0" +
            "\x3\x2\x2\x2\x7D1\x7D2\x3\x2\x2\x2\x7D2\x7D3\x3\x2\x2\x2\x7D3\x7D4\x5" +
            "\xC8\x65\x1A\x7D4\x7FD\x3\x2\x2\x2\x7D5\x7D7\a\xC6\x2\x2\x7D6\x7D8\a\xDA" +
            "\x2\x2\x7D7\x7D6\x3\x2\x2\x2\x7D7\x7D8\x3\x2\x2\x2\x7D8\x7D9\x3\x2\x2" +
            "\x2\x7D9\x7FD\x5\xC8\x65\x10\x7DA\x7DC\a\xCA\x2\x2\x7DB\x7DD\a\xDA\x2" +
            "\x2\x7DC\x7DB\x3\x2\x2\x2\x7DC\x7DD\x3\x2\x2\x2\x7DD\x7DE\x3\x2\x2\x2" +
            "\x7DE\x7FD\x5\xC8\x65\xF\x7DF\x7E1\av\x2\x2\x7E0\x7E2\a\xDA\x2\x2\x7E1" +
            "\x7E0\x3\x2\x2\x2\x7E1\x7E2\x3\x2\x2\x2\x7E2\x7E3\x3\x2\x2\x2\x7E3\x7FD" +
            "\x5\xC8\x65\x3\x7E4\x7FD\x5\x114\x8B\x2\x7E5\x7FD\x5\xE6t\x2\x7E6\x7E8" +
            "\a\xC4\x2\x2\x7E7\x7E9\a\xDA\x2\x2\x7E8\x7E7\x3\x2\x2\x2\x7E8\x7E9\x3" +
            "\x2\x2\x2\x7E9\x7EA\x3\x2\x2\x2\x7EA\x7F5\x5\xC8\x65\x2\x7EB\x7ED\a\xDA" +
            "\x2\x2\x7EC\x7EB\x3\x2\x2\x2\x7EC\x7ED\x3\x2\x2\x2\x7ED\x7EE\x3\x2\x2" +
            "\x2\x7EE\x7F0\a\n\x2\x2\x7EF\x7F1\a\xDA\x2\x2\x7F0\x7EF\x3\x2\x2\x2\x7F0" +
            "\x7F1\x3\x2\x2\x2\x7F1\x7F2\x3\x2\x2\x2\x7F2\x7F4\x5\xC8\x65\x2\x7F3\x7EC" +
            "\x3\x2\x2\x2\x7F4\x7F7\x3\x2\x2\x2\x7F5\x7F3\x3\x2\x2\x2\x7F5\x7F6\x3" +
            "\x2\x2\x2\x7F6\x7F8\x3\x2\x2\x2\x7F7\x7F5\x3\x2\x2\x2\x7F8\x7F9\a\xCD" +
            "\x2\x2\x7F9\x7FD\x3\x2\x2\x2\x7FA\x7FD\x5\xC2\x62\x2\x7FB\x7FD\x5v<\x2" +
            "\x7FC\x7C0\x3\x2\x2\x2\x7FC\x7C6\x3\x2\x2\x2\x7FC\x7CB\x3\x2\x2\x2\x7FC" +
            "\x7D5\x3\x2\x2\x2\x7FC\x7DA\x3\x2\x2\x2\x7FC\x7DF\x3\x2\x2\x2\x7FC\x7E4" +
            "\x3\x2\x2\x2\x7FC\x7E5\x3\x2\x2\x2\x7FC\x7E6\x3\x2\x2\x2\x7FC\x7FA\x3" +
            "\x2\x2\x2\x7FC\x7FB\x3\x2\x2\x2\x7FD\x8B4\x3\x2\x2\x2\x7FE\x800\f\x19" +
            "\x2\x2\x7FF\x801\a\xDA\x2\x2\x800\x7FF\x3\x2\x2\x2\x800\x801\x3\x2\x2" +
            "\x2\x801\x802\x3\x2\x2\x2\x802\x804\aZ\x2\x2\x803\x805\a\xDA\x2\x2\x804" +
            "\x803\x3\x2\x2\x2\x804\x805\x3\x2\x2\x2\x805\x806\x3\x2\x2\x2\x806\x8B3" +
            "\x5\xC8\x65\x1A\x807\x809\f\x18\x2\x2\x808\x80A\a\xDA\x2\x2\x809\x808" +
            "\x3\x2\x2\x2\x809\x80A\x3\x2\x2\x2\x80A\x80B\x3\x2\x2\x2\x80B\x80D\a\x64" +
            "\x2\x2\x80C\x80E\a\xDA\x2\x2\x80D\x80C\x3\x2\x2\x2\x80D\x80E\x3\x2\x2" +
            "\x2\x80E\x80F\x3\x2\x2\x2\x80F\x8B3\x5\xC8\x65\x19\x810\x812\f\x17\x2" +
            "\x2\x811\x813\a\xDA\x2\x2\x812\x811\x3\x2\x2\x2\x812\x813\x3\x2\x2\x2" +
            "\x813\x814\x3\x2\x2\x2\x814\x816\a\xC1\x2\x2\x815\x817\a\xDA\x2\x2\x816" +
            "\x815\x3\x2\x2\x2\x816\x817\x3\x2\x2\x2\x817\x818\x3\x2\x2\x2\x818\x8B3" +
            "\x5\xC8\x65\x18\x819\x81B\f\x16\x2\x2\x81A\x81C\a\xDA\x2\x2\x81B\x81A" +
            "\x3\x2\x2\x2\x81B\x81C\x3\x2\x2\x2\x81C\x81D\x3\x2\x2\x2\x81D\x81F\a\xC3" +
            "\x2\x2\x81E\x820\a\xDA\x2\x2\x81F\x81E\x3\x2\x2\x2\x81F\x820\x3\x2\x2" +
            "\x2\x820\x821\x3\x2\x2\x2\x821\x8B3\x5\xC8\x65\x17\x822\x824\f\x15\x2" +
            "\x2\x823\x825\a\xDA\x2\x2\x824\x823\x3\x2\x2\x2\x824\x825\x3\x2\x2\x2" +
            "\x825\x826\x3\x2\x2\x2\x826\x828\a\xC2\x2\x2\x827\x829\a\xDA\x2\x2\x828" +
            "\x827\x3\x2\x2\x2\x828\x829\x3\x2\x2\x2\x829\x82A\x3\x2\x2\x2\x82A\x8B3" +
            "\x5\xC8\x65\x16\x82B\x82D\f\x14\x2\x2\x82C\x82E\a\xDA\x2\x2\x82D\x82C" +
            "\x3\x2\x2\x2\x82D\x82E\x3\x2\x2\x2\x82E\x82F\x3\x2\x2\x2\x82F\x831\a\xC5" +
            "\x2\x2\x830\x832\a\xDA\x2\x2\x831\x830\x3\x2\x2\x2\x831\x832\x3\x2\x2" +
            "\x2\x832\x833\x3\x2\x2\x2\x833\x8B3\x5\xC8\x65\x15\x834\x836\f\x13\x2" +
            "\x2\x835\x837\a\xDA\x2\x2\x836\x835\x3\x2\x2\x2\x836\x837\x3\x2\x2\x2" +
            "\x837\x838\x3\x2\x2\x2\x838\x83A\a\xC9\x2\x2\x839\x83B\a\xDA\x2\x2\x83A" +
            "\x839\x3\x2\x2\x2\x83A\x83B\x3\x2\x2\x2\x83B\x83C\x3\x2\x2\x2\x83C\x8B3" +
            "\x5\xC8\x65\x14\x83D\x83F\f\x12\x2\x2\x83E\x840\a\xDA\x2\x2\x83F\x83E" +
            "\x3\x2\x2\x2\x83F\x840\x3\x2\x2\x2\x840\x841\x3\x2\x2\x2\x841\x843\a\xC0" +
            "\x2\x2\x842\x844\a\xDA\x2\x2\x843\x842\x3\x2\x2\x2\x843\x844\x3\x2\x2" +
            "\x2\x844\x845\x3\x2\x2\x2\x845\x8B3\x5\xC8\x65\x13\x846\x848\f\x11\x2" +
            "\x2\x847\x849\a\xDA\x2\x2\x848\x847\x3\x2\x2\x2\x848\x849\x3\x2\x2\x2" +
            "\x849\x84A\x3\x2\x2\x2\x84A\x84C\a\xBD\x2\x2\x84B\x84D\a\xDA\x2\x2\x84C" +
            "\x84B\x3\x2\x2\x2\x84C\x84D\x3\x2\x2\x2\x84D\x84E\x3\x2\x2\x2\x84E\x8B3" +
            "\x5\xC8\x65\x12\x84F\x851\f\xE\x2\x2\x850\x852\a\xDA\x2\x2\x851\x850\x3" +
            "\x2\x2\x2\x851\x852\x3\x2\x2\x2\x852\x853\x3\x2\x2\x2\x853\x855\a\xCA" +
            "\x2\x2\x854\x856\a\xDA\x2\x2\x855\x854\x3\x2\x2\x2\x855\x856\x3\x2\x2" +
            "\x2\x856\x857\x3\x2\x2\x2\x857\x8B3\x5\xC8\x65\xF\x858\x85A\f\r\x2\x2" +
            "\x859\x85B\a\xDA\x2\x2\x85A\x859\x3\x2\x2\x2\x85A\x85B\x3\x2\x2\x2\x85B" +
            "\x85C\x3\x2\x2\x2\x85C\x85E\ar\x2\x2\x85D\x85F\a\xDA\x2\x2\x85E\x85D\x3" +
            "\x2\x2\x2\x85E\x85F\x3\x2\x2\x2\x85F\x860\x3\x2\x2\x2\x860\x8B3\x5\xC8" +
            "\x65\xE\x861\x863\f\f\x2\x2\x862\x864\a\xDA\x2\x2\x863\x862\x3\x2\x2\x2" +
            "\x863\x864\x3\x2\x2\x2\x864\x865\x3\x2\x2\x2\x865\x867\a\xBF\x2\x2\x866" +
            "\x868\a\xDA\x2\x2\x867\x866\x3\x2\x2\x2\x867\x868\x3\x2\x2\x2\x868\x869" +
            "\x3\x2\x2\x2\x869\x8B3\x5\xC8\x65\r\x86A\x86C\f\v\x2\x2\x86B\x86D\a\xDA" +
            "\x2\x2\x86C\x86B\x3\x2\x2\x2\x86C\x86D\x3\x2\x2\x2\x86D\x86E\x3\x2\x2" +
            "\x2\x86E\x870\a\xC8\x2\x2\x86F\x871\a\xDA\x2\x2\x870\x86F\x3\x2\x2\x2" +
            "\x870\x871\x3\x2\x2\x2\x871\x872\x3\x2\x2\x2\x872\x8B3\x5\xC8\x65\f\x873" +
            "\x875\f\n\x2\x2\x874\x876\a\xDA\x2\x2\x875\x874\x3\x2\x2\x2\x875\x876" +
            "\x3\x2\x2\x2\x876\x877\x3\x2\x2\x2\x877\x879\a\xC6\x2\x2\x878\x87A\a\xDA" +
            "\x2\x2\x879\x878\x3\x2\x2\x2\x879\x87A\x3\x2\x2\x2\x87A\x87B\x3\x2\x2" +
            "\x2\x87B\x8B3\x5\xC8\x65\v\x87C\x87E\f\t\x2\x2\x87D\x87F\a\xDA\x2\x2\x87E" +
            "\x87D\x3\x2\x2\x2\x87E\x87F\x3\x2\x2\x2\x87F\x880\x3\x2\x2\x2\x880\x882" +
            "\a\xCC\x2\x2\x881\x883\a\xDA\x2\x2\x882\x881\x3\x2\x2\x2\x882\x883\x3" +
            "\x2\x2\x2\x883\x884\x3\x2\x2\x2\x884\x8B3\x5\xC8\x65\n\x885\x887\f\b\x2" +
            "\x2\x886\x888\a\xDA\x2\x2\x887\x886\x3\x2\x2\x2\x887\x888\x3\x2\x2\x2" +
            "\x888\x889\x3\x2\x2\x2\x889\x88B\aV\x2\x2\x88A\x88C\a\xDA\x2\x2\x88B\x88A" +
            "\x3\x2\x2\x2\x88B\x88C\x3\x2\x2\x2\x88C\x88D\x3\x2\x2\x2\x88D\x8B3\x5" +
            "\xC8\x65\t\x88E\x890\f\a\x2\x2\x88F\x891\a\xDA\x2\x2\x890\x88F\x3\x2\x2" +
            "\x2\x890\x891\x3\x2\x2\x2\x891\x892\x3\x2\x2\x2\x892\x894\a\x43\x2\x2" +
            "\x893\x895\a\xDA\x2\x2\x894\x893\x3\x2\x2\x2\x894\x895\x3\x2\x2\x2\x895" +
            "\x896\x3\x2\x2\x2\x896\x8B3\x5\xC8\x65\b\x897\x899\f\x6\x2\x2\x898\x89A" +
            "\a\xDA\x2\x2\x899\x898\x3\x2\x2\x2\x899\x89A\x3\x2\x2\x2\x89A\x89B\x3" +
            "\x2\x2\x2\x89B\x89D\a\xBC\x2\x2\x89C\x89E\a\xDA\x2\x2\x89D\x89C\x3\x2" +
            "\x2\x2\x89D\x89E\x3\x2\x2\x2\x89E\x89F\x3\x2\x2\x2\x89F\x8B3\x5\xC8\x65" +
            "\a\x8A0\x8A2\f\x5\x2\x2\x8A1\x8A3\a\xDA\x2\x2\x8A2\x8A1\x3\x2\x2\x2\x8A2" +
            "\x8A3\x3\x2\x2\x2\x8A3\x8A4\x3\x2\x2\x2\x8A4\x8A6\a\x82\x2\x2\x8A5\x8A7" +
            "\a\xDA\x2\x2\x8A6\x8A5\x3\x2\x2\x2\x8A6\x8A7\x3\x2\x2\x2\x8A7\x8A8\x3" +
            "\x2\x2\x2\x8A8\x8B3\x5\xC8\x65\x6\x8A9\x8AB\f\x4\x2\x2\x8AA\x8AC\a\xDA" +
            "\x2\x2\x8AB\x8AA\x3\x2\x2\x2\x8AB\x8AC\x3\x2\x2\x2\x8AC\x8AD\x3\x2\x2" +
            "\x2\x8AD\x8AF\a\xF\x2\x2\x8AE\x8B0\a\xDA\x2\x2\x8AF\x8AE\x3\x2\x2\x2\x8AF" +
            "\x8B0\x3\x2\x2\x2\x8B0\x8B1\x3\x2\x2\x2\x8B1\x8B3\x5\xC8\x65\x5\x8B2\x7FE" +
            "\x3\x2\x2\x2\x8B2\x807\x3\x2\x2\x2\x8B2\x810\x3\x2\x2\x2\x8B2\x819\x3" +
            "\x2\x2\x2\x8B2\x822\x3\x2\x2\x2\x8B2\x82B\x3\x2\x2\x2\x8B2\x834\x3\x2" +
            "\x2\x2\x8B2\x83D\x3\x2\x2\x2\x8B2\x846\x3\x2\x2\x2\x8B2\x84F\x3\x2\x2" +
            "\x2\x8B2\x858\x3\x2\x2\x2\x8B2\x861\x3\x2\x2\x2\x8B2\x86A\x3\x2\x2\x2" +
            "\x8B2\x873\x3\x2\x2\x2\x8B2\x87C\x3\x2\x2\x2\x8B2\x885\x3\x2\x2\x2\x8B2" +
            "\x88E\x3\x2\x2\x2\x8B2\x897\x3\x2\x2\x2\x8B2\x8A0\x3\x2\x2\x2\x8B2\x8A9" +
            "\x3\x2\x2\x2\x8B3\x8B6\x3\x2\x2\x2\x8B4\x8B2\x3\x2\x2\x2\x8B4\x8B5\x3" +
            "\x2\x2\x2\x8B5\xC9\x3\x2\x2\x2\x8B6\x8B4\x3\x2\x2\x2\x8B7\x8BB\a\x33\x2" +
            "\x2\x8B8\x8BB\a\xA4\x2\x2\x8B9\x8BB\x5\x11A\x8E\x2\x8BA\x8B7\x3\x2\x2" +
            "\x2\x8BA\x8B8\x3\x2\x2\x2\x8BA\x8B9\x3\x2\x2\x2\x8BB\x8BC\x3\x2\x2\x2" +
            "\x8BC\x8BF\a\xDA\x2\x2\x8BD\x8BE\a\xBA\x2\x2\x8BE\x8C0\a\xDA\x2\x2\x8BF" +
            "\x8BD\x3\x2\x2\x2\x8BF\x8C0\x3\x2\x2\x2\x8C0\x8C1\x3\x2\x2\x2\x8C1\x8C2" +
            "\x5\xCCg\x2\x8C2\xCB\x3\x2\x2\x2\x8C3\x8CE\x5\xCEh\x2\x8C4\x8C6\a\xDA" +
            "\x2\x2\x8C5\x8C4\x3\x2\x2\x2\x8C5\x8C6\x3\x2\x2\x2\x8C6\x8C7\x3\x2\x2" +
            "\x2\x8C7\x8C9\a\n\x2\x2\x8C8\x8CA\a\xDA\x2\x2\x8C9\x8C8\x3\x2\x2\x2\x8C9" +
            "\x8CA\x3\x2\x2\x2\x8CA\x8CB\x3\x2\x2\x2\x8CB\x8CD\x5\xCEh\x2\x8CC\x8C5" +
            "\x3\x2\x2\x2\x8CD\x8D0\x3\x2\x2\x2\x8CE\x8CC\x3\x2\x2\x2\x8CE\x8CF\x3" +
            "\x2\x2\x2\x8CF\xCD\x3\x2\x2\x2\x8D0\x8CE\x3\x2\x2\x2\x8D1\x8E3\x5\x102" +
            "\x82\x2\x8D2\x8D4\a\xDA\x2\x2\x8D3\x8D2\x3\x2\x2\x2\x8D3\x8D4\x3\x2\x2" +
            "\x2\x8D4\x8D5\x3\x2\x2\x2\x8D5\x8D7\a\xC4\x2\x2\x8D6\x8D8\a\xDA\x2\x2" +
            "\x8D7\x8D6\x3\x2\x2\x2\x8D7\x8D8\x3\x2\x2\x2\x8D8\x8DD\x3\x2\x2\x2\x8D9" +
            "\x8DB\x5\xFE\x80\x2\x8DA\x8DC\a\xDA\x2\x2\x8DB\x8DA\x3\x2\x2\x2\x8DB\x8DC" +
            "\x3\x2\x2\x2\x8DC\x8DE\x3\x2\x2\x2\x8DD\x8D9\x3\x2\x2\x2\x8DD\x8DE\x3" +
            "\x2\x2\x2\x8DE\x8DF\x3\x2\x2\x2\x8DF\x8E1\a\xCD\x2\x2\x8E0\x8E2\a\xDA" +
            "\x2\x2\x8E1\x8E0\x3\x2\x2\x2\x8E1\x8E2\x3\x2\x2\x2\x8E2\x8E4\x3\x2\x2" +
            "\x2\x8E3\x8D3\x3\x2\x2\x2\x8E3\x8E4\x3\x2\x2\x2\x8E4\x8E6\x3\x2\x2\x2" +
            "\x8E5\x8E7\x5\x118\x8D\x2\x8E6\x8E5\x3\x2\x2\x2\x8E6\x8E7\x3\x2\x2\x2" +
            "\x8E7\x8EA\x3\x2\x2\x2\x8E8\x8E9\a\xDA\x2\x2\x8E9\x8EB\x5\x104\x83\x2" +
            "\x8EA\x8E8\x3\x2\x2\x2\x8EA\x8EB\x3\x2\x2\x2\x8EB\xCF\x3\x2\x2\x2\x8EC" +
            "\x8ED\a\xB7\x2\x2\x8ED\x8EE\a\xDA\x2\x2\x8EE\x8F0\x5\xC8\x65\x2\x8EF\x8F1" +
            "\a\xD8\x2\x2\x8F0\x8EF\x3\x2\x2\x2\x8F1\x8F2\x3\x2\x2\x2\x8F2\x8F0\x3" +
            "\x2\x2\x2\x8F2\x8F3\x3\x2\x2\x2\x8F3\x8F9\x3\x2\x2\x2\x8F4\x8F5\x5\x1A" +
            "\xE\x2\x8F5\x8F6\a\xD8\x2\x2\x8F6\x8F8\x3\x2\x2\x2\x8F7\x8F4\x3\x2\x2" +
            "\x2\x8F8\x8FB\x3\x2\x2\x2\x8F9\x8F7\x3\x2\x2\x2\x8F9\x8FA\x3\x2\x2\x2" +
            "\x8FA\x8FC\x3\x2\x2\x2\x8FB\x8F9\x3\x2\x2\x2\x8FC\x8FD\a\xB6\x2\x2\x8FD" +
            "\xD1\x3\x2\x2\x2\x8FE\x8FF\a\xB8\x2\x2\x8FF\x900\a\xDA\x2\x2\x900\x902" +
            "\x5\xD8m\x2\x901\x903\a\xDA\x2\x2\x902\x901\x3\x2\x2\x2\x902\x903\x3\x2" +
            "\x2\x2\x903\x904\x3\x2\x2\x2\x904\x906\a\n\x2\x2\x905\x907\a\xDA\x2\x2" +
            "\x906\x905\x3\x2\x2\x2\x906\x907\x3\x2\x2\x2\x907\x908\x3\x2\x2\x2\x908" +
            "\x909\x5\xC8\x65\x2\x909\xD3\x3\x2\x2\x2\x90A\x90B\a\xB9\x2\x2\x90B\x910" +
            "\a\xDA\x2\x2\x90C\x911\x5\xE6t\x2\x90D\x90E\au\x2\x2\x90E\x90F\a\xDA\x2" +
            "\x2\x90F\x911\x5\x116\x8C\x2\x910\x90C\x3\x2\x2\x2\x910\x90D\x3\x2\x2" +
            "\x2\x911\x913\x3\x2\x2\x2\x912\x914\a\xD8\x2\x2\x913\x912\x3\x2\x2\x2" +
            "\x914\x915\x3\x2\x2\x2\x915\x913\x3\x2\x2\x2\x915\x916\x3\x2\x2\x2\x916" +
            "\x91D\x3\x2\x2\x2\x917\x919\x5\x1A\xE\x2\x918\x91A\a\xD8\x2\x2\x919\x918" +
            "\x3\x2\x2\x2\x91A\x91B\x3\x2\x2\x2\x91B\x919\x3\x2\x2\x2\x91B\x91C\x3" +
            "\x2\x2\x2\x91C\x91E\x3\x2\x2\x2\x91D\x917\x3\x2\x2\x2\x91D\x91E\x3\x2" +
            "\x2\x2\x91E\x91F\x3\x2\x2\x2\x91F\x920\a@\x2\x2\x920\xD5\x3\x2\x2\x2\x921" +
            "\x922\a\xBB\x2\x2\x922\x923\a\xDA\x2\x2\x923\x925\x5\xD8m\x2\x924\x926" +
            "\a\xDA\x2\x2\x925\x924\x3\x2\x2\x2\x925\x926\x3\x2\x2\x2\x926\x927\x3" +
            "\x2\x2\x2\x927\x92C\a\n\x2\x2\x928\x92A\a\xDA\x2\x2\x929\x928\x3\x2\x2" +
            "\x2\x929\x92A\x3\x2\x2\x2\x92A\x92B\x3\x2\x2\x2\x92B\x92D\x5\x84\x43\x2" +
            "\x92C\x929\x3\x2\x2\x2\x92C\x92D\x3\x2\x2\x2\x92D\xD7\x3\x2\x2\x2\x92E" +
            "\x930\a\x5\x2\x2\x92F\x92E\x3\x2\x2\x2\x92F\x930\x3\x2\x2\x2\x930\x931" +
            "\x3\x2\x2\x2\x931\x932\x5\xC8\x65\x2\x932\xD9\x3\x2\x2\x2\x933\x936\x5" +
            "\xDCo\x2\x934\x936\x5\xDEp\x2\x935\x933\x3\x2\x2\x2\x935\x934\x3\x2\x2" +
            "\x2\x936\xDB\x3\x2\x2\x2\x937\x938\a\x1B\x2\x2\x938\x939\a\xDA\x2\x2\x939" +
            "\x93B\x5\x102\x82\x2\x93A\x93C\x5\x118\x8D\x2\x93B\x93A\x3\x2\x2\x2\x93B" +
            "\x93C\x3\x2\x2\x2\x93C\x94A\x3\x2\x2\x2\x93D\x93F\a\xDA\x2\x2\x93E\x93D" +
            "\x3\x2\x2\x2\x93E\x93F\x3\x2\x2\x2\x93F\x940\x3\x2\x2\x2\x940\x942\a\xC4" +
            "\x2\x2\x941\x943\a\xDA\x2\x2\x942\x941\x3\x2\x2\x2\x942\x943\x3\x2\x2" +
            "\x2\x943\x944\x3\x2\x2\x2\x944\x946\x5\xF2z\x2\x945\x947\a\xDA\x2\x2\x946" +
            "\x945\x3\x2\x2\x2\x946\x947\x3\x2\x2\x2\x947\x948\x3\x2\x2\x2\x948\x949" +
            "\a\xCD\x2\x2\x949\x94B\x3\x2\x2\x2\x94A\x93E\x3\x2\x2\x2\x94A\x94B\x3" +
            "\x2\x2\x2\x94B\x955\x3\x2\x2\x2\x94C\x94E\a\xDA\x2\x2\x94D\x94C\x3\x2" +
            "\x2\x2\x94D\x94E\x3\x2\x2\x2\x94E\x94F\x3\x2\x2\x2\x94F\x950\a\xC4\x2" +
            "\x2\x950\x951\x5\xFE\x80\x2\x951\x952\a\xCD\x2\x2\x952\x954\x3\x2\x2\x2" +
            "\x953\x94D\x3\x2\x2\x2\x954\x957\x3\x2\x2\x2\x955\x953\x3\x2\x2\x2\x955" +
            "\x956\x3\x2\x2\x2\x956\xDD\x3\x2\x2\x2\x957\x955\x3\x2\x2\x2\x958\x959" +
            "\a\x1B\x2\x2\x959\x95B\a\xDA\x2\x2\x95A\x95C\x5\xE6t\x2\x95B\x95A\x3\x2" +
            "\x2\x2\x95B\x95C\x3\x2\x2\x2\x95C\x95D\x3\x2\x2\x2\x95D\x95E\a\v\x2\x2" +
            "\x95E\x960\x5\x102\x82\x2\x95F\x961\x5\x118\x8D\x2\x960\x95F\x3\x2\x2" +
            "\x2\x960\x961\x3\x2\x2\x2\x961\x96F\x3\x2\x2\x2\x962\x964\a\xDA\x2\x2" +
            "\x963\x962\x3\x2\x2\x2\x963\x964\x3\x2\x2\x2\x964\x965\x3\x2\x2\x2\x965" +
            "\x967\a\xC4\x2\x2\x966\x968\a\xDA\x2\x2\x967\x966\x3\x2\x2\x2\x967\x968" +
            "\x3\x2\x2\x2\x968\x969\x3\x2\x2\x2\x969\x96B\x5\xF2z\x2\x96A\x96C\a\xDA" +
            "\x2\x2\x96B\x96A\x3\x2\x2\x2\x96B\x96C\x3\x2\x2\x2\x96C\x96D\x3\x2\x2" +
            "\x2\x96D\x96E\a\xCD\x2\x2\x96E\x970\x3\x2\x2\x2\x96F\x963\x3\x2\x2\x2" +
            "\x96F\x970\x3\x2\x2\x2\x970\x97A\x3\x2\x2\x2\x971\x973\a\xDA\x2\x2\x972" +
            "\x971\x3\x2\x2\x2\x972\x973\x3\x2\x2\x2\x973\x974\x3\x2\x2\x2\x974\x975" +
            "\a\xC4\x2\x2\x975\x976\x5\xFE\x80\x2\x976\x977\a\xCD\x2\x2\x977\x979\x3" +
            "\x2\x2\x2\x978\x972\x3\x2\x2\x2\x979\x97C\x3\x2\x2\x2\x97A\x978\x3\x2" +
            "\x2\x2\x97A\x97B\x3\x2\x2\x2\x97B\xDF\x3\x2\x2\x2\x97C\x97A\x3\x2\x2\x2" +
            "\x97D\x980\x5\xE2r\x2\x97E\x980\x5\xE4s\x2\x97F\x97D\x3\x2\x2\x2\x97F" +
            "\x97E\x3\x2\x2\x2\x980\xE1\x3\x2\x2\x2\x981\x983\x5\xE6t\x2\x982\x981" +
            "\x3\x2\x2\x2\x982\x983\x3\x2\x2\x2\x983\x984\x3\x2\x2\x2\x984\x985\a\v" +
            "\x2\x2\x985\x987\x5\x102\x82\x2\x986\x988\x5\x118\x8D\x2\x987\x986\x3" +
            "\x2\x2\x2\x987\x988\x3\x2\x2\x2\x988\x98B\x3\x2\x2\x2\x989\x98A\a\xDA" +
            "\x2\x2\x98A\x98C\x5\xF2z\x2\x98B\x989\x3\x2\x2\x2\x98B\x98C\x3\x2\x2\x2" +
            "\x98C\x98E\x3\x2\x2\x2\x98D\x98F\x5\xF6|\x2\x98E\x98D\x3\x2\x2\x2\x98E" +
            "\x98F\x3\x2\x2\x2\x98F\x999\x3\x2\x2\x2\x990\x992\a\xDA\x2\x2\x991\x990" +
            "\x3\x2\x2\x2\x991\x992\x3\x2\x2\x2\x992\x993\x3\x2\x2\x2\x993\x994\a\xC4" +
            "\x2\x2\x994\x995\x5\xFE\x80\x2\x995\x996\a\xCD\x2\x2\x996\x998\x3\x2\x2" +
            "\x2\x997\x991\x3\x2\x2\x2\x998\x99B\x3\x2\x2\x2\x999\x997\x3\x2\x2\x2" +
            "\x999\x99A\x3\x2\x2\x2\x99A\xE3\x3\x2\x2\x2\x99B\x999\x3\x2\x2\x2\x99C" +
            "\x99F\x5\x108\x85\x2\x99D\x99E\a\xDA\x2\x2\x99E\x9A0\x5\xF2z\x2\x99F\x99D" +
            "\x3\x2\x2\x2\x99F\x9A0\x3\x2\x2\x2\x9A0\x9AA\x3\x2\x2\x2\x9A1\x9A3\a\xDA" +
            "\x2\x2\x9A2\x9A1\x3\x2\x2\x2\x9A2\x9A3\x3\x2\x2\x2\x9A3\x9A4\x3\x2\x2" +
            "\x2\x9A4\x9A5\a\xC4\x2\x2\x9A5\x9A6\x5\xFE\x80\x2\x9A6\x9A7\a\xCD\x2\x2" +
            "\x9A7\x9A9\x3\x2\x2\x2\x9A8\x9A2\x3\x2\x2\x2\x9A9\x9AC\x3\x2\x2\x2\x9AA" +
            "\x9A8\x3\x2\x2\x2\x9AA\x9AB\x3\x2\x2\x2\x9AB\xE5\x3\x2\x2\x2\x9AC\x9AA" +
            "\x3\x2\x2\x2\x9AD\x9B2\x5\xECw\x2\x9AE\x9B2\x5\xE8u\x2\x9AF\x9B2\x5\xEA" +
            "v\x2\x9B0\x9B2\x5\xF0y\x2\x9B1\x9AD\x3\x2\x2\x2\x9B1\x9AE\x3\x2\x2\x2" +
            "\x9B1\x9AF\x3\x2\x2\x2\x9B1\x9B0\x3\x2\x2\x2\x9B2\xE7\x3\x2\x2\x2\x9B3" +
            "\x9B5\x5\x102\x82\x2\x9B4\x9B6\x5\x118\x8D\x2\x9B5\x9B4\x3\x2\x2\x2\x9B5" +
            "\x9B6\x3\x2\x2\x2\x9B6\x9B8\x3\x2\x2\x2\x9B7\x9B9\x5\xF6|\x2\x9B8\x9B7" +
            "\x3\x2\x2\x2\x9B8\x9B9\x3\x2\x2\x2\x9B9\x9C3\x3\x2\x2\x2\x9BA\x9BC\a\xDA" +
            "\x2\x2\x9BB\x9BA\x3\x2\x2\x2\x9BB\x9BC\x3\x2\x2\x2\x9BC\x9BD\x3\x2\x2" +
            "\x2\x9BD\x9BE\a\xC4\x2\x2\x9BE\x9BF\x5\xFE\x80\x2\x9BF\x9C0\a\xCD\x2\x2" +
            "\x9C0\x9C2\x3\x2\x2\x2\x9C1\x9BB\x3\x2\x2\x2\x9C2\x9C5\x3\x2\x2\x2\x9C3" +
            "\x9C1\x3\x2\x2\x2\x9C3\x9C4\x3\x2\x2\x2\x9C4\xE9\x3\x2\x2\x2\x9C5\x9C3" +
            "\x3\x2\x2\x2\x9C6\x9C9\x5\x102\x82\x2\x9C7\x9C9\x5\x106\x84\x2\x9C8\x9C6" +
            "\x3\x2\x2\x2\x9C8\x9C7\x3\x2\x2\x2\x9C9\x9CB\x3\x2\x2\x2\x9CA\x9CC\x5" +
            "\x118\x8D\x2\x9CB\x9CA\x3\x2\x2\x2\x9CB\x9CC\x3\x2\x2\x2\x9CC\x9CE\x3" +
            "\x2\x2\x2\x9CD\x9CF\a\xDA\x2\x2\x9CE\x9CD\x3\x2\x2\x2\x9CE\x9CF\x3\x2" +
            "\x2\x2\x9CF\x9D0\x3\x2\x2\x2\x9D0\x9D2\a\xC4\x2\x2\x9D1\x9D3\a\xDA\x2" +
            "\x2\x9D2\x9D1\x3\x2\x2\x2\x9D2\x9D3\x3\x2\x2\x2\x9D3\x9D8\x3\x2\x2\x2" +
            "\x9D4\x9D6\x5\xF2z\x2\x9D5\x9D7\a\xDA\x2\x2\x9D6\x9D5\x3\x2\x2\x2\x9D6" +
            "\x9D7\x3\x2\x2\x2\x9D7\x9D9\x3\x2\x2\x2\x9D8\x9D4\x3\x2\x2\x2\x9D8\x9D9" +
            "\x3\x2\x2\x2\x9D9\x9DA\x3\x2\x2\x2\x9DA\x9DC\a\xCD\x2\x2\x9DB\x9DD\x5" +
            "\xF6|\x2\x9DC\x9DB\x3\x2\x2\x2\x9DC\x9DD\x3\x2\x2\x2\x9DD\x9E7\x3\x2\x2" +
            "\x2\x9DE\x9E0\a\xDA\x2\x2\x9DF\x9DE\x3\x2\x2\x2\x9DF\x9E0\x3\x2\x2\x2" +
            "\x9E0\x9E1\x3\x2\x2\x2\x9E1\x9E2\a\xC4\x2\x2\x9E2\x9E3\x5\xFE\x80\x2\x9E3" +
            "\x9E4\a\xCD\x2\x2\x9E4\x9E6\x3\x2\x2\x2\x9E5\x9DF\x3\x2\x2\x2\x9E6\x9E9" +
            "\x3\x2\x2\x2\x9E7\x9E5\x3\x2\x2\x2\x9E7\x9E8\x3\x2\x2\x2\x9E8\xEB\x3\x2" +
            "\x2\x2\x9E9\x9E7\x3\x2\x2\x2\x9EA\x9ED\x5\xE8u\x2\x9EB\x9ED\x5\xEAv\x2" +
            "\x9EC\x9EA\x3\x2\x2\x2\x9EC\x9EB\x3\x2\x2\x2\x9EC\x9ED\x3\x2\x2\x2\x9ED" +
            "\x9EF\x3\x2\x2\x2\x9EE\x9F0\x5\xEEx\x2\x9EF\x9EE\x3\x2\x2\x2\x9F0\x9F1" +
            "\x3\x2\x2\x2\x9F1\x9EF\x3\x2\x2\x2\x9F1\x9F2\x3\x2\x2\x2\x9F2\x9F4\x3" +
            "\x2\x2\x2\x9F3\x9F5\x5\xF6|\x2\x9F4\x9F3\x3\x2\x2\x2\x9F4\x9F5\x3\x2\x2" +
            "\x2\x9F5\x9FF\x3\x2\x2\x2\x9F6\x9F8\a\xDA\x2\x2\x9F7\x9F6\x3\x2\x2\x2" +
            "\x9F7\x9F8\x3\x2\x2\x2\x9F8\x9F9\x3\x2\x2\x2\x9F9\x9FA\a\xC4\x2\x2\x9FA" +
            "\x9FB\x5\xFE\x80\x2\x9FB\x9FC\a\xCD\x2\x2\x9FC\x9FE\x3\x2\x2\x2\x9FD\x9F7" +
            "\x3\x2\x2\x2\x9FE\xA01\x3\x2\x2\x2\x9FF\x9FD\x3\x2\x2\x2\x9FF\xA00\x3" +
            "\x2\x2\x2\xA00\xED\x3\x2\x2\x2\xA01\x9FF\x3\x2\x2\x2\xA02\xA05\t\f\x2" +
            "\x2\xA03\xA06\x5\xE8u\x2\xA04\xA06\x5\xEAv\x2\xA05\xA03\x3\x2\x2\x2\xA05" +
            "\xA04\x3\x2\x2\x2\xA06\xEF\x3\x2\x2\x2\xA07\xA08\x5\xF6|\x2\xA08\xF1\x3" +
            "\x2\x2\x2\xA09\xA0B\x5\xF4{\x2\xA0A\xA09\x3\x2\x2\x2\xA0A\xA0B\x3\x2\x2" +
            "\x2\xA0B\xA0D\x3\x2\x2\x2\xA0C\xA0E\a\xDA\x2\x2\xA0D\xA0C\x3\x2\x2\x2" +
            "\xA0D\xA0E\x3\x2\x2\x2\xA0E\xA0F\x3\x2\x2\x2\xA0F\xA11\t\n\x2\x2\xA10" +
            "\xA12\a\xDA\x2\x2\xA11\xA10\x3\x2\x2\x2\xA11\xA12\x3\x2\x2\x2\xA12\xA14" +
            "\x3\x2\x2\x2\xA13\xA0A\x3\x2\x2\x2\xA14\xA17\x3\x2\x2\x2\xA15\xA13\x3" +
            "\x2\x2\x2\xA15\xA16\x3\x2\x2\x2\xA16\xA18\x3\x2\x2\x2\xA17\xA15\x3\x2" +
            "\x2\x2\xA18\xA25\x5\xF4{\x2\xA19\xA1B\a\xDA\x2\x2\xA1A\xA19\x3\x2\x2\x2" +
            "\xA1A\xA1B\x3\x2\x2\x2\xA1B\xA1C\x3\x2\x2\x2\xA1C\xA1E\t\n\x2\x2\xA1D" +
            "\xA1F\a\xDA\x2\x2\xA1E\xA1D\x3\x2\x2\x2\xA1E\xA1F\x3\x2\x2\x2\xA1F\xA21" +
            "\x3\x2\x2\x2\xA20\xA22\x5\xF4{\x2\xA21\xA20\x3\x2\x2\x2\xA21\xA22\x3\x2" +
            "\x2\x2\xA22\xA24\x3\x2\x2\x2\xA23\xA1A\x3\x2\x2\x2\xA24\xA27\x3\x2\x2" +
            "\x2\xA25\xA23\x3\x2\x2\x2\xA25\xA26\x3\x2\x2\x2\xA26\xF3\x3\x2\x2\x2\xA27" +
            "\xA25\x3\x2\x2\x2\xA28\xA2A\a\xC4\x2\x2\xA29\xA28\x3\x2\x2\x2\xA29\xA2A" +
            "\x3\x2\x2\x2\xA2A\xA2D\x3\x2\x2\x2\xA2B\xA2C\t\r\x2\x2\xA2C\xA2E\a\xDA" +
            "\x2\x2\xA2D\xA2B\x3\x2\x2\x2\xA2D\xA2E\x3\x2\x2\x2\xA2E\xA30\x3\x2\x2" +
            "\x2\xA2F\xA31\a\xCD\x2\x2\xA30\xA2F\x3\x2\x2\x2\xA30\xA31\x3\x2\x2\x2" +
            "\xA31\xA32\x3\x2\x2\x2\xA32\xA33\x5\xC8\x65\x2\xA33\xF5\x3\x2\x2\x2\xA34" +
            "\xA35\a\x4\x2\x2\xA35\xA37\x5\x102\x82\x2\xA36\xA38\x5\x118\x8D\x2\xA37" +
            "\xA36\x3\x2\x2\x2\xA37\xA38\x3\x2\x2\x2\xA38\xF7\x3\x2\x2\x2\xA39\xA4B" +
            "\a\xC4\x2\x2\xA3A\xA3C\a\xDA\x2\x2\xA3B\xA3A\x3\x2\x2\x2\xA3B\xA3C\x3" +
            "\x2\x2\x2\xA3C\xA3D\x3\x2\x2\x2\xA3D\xA48\x5\xFA~\x2\xA3E\xA40\a\xDA\x2" +
            "\x2\xA3F\xA3E\x3\x2\x2\x2\xA3F\xA40\x3\x2\x2\x2\xA40\xA41\x3\x2\x2\x2" +
            "\xA41\xA43\a\n\x2\x2\xA42\xA44\a\xDA\x2\x2\xA43\xA42\x3\x2\x2\x2\xA43" +
            "\xA44\x3\x2\x2\x2\xA44\xA45\x3\x2\x2\x2\xA45\xA47\x5\xFA~\x2\xA46\xA3F" +
            "\x3\x2\x2\x2\xA47\xA4A\x3\x2\x2\x2\xA48\xA46\x3\x2\x2\x2\xA48\xA49\x3" +
            "\x2\x2\x2\xA49\xA4C\x3\x2\x2\x2\xA4A\xA48\x3\x2\x2\x2\xA4B\xA3B\x3\x2" +
            "\x2\x2\xA4B\xA4C\x3\x2\x2\x2\xA4C\xA4E\x3\x2\x2\x2\xA4D\xA4F\a\xDA\x2" +
            "\x2\xA4E\xA4D\x3\x2\x2\x2\xA4E\xA4F\x3\x2\x2\x2\xA4F\xA50\x3\x2\x2\x2" +
            "\xA50\xA51\a\xCD\x2\x2\xA51\xF9\x3\x2\x2\x2\xA52\xA53\a}\x2\x2\xA53\xA55" +
            "\a\xDA\x2\x2\xA54\xA52\x3\x2\x2\x2\xA54\xA55\x3\x2\x2\x2\xA55\xA58\x3" +
            "\x2\x2\x2\xA56\xA57\t\xE\x2\x2\xA57\xA59\a\xDA\x2\x2\xA58\xA56\x3\x2\x2" +
            "\x2\xA58\xA59\x3\x2\x2\x2\xA59\xA5C\x3\x2\x2\x2\xA5A\xA5B\a\x84\x2\x2" +
            "\xA5B\xA5D\a\xDA\x2\x2\xA5C\xA5A\x3\x2\x2\x2\xA5C\xA5D\x3\x2\x2\x2\xA5D" +
            "\xA5E\x3\x2\x2\x2\xA5E\xA67\x5\x102\x82\x2\xA5F\xA61\a\xDA\x2\x2\xA60" +
            "\xA5F\x3\x2\x2\x2\xA60\xA61\x3\x2\x2\x2\xA61\xA62\x3\x2\x2\x2\xA62\xA64" +
            "\a\xC4\x2\x2\xA63\xA65\a\xDA\x2\x2\xA64\xA63\x3\x2\x2\x2\xA64\xA65\x3" +
            "\x2\x2\x2\xA65\xA66\x3\x2\x2\x2\xA66\xA68\a\xCD\x2\x2\xA67\xA60\x3\x2" +
            "\x2\x2\xA67\xA68\x3\x2\x2\x2\xA68\xA6D\x3\x2\x2\x2\xA69\xA6B\a\xDA\x2" +
            "\x2\xA6A\xA69\x3\x2\x2\x2\xA6A\xA6B\x3\x2\x2\x2\xA6B\xA6C\x3\x2\x2\x2" +
            "\xA6C\xA6E\x5\x104\x83\x2\xA6D\xA6A\x3\x2\x2\x2\xA6D\xA6E\x3\x2\x2\x2" +
            "\xA6E\xA73\x3\x2\x2\x2\xA6F\xA71\a\xDA\x2\x2\xA70\xA6F\x3\x2\x2\x2\xA70" +
            "\xA71\x3\x2\x2\x2\xA71\xA72\x3\x2\x2\x2\xA72\xA74\x5\xFC\x7F\x2\xA73\xA70" +
            "\x3\x2\x2\x2\xA73\xA74\x3\x2\x2\x2\xA74\xFB\x3\x2\x2\x2\xA75\xA77\a\xC0" +
            "\x2\x2\xA76\xA78\a\xDA\x2\x2\xA77\xA76\x3\x2\x2\x2\xA77\xA78\x3\x2\x2" +
            "\x2\xA78\xA79\x3\x2\x2\x2\xA79\xA7A\x5\xC8\x65\x2\xA7A\xFD\x3\x2\x2\x2" +
            "\xA7B\xA86\x5\x100\x81\x2\xA7C\xA7E\a\xDA\x2\x2\xA7D\xA7C\x3\x2\x2\x2" +
            "\xA7D\xA7E\x3\x2\x2\x2\xA7E\xA7F\x3\x2\x2\x2\xA7F\xA81\a\n\x2\x2\xA80" +
            "\xA82\a\xDA\x2\x2\xA81\xA80\x3\x2\x2\x2\xA81\xA82\x3\x2\x2\x2\xA82\xA83" +
            "\x3\x2\x2\x2\xA83\xA85\x5\x100\x81\x2\xA84\xA7D\x3\x2\x2\x2\xA85\xA88" +
            "\x3\x2\x2\x2\xA86\xA84\x3\x2\x2\x2\xA86\xA87\x3\x2\x2\x2\xA87\xFF\x3\x2" +
            "\x2\x2\xA88\xA86\x3\x2\x2\x2\xA89\xA8A\x5\xC8\x65\x2\xA8A\xA8B\a\xDA\x2" +
            "\x2\xA8B\xA8C\a\xAD\x2\x2\xA8C\xA8D\a\xDA\x2\x2\xA8D\xA8F\x3\x2\x2\x2" +
            "\xA8E\xA89\x3\x2\x2\x2\xA8E\xA8F\x3\x2\x2\x2\xA8F\xA90\x3\x2\x2\x2\xA90" +
            "\xA91\x5\xC8\x65\x2\xA91\x101\x3\x2\x2\x2\xA92\xA95\a\xDB\x2\x2\xA93\xA95" +
            "\x5\x11C\x8F\x2\xA94\xA92\x3\x2\x2\x2\xA94\xA93\x3\x2\x2\x2\xA95\xA96" +
            "\x3\x2\x2\x2\xA96\xA94\x3\x2\x2\x2\xA96\xA97\x3\x2\x2\x2\xA97\x103\x3" +
            "\x2\x2\x2\xA98\xA9A\a\x13\x2\x2\xA99\xA9B\a\xDA\x2\x2\xA9A\xA99\x3\x2" +
            "\x2\x2\xA9A\xA9B\x3\x2\x2\x2\xA9B\xA9E\x3\x2\x2\x2\xA9C\xA9D\au\x2\x2" +
            "\xA9D\xA9F\a\xDA\x2\x2\xA9E\xA9C\x3\x2\x2\x2\xA9E\xA9F\x3\x2\x2\x2\xA9F" +
            "\xAA0\x3\x2\x2\x2\xAA0\xAA5\x5\x116\x8C\x2\xAA1\xAA3\a\xDA\x2\x2\xAA2" +
            "\xAA1\x3\x2\x2\x2\xAA2\xAA3\x3\x2\x2\x2\xAA3\xAA4\x3\x2\x2\x2\xAA4\xAA6" +
            "\x5\x10E\x88\x2\xAA5\xAA2\x3\x2\x2\x2\xAA5\xAA6\x3\x2\x2\x2\xAA6\x105" +
            "\x3\x2\x2\x2\xAA7\xAA8\t\xF\x2\x2\xAA8\x107\x3\x2\x2\x2\xAA9\xAAE\a\xDB" +
            "\x2\x2\xAAA\xAAD\x5\x11C\x8F\x2\xAAB\xAAD\a\xDB\x2\x2\xAAC\xAAA\x3\x2" +
            "\x2\x2\xAAC\xAAB\x3\x2\x2\x2\xAAD\xAB0\x3\x2\x2\x2\xAAE\xAAC\x3\x2\x2" +
            "\x2\xAAE\xAAF\x3\x2\x2\x2\xAAF\xAB9\x3\x2\x2\x2\xAB0\xAAE\x3\x2\x2\x2" +
            "\xAB1\xAB4\x5\x11C\x8F\x2\xAB2\xAB5\x5\x11C\x8F\x2\xAB3\xAB5\a\xDB\x2" +
            "\x2\xAB4\xAB2\x3\x2\x2\x2\xAB4\xAB3\x3\x2\x2\x2\xAB5\xAB6\x3\x2\x2\x2" +
            "\xAB6\xAB4\x3\x2\x2\x2\xAB6\xAB7\x3\x2\x2\x2\xAB7\xAB9\x3\x2\x2\x2\xAB8" +
            "\xAA9\x3\x2\x2\x2\xAB8\xAB1\x3\x2\x2\x2\xAB9\x109\x3\x2\x2\x2\xABA\xABB" +
            "\t\x10\x2\x2\xABB\x10B\x3\x2\x2\x2\xABC\xAC1\x5\x102\x82\x2\xABD\xABE" +
            "\t\f\x2\x2\xABE\xAC0\x5\x102\x82\x2\xABF\xABD\x3\x2\x2\x2\xAC0\xAC3\x3" +
            "\x2\x2\x2\xAC1\xABF\x3\x2\x2\x2\xAC1\xAC2\x3\x2\x2\x2\xAC2\x10D\x3\x2" +
            "\x2\x2\xAC3\xAC1\x3\x2\x2\x2\xAC4\xAC6\a\xC8\x2\x2\xAC5\xAC7\a\xDA\x2" +
            "\x2\xAC6\xAC5\x3\x2\x2\x2\xAC6\xAC7\x3\x2\x2\x2\xAC7\xACA\x3\x2\x2\x2" +
            "\xAC8\xACB\a\xD4\x2\x2\xAC9\xACB\x5\x102\x82\x2\xACA\xAC8\x3\x2\x2\x2" +
            "\xACA\xAC9\x3\x2\x2\x2\xACB\x10F\x3\x2\x2\x2\xACC\xAD5\x5\x108\x85\x2" +
            "\xACD\xACF\a\xDA\x2\x2\xACE\xACD\x3\x2\x2\x2\xACE\xACF\x3\x2\x2\x2\xACF" +
            "\xAD0\x3\x2\x2\x2\xAD0\xAD2\a\xC6\x2\x2\xAD1\xAD3\a\xDA\x2\x2\xAD2\xAD1" +
            "\x3\x2\x2\x2\xAD2\xAD3\x3\x2\x2\x2\xAD3\xAD4\x3\x2\x2\x2\xAD4\xAD6\x5" +
            "\x108\x85\x2\xAD5\xACE\x3\x2\x2\x2\xAD5\xAD6\x3\x2\x2\x2\xAD6\x111\x3" +
            "\x2\x2\x2\xAD7\xAD8\x5\x102\x82\x2\xAD8\xAD9\a\b\x2\x2\xAD9\x113\x3\x2" +
            "\x2\x2\xADA\xADB\t\x11\x2\x2\xADB\x115\x3\x2\x2\x2\xADC\xADF\x5\x106\x84" +
            "\x2\xADD\xADF\x5\x10C\x87\x2\xADE\xADC\x3\x2\x2\x2\xADE\xADD\x3\x2\x2" +
            "\x2\xADF\xAE8\x3\x2\x2\x2\xAE0\xAE2\a\xDA\x2\x2\xAE1\xAE0\x3\x2\x2\x2" +
            "\xAE1\xAE2\x3\x2\x2\x2\xAE2\xAE3\x3\x2\x2\x2\xAE3\xAE5\a\xC4\x2\x2\xAE4" +
            "\xAE6\a\xDA\x2\x2\xAE5\xAE4\x3\x2\x2\x2\xAE5\xAE6\x3\x2\x2\x2\xAE6\xAE7" +
            "\x3\x2\x2\x2\xAE7\xAE9\a\xCD\x2\x2\xAE8\xAE1\x3\x2\x2\x2\xAE8\xAE9\x3" +
            "\x2\x2\x2\xAE9\x117\x3\x2\x2\x2\xAEA\xAEB\t\x12\x2\x2\xAEB\x119\x3\x2" +
            "\x2\x2\xAEC\xAED\t\x13\x2\x2\xAED\x11B\x3\x2\x2\x2\xAEE\xAEF\t\x14\x2" +
            "\x2\xAEF\x11D\x3\x2\x2\x2\x1E9\x122\x127\x12E\x130\x133\x138\x13C\x141" +
            "\x145\x14A\x14E\x153\x157\x163\x168\x16E\x172\x176\x17F\x183\x189\x18E" +
            "\x193\x198\x19D\x1A9\x1AF\x1B4\x1BE\x1C4\x1C8\x1CC\x1D0\x1D5\x1DC\x1E2" +
            "\x1E6\x1EB\x1EF\x1F4\x23A\x240\x244\x247\x257\x25B\x260\x263\x268\x26E" +
            "\x272\x277\x27C\x280\x283\x287\x28D\x291\x298\x29E\x2A2\x2A5\x2AA\x2B4" +
            "\x2B7\x2BA\x2BE\x2C4\x2C8\x2CD\x2D4\x2D8\x2DC\x2E0\x2E3\x2E9\x2EF\x2F1" +
            "\x2FC\x302\x304\x30C\x312\x31A\x321\x329\x32E\x335\x339\x33C\x341\x34E" +
            "\x354\x35E\x362\x36C\x375\x37B\x37D\x382\x388\x38C\x38F\x393\x39E\x3A3" +
            "\x3A9\x3AB\x3B0\x3B5\x3B9\x3BD\x3C1\x3C4\x3C7\x3CA\x3CD\x3D2\x3D8\x3DA" +
            "\x3E2\x3E6\x3E9\x3EC\x3F0\x407\x40D\x411\x415\x41F\x425\x427\x433\x439" +
            "\x43B\x441\x447\x449\x453\x457\x45C\x464\x468\x46C\x474\x478\x484\x488" +
            "\x48F\x491\x497\x49B\x4A1\x4A5\x4A9\x4B1\x4B5\x4BB\x4C3\x4C9\x4CE\x4D3" +
            "\x4D8\x4E0\x4E6\x4EB\x4F0\x4F7\x4FD\x502\x507\x50C\x510\x514\x52D\x52F" +
            "\x539\x53D\x542\x54D\x551\x556\x564\x568\x571\x575\x578\x57C\x580\x583" +
            "\x587\x58B\x58E\x592\x595\x599\x59B\x5A0\x5A4\x5A8\x5AC\x5AE\x5B4\x5B8" +
            "\x5BB\x5C0\x5C4\x5CA\x5CD\x5D0\x5D4\x5D9\x5DF\x5E1\x5E8\x5EC\x5F2\x5F5" +
            "\x5FA\x600\x602\x609\x60D\x613\x616\x61B\x621\x623\x62B\x62F\x632\x635" +
            "\x639\x641\x645\x649\x64B\x64E\x653\x659\x65D\x661\x666\x66B\x66F\x673" +
            "\x678\x680\x682\x68E\x692\x69A\x69E\x6A6\x6AA\x6AE\x6B2\x6B6\x6BA\x6C2" +
            "\x6C6\x6D2\x6D7\x6DB\x6E1\x6E5\x6F0\x6F6\x6F9\x6FE\x705\x709\x70F\x713" +
            "\x718\x71B\x721\x725\x728\x72E\x732\x73A\x73E\x747\x74B\x74F\x753\x756" +
            "\x75B\x761\x763\x769\x76D\x774\x77C\x781\x788\x78C\x78F\x792\x795\x799" +
            "\x79E\x7A7\x7B1\x7B5\x7BC\x7BE\x7C3\x7C8\x7CD\x7D1\x7D7\x7DC\x7E1\x7E8" +
            "\x7EC\x7F0\x7F5\x7FC\x800\x804\x809\x80D\x812\x816\x81B\x81F\x824\x828" +
            "\x82D\x831\x836\x83A\x83F\x843\x848\x84C\x851\x855\x85A\x85E\x863\x867" +
            "\x86C\x870\x875\x879\x87E\x882\x887\x88B\x890\x894\x899\x89D\x8A2\x8A6" +
            "\x8AB\x8AF\x8B2\x8B4\x8BA\x8BF\x8C5\x8C9\x8CE\x8D3\x8D7\x8DB\x8DD\x8E1" +
            "\x8E3\x8E6\x8EA\x8F2\x8F9\x902\x906\x910\x915\x91B\x91D\x925\x929\x92C" +
            "\x92F\x935\x93B\x93E\x942\x946\x94A\x94D\x955\x95B\x960\x963\x967\x96B" +
            "\x96F\x972\x97A\x97F\x982\x987\x98B\x98E\x991\x999\x99F\x9A2\x9AA\x9B1" +
            "\x9B5\x9B8\x9BB\x9C3\x9C8\x9CB\x9CE\x9D2\x9D6\x9D8\x9DC\x9DF\x9E7\x9EC" +
            "\x9F1\x9F4\x9F7\x9FF\xA05\xA0A\xA0D\xA11\xA15\xA1A\xA1E\xA21\xA25\xA29" +
            "\xA2D\xA30\xA37\xA3B\xA3F\xA43\xA48\xA4B\xA4E\xA54\xA58\xA5C\xA60\xA64" +
            "\xA67\xA6A\xA6D\xA70\xA73\xA77\xA7D\xA81\xA86\xA8E\xA94\xA96\xA9A\xA9E" +
            "\xAA2\xAA5\xAAC\xAAE\xAB4\xAB6\xAB8\xAC1\xAC6\xACA\xACE\xAD2\xAD5\xADE" +
            "\xAE1\xAE5\xAE8";
        public static readonly ATN _ATN =
            new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
    }
} // namespace Rubberduck.Parsing.Grammar
